<?xml version="1.0" encoding="ISO-8859-1"?>
<SunopsisExport>
<Object class="com.sunopsis.dwg.dbobj.SnpTrt">
		<Field name="ExtVersion" type="java.lang.String"><![CDATA[10.1.3.22]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2009-04-15 10:09:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[TCHANTIE]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="IndJrnMethod" type="java.lang.String"><![CDATA[S]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IProject" type="com.sunopsis.sql.DbInt"><![CDATA[1000]]></Field>
	<Field name="IState" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtTrtTxt" type="com.sunopsis.sql.DbInt"><![CDATA[34084000]]></Field>
	<Field name="KimMultiDserver" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="KmDefault" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KmSrcTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="KmTechno" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LChecksum" type="com.sunopsis.sql.DbInt"><![CDATA[2507]]></Field>
	<Field name="LCode" type="java.lang.String">null</Field>
	<Field name="OrdFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="TrtName" type="java.lang.String"><![CDATA[RKM SAP ERP]]></Field>
	<Field name="TrtType" type="java.lang.String"><![CDATA[KR]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34084000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Component: RKM SAP ERP
Author: Oracle
Version: 10.1.3.22
Compatibility: ODI 10.1.3 and above


Description :
- Reverse Knowledge Module (Java Bean Shell)
- Reverse engineering Knowledge Module to retrieve the tables, columns and constraints from SAP Systems 4.6c and ECC 6.0.
- Reverse engineering Knowledge Module provides a Tree Browser UI for selecting tables and columns
- This KM provides logging (Use Log & Log File Name) options.

To use this knowledge module and  run the reverse engineering:
1. Import this knowledge module in one of your projects.
2. Create a model, and choose the reverse context as well as the knowledge module in the "reverse" tab.
3. Execute the reverse engineering and follow up the steps in the logs

Restrictions:
- The mask of tables to reverse must not be empty, and at least contain the '%' character.
- The tab Selective reverse cannot be used with this knowledge module.

Open Tool:
- Use Open Tool version 10.1.3.4 to upload ABAP program into SAP system]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[1000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[1000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Edit Command]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_TRT_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34085000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2107000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[100]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[USE_GUI]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Flag to display GUI]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34085000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Set to Yes to show UI browser for search and reverse sap tables into ODI Model. Set to No, and provide the table name, module name, or application component name in the KM option, that particular table or whole module, or whole application module will be reversed. ]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[User Exit help]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_UE_HELP]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_USER_EXIT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34087000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[34086000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2108000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[200]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[%]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_MODULE_NAME]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Sap Module Name]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34086000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[%]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[4000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[4000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Text value]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_VALUE]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_USER_EXIT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34087000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[For Wild Card Search Please use  "%" as the wild card search characters. RKM will convert to SAP's standard wild card search character which "*"]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34089000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[34088000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2109000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[210]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[%]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_APP_COMP_NAME]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[SAP Application Component Name]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34088000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[%]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[4000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34089000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[For Wild Card Search Please use "%" as the wild card search characters. RKM will convert to SAP's standard wild card search character which "*"]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34090000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2110000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[220]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[%]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_PACKAGE_NAME]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Sap Package Name]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34090000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[For Wild Card Search Please use "%" as the wild card search characters. RKM will convert to SAP's standard wild card search character which "*"]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34091000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2111000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[230]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[%]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_TABLE_DESC]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Description text of the SAP table]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34091000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[For Wild Card Search Please use "%" as the wild card search characters. RKM will convert to SAP's standard wild card search character which "*"]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34092000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2112000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[240]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[%]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_TABLES_NAME]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[One or multiple tables name]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34092000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[For multiple table Search Please use "," (comma)  as separator after every complete table name e.g:MARA,BSEG,HRP1270. For single table, just provide SAP ERP tableName]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34093000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2113000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[250]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[SAP_ODI_ERP_POOL]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_CONNECTION_POOL]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Name of SAP connection pool]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34093000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[SAP Connection Pool name]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34094000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2114000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[260]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[5]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_CONNECTION_POOL_SIZE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[No of SAP connections in pool]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34094000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Number of SAP connections to be maintained as a pool.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34095000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2115000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[300]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[GET_FOREIGN_KEYS]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Flag to get foreign keys]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34095000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Set to Yes to reverse foreign keys of SAP table.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34096000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2116000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[310]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[GET_INDEXES]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Flag to get Indexes]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34096000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Set to Yes to reverse indexes of a SAP table.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34097000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2117000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[320]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[GET_PRIMARY_KEYS]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Flag to get the primary keys]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34097000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Set to Yes to reverse the primary keys of a SAP table.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34098000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2118000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[400]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[<?=java.lang.System.getProperty("java.io.tmpdir") + java.lang.System.getProperty("file.separator")?>sap_rkm_erp_<?=odiRef.getSession("SESS_NO")?>.log]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[LOG_FILE_NAME]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Default Log File Name]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34098000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Different log file name and there location can be provided/changed in the Default Value]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34099000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2119000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[450]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[UPLOAD_ABAP_CODE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Indicator for RKM RFC upload]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34099000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Flag to upload RKM RFCs]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[34158000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2139000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[600]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[ZODI_FGR]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_FUNCTION_GROUP]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Funtional Group Name of SAP]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[34158000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[The name of the SAP function group where all generated ABAP programs will be uploaded.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:07.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36357000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[10]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Create Java Classes]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36357000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle	         		                                                            //
// ALL RIGHTS RESERVED.                                                                                                                            //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright                                          //
// notice in the COPYRIGHT file in this directory.                                                                                       //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;

/**
 * @(#)OdiSAPLogger.java  1.00 11/24/2008
 * Application : ODI SAP Knowledge Modules
 * Module      : SAP Logger
 * Author(s)   : Oracle,
 * About       :
 * Dependencies: JDK 1.4.2 API (with standard extensions),
 *
 *
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

/**
 * This class is a common class for handling all the error/exception messages
 * of the SAP ERP/BW RKM/LKM modules. This class writes the messages either to
 * ODI console or a defalut log file name written to Systems Temporary folder
 *
 * This class is a temporary class written for ODI 10g version as 10g doesn't
 * have logging framework. This class will be replaced with ODI 11g class which
 * will same method signatures as written in this class.
 *
 * Thus enabling us to easily migrate the RKM/LKM modules to 11g version.
 */
public class OdiSAPLogger {

	//Static Variables for all the supported log levels
	public static final Level FATAL = Level.parse(Integer.toString(
				Level.SEVERE.intValue() + 100));
	public static final Level ERROR = Level.SEVERE;
	public static final Level WARNING = Level.WARNING;
	public static final Level INFO = Level.INFO;
	public static final Level CONFIG = Level.CONFIG;
	public static final Level FINE = Level.FINE;
	public static final Level FINER = Level.FINER;
	public static final Level FINEST = Level.FINEST;
	public static PrintStream sapLogger = null;

	private String logFile = System.getProperty("java.io.tmpdir")+""+System.getProperty("file.separator")+""+"stackException.log";

	/**
	 * Default Constructor to instantiate the class
	 * This is used if all the log messages needs to be
	 * logged to console directly.
	 */
	public OdiSAPLogger() {

	}//End of Default Constructor


	/**
	 * Constructor to set the log file name to which the messages will be
	 * written
	 *
	 * @logFileName name of the log file to be created
	 */
	public OdiSAPLogger(String logFileName) {
		try {
			//Set the log file name in Javas System outputstream
			if(logFileName != null || !(logFileName.trim().equals(""))) {
				sapLogger = new PrintStream(new FileOutputStream(logFileName));
			}
			sapLogger.println("################################################################");
			sapLogger.println("################## ODI SAP Log file	##########################");
			sapLogger.println("################################################################");
		}catch(Exception le) {
			le.printStackTrace();
			sapLogger.println("Error in creating log file : " + logFileName + "-" + le.getMessage());
		}
	}

	/**
	 * Log a message, with no arguments.
	 *
	 * @param level Log Level
	 * @param msg message to be logged
	 */
	public void log(Level level, String msg) {
		String logMsg = level.getName() + ": " + msg;
		sapLogger.println(logMsg);
	}

	/**
	 * Log a message, with one object parameter.
	 *
	 * @param level Log Level
	 * @param msg message to be logged
	 * @param param1 parameter to be used in the msg
	 */
 	public void log(Level level, String msg, Object param1) {
		String logMsg = level.getName() + ": " + msg + "  " + param1;
		sapLogger.println(logMsg);
	}

      	/**
	 * Log a message, with an array of object arguments.
	 *
	 * @param level Log Level
	 * @param msg message to be logged
	 * @param params[] array of parameters to be used in the msg
	 */
 	public void log(Level level, String msg, Object[] params) {
		String logMsg = level.getName() + ": " + msg;
		sapLogger.println(logMsg);
	}

	/**
	 * Log a message, with associated Throwable information.
	 *
	 * @param level Log Level
	 * @param msg message to be logged
	 * @param thrown Throwable exception
	 */
	public void log(Level level, String msg, Throwable thrown) {
		String logMsg = level.getName() + ": " + msg + " " + thrown.getMessage();
		try {
			FileOutputStream fos = new FileOutputStream(logFile);
			PrintWriter pw = new PrintWriter(fos);
			thrown.printStackTrace(pw);
			//thrown.printStackTrace(System.out);
			sapLogger.println(logMsg);
		} catch(Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * Log a message, specifying source class and method,with no arguments.
	 *
	 * @param level Log Level
	 * @param sourceClass class name from where message to be logged
	 * @param sourceMethod method name of the class from where message
	 * to be logged.
	 * @param msg message to be logged
	 */
 	public void logp(Level level, String sourceClass, String sourceMethod, String msg) {
        	String logMsg = level.getName() + ": " + sourceClass + ": " + sourceMethod + " : " + msg;
		sapLogger.println(logMsg);
	}

	/**
	 * Log a message, specifying source class and method, with a single
	 * object parameter to the log message.
	 *
	 * @param level Log Level
	 * @param sourceClass class name from where message to be logged
	 * @param sourceMethod method name of the class from where message
	 * to be logged.
	 * @param msg message to be logged
	 * @param param1 parameter to be passed
	 */
 	public void logp(Level level, String sourceClass, String sourceMethod, String msg, Object param1) {
        	String logMsg = level.getName() + ": " + sourceClass + ": " + sourceMethod + " : " + msg + " " + param1;
		sapLogger.println(logMsg);
	}

	/**
	 * Log a message, specifying source class and method, with an array
	 * of object arguments.
	 *
	 * @param level Log Level
	 * @param sourceClass class name from where message to be logged
	 * @param sourceMethod method name of the class from where message
	 * to be logged.
	 * @param msg message to be logged
	 * @param params array of parameter to be passed
	 */
 	public void logp(Level level, String sourceClass, String sourceMethod, String msg, Object[] params) {

	      	String logMsg = level.getName() + ": " + sourceClass + ": " + sourceMethod + " : " + msg;
		sapLogger.println(logMsg);
	}

	/**
	 * Log a message, specifying source class and method, with associated
	 * Throwable information.
	 *
	 * @param level Log Level
	 * @param sourceClass class name from where message to be logged
	 * @param sourceMethod method name of the class from where message
	 * to be logged.
	 * @param msg message to be logged
	 * @param params array of parameter to be passed
	 */
 	public void logp(Level level, String sourceClass, String sourceMethod, String msg, Throwable thrown) {

		String logMsg = level.getName() + ": " + sourceClass + ": " + sourceMethod + " : " + msg + " " + thrown.getMessage();
		try {
			FileOutputStream fos = new FileOutputStream(logFile);
			PrintWriter pw = new PrintWriter(fos);
			thrown.printStackTrace(pw);
			//thrown.printStackTrace(System.out);
			sapLogger.println(logMsg);
		} catch(Exception e) {
			e.printStackTrace();
		}
	}


	//Sample Usage
	/*public static void main(String[] args) {

		//For logging to console directly
		//OdiSAPLogger sapLogger = new OdiSAPLogger();

		//For logging to a file
		OdiSAPLogger sapLogger = new OdiSAPLogger("C:\\temp\\ODI_RKM.log");
		sapLogger.log(sapLogger.FINE, "This is a Fine message");
		sapLogger.log(sapLogger.ERROR, "This is a Error msg");
		sapLogger.logp(sapLogger.INFO, "OdiSAPLogger Class", "main Method", "This is a Info msg with source class and method name");
	}*/


}// End of OdiSAPLogger class


/////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle 								       		   //
// ALL RIGHTS RESERVED.                                                    //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright //
// notice in the COPYRIGHT file in this directory.                         //
////////////////////////////////////////////////////////////////////////////

import java.util.Properties;
import com.sap.conn.jco.ext.DestinationDataEventListener;
import com.sap.conn.jco.ext.DestinationDataProvider;

/**
 * @(#)MyDestinationDataProvider.java  2.00 28/May/2009
 *
 * Application : ODI SAP Knowledge Modules
 *
 * Module      : SAP ERP Adapter (JCO API ver 3.0)
 *
 * Author(s)   : Oracle Corp.,
 *
 * About       :
 *
 * Dependencies: JDK 1.5 and above API (with standard extensions),
 *
 *
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

/**
 * <b>MyDestinationDataProvider</b> class implements the DestinationDataProvider
 * interface of JCO 3 API to connect SAP system
 * SAP Metadata information.

**/

public class MyDestinationDataProvider implements DestinationDataProvider{

	 private DestinationDataEventListener eL;

     private Properties ABAP_AS_properties;
     
     private String conPool;
     
     public MyDestinationDataProvider(String connectionPoolName) {
    	 this.conPool = connectionPoolName.trim();
     }
     
     public Properties getDestinationProperties(String destinationName) {
         if(destinationName.equals(conPool) && ABAP_AS_properties != null)
             return ABAP_AS_properties;
         
         return null;
         //alternatively throw runtime exception
         //throw new RuntimeException("Destination " + destinationName + " is not available");
     }
     
     public void setDestinationDataEventListener(DestinationDataEventListener eventListener) {
         this.eL = eventListener;
     }

     public boolean supportsEvents() {
         return true;
     }
     
     void changePropertiesForABAP_AS(Properties properties) {
         if(properties==null) {
             ABAP_AS_properties = null;
             eL.deleted(conPool);
         }
         else {
             if(ABAP_AS_properties==null || !ABAP_AS_properties.equals(properties)) {
            	 ABAP_AS_properties = properties;
                 eL.updated(conPool);
             }
         }//end of else changePropertiesForABAP_AS
     }//end of method 
	/**
	 * @param args
	 */
	/*public static void main(String[] args) {
		// TODO Auto-generated method stub

	}*/

}//end of class MyDestinationDataProvider



/////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle 								       		   //
// ALL RIGHTS RESERVED.                                                    //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright //
// notice in the COPYRIGHT file in this directory.                         //
////////////////////////////////////////////////////////////////////////////

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Properties;
import java.util.TreeMap;

import com.sap.conn.jco.JCoDestination;
import com.sap.conn.jco.JCoDestinationManager;
import com.sap.conn.jco.JCoException;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoParameterList;
import com.sap.conn.jco.JCoRepository;
import com.sap.conn.jco.JCoTable;
import com.sap.conn.jco.ext.DestinationDataProvider;



/**
 * @(#)OdiSAPERPAdapter.java  2.00 28/May/2009
 *
 * Application : ODI SAP Knowledge Modules
 *
 * Module      : SAP ERP Adapter (JCO API ver 3.0)
 *
 * Author(s)   : Oracle Corp.,
 *
 * About       :
 *
 * Dependencies: JDK 1.5 and above API (with standard extensions),
 *
 *
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

/**
 * <b>OdiSAPERPAdapter</b> class handles creation/management of SAP connections
 * including Connection pooling. It also deals with all the methods for getting
 * SAP Metadata information.
 */
public class OdiSAPERPAdapter {

	public String logFileName = null;

	public OdiSAPLogger sapLogger = null;

	//SAP Connection pool name
	public static final String POOL_NAME = "<%=snpRef.getOption("SAP_CONNECTION_POOL")%>";
	//public static final String POOL_NAME = "SAP_CON_POOL";
	// repository name
  	private JCoRepository repository = null;

  	//The JCoDestination - sap connection we will be using
  	private static JCoDestination destination = null;

	//Name of the Custom RFC Function used to get the All installed SAP modules
  	public static final String GET_SAP_MODULES_RFC_FUNCTION = "ZODI_GET_SAP_MODULES";
	
	//Name of the Custom RFC Fucntions used in this class gets all the SAP tables
	public static final String GET_SAP_TABLES_RFC_FUNCTION_NAME = "Z_ODI_RFC_GET_TABLES";

	//gets all the SAP Fields
	public static final String GET_SAP_FIELDS_FUNCTION_NAME = "Z_ODI_RFC_READ_TABLE";

	//gets primary keys of a SAP Table
	public static final String GET_SAP_TABLES_PK_FK_RFC_NAME = "Z_ODI_RFC_TABLE_KEYS";

	//gets Indexes keys of a SAP Table
	public static final String GET_SAP_TABLES_INDEXES_RFC_NAME = "Z_ODI_RFC_GET_TABLE_INDEXES";

	MyDestinationDataProvider myProvider = null;

	/**
	* Default Constructor, 
	* to SAP System.
	*/
	public OdiSAPERPAdapter(OdiSAPLogger sapLogger) {
		//initialize all the variables
		//initialize();//For Eclipse version
		this.sapLogger = sapLogger;
	}//End of Default Constructor


	/**
		 * This method is used to set the connection pool with provided SAP Server credential
		 * and SAP Connection Pool name
		 *
		 * @param cHostName
		 * @param cSystemNo
		 * @param sClient
		 * @param cLanguage
		 * @param cUsername
		 * @param cPassword
		 * @param cSystemId
		 * @param cSapRouterString
		 * @return void
		 */
		public void setSAPConnection(String cHostName, String cSystemNo, String sClient, String cLanguage, String cUsername, String cPassword, String cSystemId, String cSapRouterString) {
			ODISAPERPResourceBundle odiSapERPResourceBundle = new ODISAPERPResourceBundle(sapLogger);
			odiSapERPResourceBundle.initializeResource();
			if(cHostName.equals("") || cHostName.equals(null)){
			throw new Exception(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_HostName_not_defined"));
			}
			
			if(cSystemNo.equals("") || cSystemNo.equals(null)){
			throw new Exception(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_System_Number_not_defined"));
			}
			
			if(sClient.equals("") || sClient.equals(null)){
			throw new Exception(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_Sap_Client_not_defined"));
			}

			if(cLanguage.equals("") || cLanguage.equals(null)){
			throw new Exception(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_Sap_Language_Not_defined"));
			}			

			if(cUsername.equals("") || cUsername.equals(null)){
			throw new Exception(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_UserName_not_defined"));
			}

			if(cPassword.equals("") || cPassword.equals(null)){
			throw new Exception(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_Password_not_defined"));
			}

			String sapPoolSize = "<%=snpRef.getOption("SAP_CONNECTION_POOL_SIZE")%>";
			//String sapPoolSize = "10";
			try {
				synchronized (this) {
					if(!com.sap.conn.jco.ext.Environment.isDestinationDataProviderRegistered()){
						//set connection properties
						Properties connectProperties = new Properties();
						connectProperties.setProperty(DestinationDataProvider.JCO_ASHOST, cHostName);
						connectProperties.setProperty(DestinationDataProvider.JCO_SYSNR,  cSystemNo);
						connectProperties.setProperty(DestinationDataProvider.JCO_CLIENT, sClient);
						connectProperties.setProperty(DestinationDataProvider.JCO_USER,   cUsername);
						connectProperties.setProperty(DestinationDataProvider.JCO_PASSWD, cPassword);
						connectProperties.setProperty(DestinationDataProvider.JCO_LANG,   cLanguage);
						connectProperties.setProperty(DestinationDataProvider.JCO_POOL_CAPACITY, sapPoolSize);
						connectProperties.setProperty(DestinationDataProvider.JCO_EXPIRATION_TIME, "15000");
						connectProperties.setProperty(DestinationDataProvider.JCO_TRACE, "1");
				
						myProvider = new MyDestinationDataProvider(POOL_NAME);
						com.sap.conn.jco.ext.Environment.registerDestinationDataProvider(myProvider);
						myProvider.changePropertiesForABAP_AS(connectProperties);
					}//end of if condition
				}//end of synchronized block
 		        destination = JCoDestinationManager.getDestination(POOL_NAME);
				sapLogger.log(sapLogger.INFO, "setSAPConnection - destination: "+destination);
				repository = destination.getRepository();
				sapLogger.log(sapLogger.INFO, "setSAPConnection - Connection to SAP successfully created....");
				sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "setSAPConnection","SAP Connection attributes :", destination.getAttributes());
			}catch(JCoException e) {
				sapLogger.logp(sapLogger.ERROR, "OdiSAPERPAdapter", "setSAPConnection()","Error in creating the SAP Connection", e);
				chainedSAPException(e, "setSAPConnection");
			}

	}//end of method setSAPConnection()

	/**
		 * This method will throw chained exception
		 * @param Exception e
		 * @param String errorLoc
		 * @return void
		 */
		public void chainedSAPException(Exception ex, String errorLoc) {
			String msg = ex.getMessage();
			Throwable e = ex.getCause();
			while ( e != null) {
			      msg += "\nCause: " + e.getMessage();
			      e = e.getCause();
			}
			throw new RuntimeException(errorLoc+"..."+ msg);
		}//end of chainedSAPException() method


	/**
	 * This method returns connection from connection pool
	 * @ return JCoDestination - connection from pool
	 */
	private JCoDestination getSAPConnection() {
		try {
			destination = JCoDestinationManager.getDestination(POOL_NAME);
		}catch(JCoException e) {
			chainedSAPException(e, "getSAPConnection");
		}
		
		return destination;
	}//end of getSAPConnection() method

	public void unregisterDataProvider(){
		try{
			sapLogger.log(sapLogger.INFO, "Unregister SAP Connection Pool...");
			myProvider.changePropertiesForABAP_AS(null);
			com.sap.conn.jco.ext.Environment.unregisterDestinationDataProvider(myProvider);
		}catch(Exception ex){
			sapLogger.log(sapLogger.ERROR, "Error in unregister: "+ ex.toString());
		}
	}

//	/**
//   * To run from Eclipse code
//	 * Initializes all the variables: logger, connection informations
//	 */
//	private void initialize() {
//		//Initialize Logger class
//		//check if the USE_LOG option is set for the log file
//		//During integration need to get the information from
//		//options variiables using sunopsis/odi api's
//		logFileName = "C:\\temp\\ODI_SAP_ERP_RKM.log";
//		sapLogger = new OdiSAPLogger(logFileName);
//
//		//initialize SAP Connection parameters.
//		//actually get these properties from ODI topology manager
//		//using ODI api TO DO for integration
//		SRC_SCHEMA = "800";
//		SRC_USER_NAME = "ODIRFC";
//		SRC_PWD = "*****";
//		SRC_HOST_NAME = "****";
//		SRC_CATALOG="00";
//
//	}//end of initialize method.


	/**
	 * Returns all the available SAP Modules initial list with its
	 * descriptions. This method is called when the browser comes first
	 * time to display all the available modules first
	 */
	public TreeMap getALLSAPModules() {
		sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getALLSAPModules","Initializing all SAP modules");

		TreeMap sModuleList = new TreeMap();
		try {
			JCoFunction function = destination.getRepository().getFunction(GET_SAP_MODULES_RFC_FUNCTION);

			if(function == null)
	            throw new RuntimeException("ZODI_GET_SAP_MODULES RFC not found in SAP.");
			//execute the rfc function
			sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getALLSAPModules","Executing RFC function for list of available SAP modules");
			function.execute(destination);
			//process the output of the RFC Fucntion execution
			JCoTable listOfModules = function.getTableParameterList().getTable("IT_APPLN");
			
			//process all the rows of the tables and create objects of class SAPTable in an array list
			SAPModule sModule = null;
			int i = listOfModules.getNumRows();
			sapLogger.log(sapLogger.INFO,"Number of SAP Modules: "+i);
			if(listOfModules.getNumRows() > 0) {
				for(int r=0; r < listOfModules.getNumRows(); r++) {
					listOfModules.setRow(r);
					sModule = new SAPModule();

					sModule.name = listOfModules.getString("APPL_COMP");
					sModule.desc = listOfModules.getString("SHORT_TEXT");
					if(!(sModule.name.startsWith("BEARBEITUNG") || sModule.name.startsWith("NOT USED"))) {
						//sapLogger.log(sapLogger.INFO, "Module :"+sModule.name+"   "+sModule.desc);
						sModuleList.put(sModule.name, sModule.desc);
					}//end of if condition
				}//end of for loop
				sModuleList.put("IS", "Industry Specific");
				sModuleList.put("UNDEFINED", "General");
			}//end of if(listOfTables.getNumRows() > 0) --
		}catch(JCoException ex) {
			sapLogger.log(sapLogger.ERROR, "OdiSAPERPAdapter.getALLSAPModules(): Error in getting list of SAP module : "+ex.getCause());
		}
		sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSAPTables","Number of SAP Module retrieved: " + sModuleList.size());
		return sModuleList;

	}//End of getALLSAPModules method


	/**
	 * This method returns all the available application components and
	 * tables inside a specified module.
	 * Once the initial module list is displayed then on each click of the
	 * module node call this method passing the clicked module name then
	 * this method returns all the available application components or
	 * tables inside this passed module name.
	 *
	 * @param appCompName pass the name of the module/application
	 * @param String undefined module
	 * component name
	 */
   	public ArrayList getSAPTables(String appCompName, String undefinedModule) {
		sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSAPTables","Getting list of available SAP tables under module", appCompName);
		ArrayList sapTablesObjs = new ArrayList();
		ArrayList sortedAppCompList = new ArrayList();

		try {
			//get connection from pool
      		destination = getSAPConnection();
			//get the JCO function name from the RFC function name
			sapLogger.log(sapLogger.INFO, "getSAPTables() - destination: "+destination);
			JCoFunction function = destination.getRepository().getFunction(GET_SAP_TABLES_RFC_FUNCTION_NAME);

			if(function == null)
	            throw new RuntimeException("Z_ODI_RFC_GET_TABLES RFC not found in SAP.");

			JCoParameterList input = function.getImportParameterList();

			input.setValue("IV_FLAG","X");
			if((undefinedModule != null) && (undefinedModule.equalsIgnoreCase("Y-Category"))) {
				input.setValue("IV_TABLE", "Y*" );
			}else if((undefinedModule != null) && (undefinedModule.equalsIgnoreCase("Z-Category"))) {
				input.setValue("IV_TABLE", "Z*" );
			}

			input.setValue("IV_AP_COMP",appCompName.trim());

			//execute the rfc function
			sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSAPTables","Executing RFC function for list of available SAP tables under module", appCompName);
			//client.execute(function);
			function.execute(destination);

			//process the output of the RFC Fucntion execution
			JCoTable listOfTables = function.getTableParameterList().getTable("ET_TBL_LIST");

			//process all the rows of the tables and create objects of class SAPTable in an
			//array list
			SAPTable sTable = null;
			int i = listOfTables.getNumRows();
			System.out.println("Number of Rows: "+i);
			if(listOfTables.getNumRows() > 0) {
				for(int r=0; r < listOfTables.getNumRows(); r++) {

					listOfTables.setRow(r);
					sTable = new SAPTable();
					if(appCompName.startsWith(listOfTables.getString("MODULE_NAME")) ) {
						sTable.name = listOfTables.getString("TABNAME");
						sTable.desc = listOfTables.getString("COMMENTS");
						sTable.appComp = listOfTables.getString("MODULE_NAME");
						sTable.type = "T";
					}else  {
						sTable.name = listOfTables.getString("MODULE_NAME");
						sTable.desc = listOfTables.getString("COMMENTS");
						sTable.type = "AC";
					}
					if((undefinedModule != null) && (undefinedModule.equalsIgnoreCase("Y-Category") || undefinedModule.equalsIgnoreCase("Z-Category"))) {
						sapLogger.log(sapLogger.INFO, ">>>>>>>>> sTable.name: "+sTable.name);
						sapLogger.log(sapLogger.INFO, ">>>>>>>>> App Comp: "+sTable.appComp);
						if(sTable.name.startsWith("Z") || sTable.name.startsWith("Y")) {
							if((sTable.name.indexOf("-") == -1 ) && (sTable.appComp == null || sTable.appComp.equalsIgnoreCase(""))) {
								sapTablesObjs.add(sTable);
							}
						}
					}else {
						sapTablesObjs.add(sTable);
					}
				}//end of for loop
			}//end of if(listOfTables.getNumRows() > 0) --
			//sorting arraylist
			ArrayList appCompList = new ArrayList();
			Iterator itr = sapTablesObjs.iterator();
			SAPTable sapTableObjFilter = null;
			while(itr.hasNext()) {
				sapTableObjFilter = new SAPTable();
				sapTableObjFilter = (SAPTable) itr.next();
				if(sapTableObjFilter.name.indexOf("-") != -1) {
					appCompList.add(sapTableObjFilter);//Adding App Comp
					itr.remove();
				}
			}//while(itr.hasNext())
			sortedAppCompList = sortArrayList(appCompList);
			ArrayList sortedTableList = sortArrayList(sapTablesObjs);
			
			Object[] tableListArray = sortedTableList.toArray(); //
			sortedAppCompList.addAll(Arrays.asList(tableListArray));//merging appComplist & tableList
			//End of sorting table list
			sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSAPTables","Complete getting list of tables for the module : " + appCompName);
		}catch(JCoException ex) {
			sapLogger.log(sapLogger.ERROR, "OdiSAPERPAdapter.getSAPTables(): Error in getting list of SAP Tables: "+ex.getCause());
		}catch(Exception ex) {
			sapLogger.logp(sapLogger.ERROR, "OdiSAPERPAdapter", "getSAPTables","Error in getting list of tables for the module : " + appCompName, ex);
		}
		sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSAPTables","Number of SAP Tables retrieved: " + sortedAppCompList.size());
		return sortedAppCompList;
   	}//End of getSAPTables method

   	/**
   	 *
   	 * @param ArrayList    of list of tables / App Comp
   	 * @return ArrayList
   	 */
   	private ArrayList sortArrayList(ArrayList dataList) {

		Collections.sort(dataList, new Comparator(){
            public int compare(Object obj1, Object obj2) {
            	SAPTable sTable1 = (SAPTable) obj1;
            	SAPTable sTable2 = (SAPTable) obj2;
            	
            	return sTable1.name.compareToIgnoreCase(sTable2.name);
            }
        });
		return dataList;
	}//end of sortArrayList() method


	/**
	 * This method returns all the fields for a specified table name.
	 *
	 * @param tableName pass the name of the table
	 */
       	public ArrayList getSAPFields(String tableName) {
		sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSAPFields","Getting list of SAP fields for table", tableName);
		ArrayList sapFieldsObjs = new ArrayList();
		//JCO.Client cl = null;

		try {
			//get connection from pool
			destination = getSAPConnection();
			//get the JCO function name from the RFC function name
			JCoFunction function = destination.getRepository().getFunction(GET_SAP_FIELDS_FUNCTION_NAME);
			if(function == null)
	            throw new RuntimeException("Z_ODI_RFC_READ_TABLE RFC not found in SAP.");

			JCoParameterList input = function.getImportParameterList();

			input.setValue("QUERY_TABLE",tableName);
			input.setValue("ROWSKIPS","0");
			input.setValue("ROWCOUNT","0");
			input.setValue("NO_DATA","X");

			//execute the rfc function
			sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSAPFields","Executing RFC function for list of SAP fileds for table", tableName);
			function.execute(destination);
			//process the output of the RFC Fucntion execution

			JCoTable listOfFields = function.getTableParameterList().getTable("FIELDS");
			//process all the rows of the fields and create objects of class SAPField in an array list
			SAPField sField = null;
			if(listOfFields.getNumRows() > 0) {
				for(int r=0; r < listOfFields.getNumRows(); r++) {

					listOfFields.setRow(r);
					sField = new SAPField();
					sField.name = listOfFields.getString("FIELDNAME");
					sField.desc = listOfFields.getString("FIELDTEXT");
					sField.dataType = listOfFields.getString("DATATYPE");
					sField.offset = listOfFields.getString("OFFSET");
					sField.length = listOfFields.getString("LENGTH");
					sField.decimal = listOfFields.getString("DECIMALS");
					sField.notnull = listOfFields.getString("NOTNULL");

					sapFieldsObjs.add(sField);
					//sapLogger.log(sapLogger.INFO, "sField.name: "+sField.name+"  dataType: "+sField.dataType+", length: "+sField.length);
				}//end of for loop
			}//end of if condition
			sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSAPFields","Completed getting list of fields for the table : " + tableName);
		}catch(Exception ex) {
			sapLogger.logp(sapLogger.ERROR, "OdiSAPERPAdapter", "getSAPFields","Error in getting list of fields for the table : " + tableName, ex);
		}
		sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSAPFields","Number of Fields retrieved: " + sapFieldsObjs.size());
		return sapFieldsObjs;
	}//End of getSAPFields method


   	/**
	 * This method returns the all primary keys for a specified table name.
	 *
	 * @param tableName pass the name of the table
	 */

      public ArrayList getPrimaryKeys(String tableName) {
    	  sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getPrimaryKeys","Getting details of Primary keys of table ", tableName);
    	  ArrayList sapTablesPrimaryKeyList = new ArrayList();
    	  //JCO.Client cl
    	  try {

    		  //get connection from pool
    		  destination = getSAPConnection();
    		  //get the JCO function name from the RFC function name
    		  JCoFunction function = destination.getRepository().getFunction(GET_SAP_TABLES_PK_FK_RFC_NAME);
    		  if(function == null)
  	            throw new RuntimeException("Z_ODI_RFC_TABLE_KEYS RFC not found in SAP.");

			  //set the input parameters for the RFC Fucntion
    		  JCoParameterList input = function.getImportParameterList();
			  input.setValue("IV_TABLE_NAME",tableName);
			  input.setValue("IV_ALL_KEYS","");

			  //execute the rfc function
			  sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getPrimaryKeys","Executing RFC function for list of Primary keys for table", tableName);
			  function.execute(destination);

			  //process the output of the RFC Fucntion execution
			  JCoTable listOfPrimaryKeys = function.getTableParameterList().getTable("ET_PRI_KEYS_TABLE");
			  //process all the rows of the tables to get primary key and create objects of class SAPTablePrimaryKey in an array list

			  SAPTablePrimaryKey sPrimaryKeyObj = null;
			  if(listOfPrimaryKeys.getNumRows() > 0) {
				  for(int r=0; r < listOfPrimaryKeys.getNumRows(); r++) {
					  listOfPrimaryKeys.setRow(r);
					  sPrimaryKeyObj = new SAPTablePrimaryKey();
					  sPrimaryKeyObj.primaryKeyTableName = listOfPrimaryKeys.getString("PRI_KEY_TABNAM");
					  sPrimaryKeyObj.primaryKeyFieldName = listOfPrimaryKeys.getString("PRI_KEY_FIELD");

					  sapTablesPrimaryKeyList.add(sPrimaryKeyObj);
				  }
			  }
			  sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getPrimaryKeys","Completed getting list of primary keys for the table : " + tableName);
    	  }catch(Exception ex) {
    		  sapLogger.logp(sapLogger.ERROR, "OdiSAPERPAdapter", "getPrimaryKeys","Error in getting list of primary keys for the table : " + tableName, ex);
    	  }
    	return sapTablesPrimaryKeyList;
	}//End of getPrimaryKeys method

      /**
  	 * This method returns the all Foreign keys for a specified table name.
  	 *
  	 * @param tableName pass the name of the table
  	 */

        public ArrayList getForeignKeys(String tableName) {
      	  sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getForeignKeys","Getting details of Foreign keys of table ", tableName);
      	  ArrayList sapTablesForeignKeyList = new ArrayList();

      	  try {
      		  //get connection from pool
      		 destination = getSAPConnection();
      		 //get the JCO function name from the RFC function name
      		 JCoFunction function = destination.getRepository().getFunction(GET_SAP_TABLES_PK_FK_RFC_NAME);
      		 if(function == null)
  	            throw new RuntimeException("Z_ODI_RFC_TABLE_KEYS RFC not found in SAP.");
      		 
  			  //set the input parameters for the RFC Fucntion
      		  JCoParameterList input = function.getImportParameterList();
  			  input.setValue("IV_TABLE_NAME",tableName);
  			  input.setValue("IV_ALL_KEYS","X");

  			  //Get the SAP Client connection from the pool
  			  function.execute(destination);;
  			  //execute the rfc function
  			  sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getForeignKeys","Executing RFC function for list of Foreign keys for table", tableName);


  			  //process the output of the RFC Fucntion execution
  			  JCoTable listOfPrimaryKeys = function.getTableParameterList().getTable("ET_FOR_KEYS_TABLE");
  			  //process all the rows of the tables to get Foreign key and create objects of class SAPTablePrimaryKey in an
  				//array list

  			  SAPTableForeignKey sForeignKeyObj = null;
  			  if(listOfPrimaryKeys.getNumRows() > 0) {
  				  for(int r=0; r < listOfPrimaryKeys.getNumRows(); r++) {
  					  listOfPrimaryKeys.setRow(r);
  					  sForeignKeyObj = new SAPTableForeignKey();

  					  sForeignKeyObj.primaryKeyTabName = listOfPrimaryKeys.getString("TABLE_NAME");
  					  sForeignKeyObj.primaryKeyField = listOfPrimaryKeys.getString("FIELD_NAME");
  					  sForeignKeyObj.foreignKeyTabName = listOfPrimaryKeys.getString("FK_TABLE_NAME");
  					  sForeignKeyObj.foreignKeyTableDesc = listOfPrimaryKeys.getString("FK_TABLE_TEXT");
  					  sForeignKeyObj.foreignKeyField = listOfPrimaryKeys.getString("FK_FIELD_NAME");

  					  sapTablesForeignKeyList.add(sForeignKeyObj);
  				  }
  			  }
  			  sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getForeignKeys","Completed getting list of Foreign keys for the table : " + tableName);

      	  }catch(Exception ex) {
      		  sapLogger.logp(sapLogger.ERROR, "OdiSAPERPAdapter", "getForeignKeys","Error in getting list of Foreign keys for the table : " + tableName, ex);
      	  }
      	  return sapTablesForeignKeyList;
  	}//End of getForeignKeys method

    /**
  	 * This method returns the all Indexes name & field for a specified table name.
  	 *
  	 * @param tableName - pass the name of the table
  	 */

    public ArrayList getTableIndexes(String tableName) {

    	sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getTableIndexes","Getting details of Indexes of table ", tableName);
	  	ArrayList sapTablesIndexesList = new ArrayList();
	  	//JCO.Client cl = null;
	  	try {
	  		//get connection from pool
	  		destination = getSAPConnection();
	  		//get the JCO function name from the RFC function name
	  		JCoFunction function = destination.getRepository().getFunction(GET_SAP_TABLES_INDEXES_RFC_NAME);
	  		if(function == null)
  	            throw new RuntimeException("Z_ODI_RFC_GET_TABLE_INDEXES RFC not found in SAP.");

			//set the input parameters for the RFC Fucntion
	  		JCoParameterList input = function.getImportParameterList();
			input.setValue("IV_QUERY_TABLE",tableName);
			//input.setValue("IV_ALL_KEYS","X");

			//Get the SAP Client connection from the pool
			function.execute(destination);
			//execute the rfc function
			sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getTableIndexes","Executing RFC function for list of Indexes for table", tableName);

			//process the output of the RFC Fucntion execution
			JCoTable listOfPrimaryKeys = function.getTableParameterList().getTable("ET_TABLE_INDEX_LIST");
			//process all the rows of the tables to get Indexes and create objects of class SAPTableIndexes in an array list

			SAPTableIndexes sTableIndexObj = null;
			if(listOfPrimaryKeys.getNumRows() > 0) {
				for(int r=0; r < listOfPrimaryKeys.getNumRows(); r++) {
					listOfPrimaryKeys.setRow(r);
					sTableIndexObj = new SAPTableIndexes();

					sTableIndexObj.indexName = listOfPrimaryKeys.getString("INDEXNAME");
					sTableIndexObj.indexField = listOfPrimaryKeys.getString("INDEXFIELDS");

					sapTablesIndexesList.add(sTableIndexObj);
				}
			}
			sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getTableIndexes","Completed getting list of Indexes for the table : " + tableName);
	  	  	}catch(Exception ex) {
	  	  		sapLogger.logp(sapLogger.ERROR, "OdiSAPERPAdapter", "getTableIndexes","Error in getting list of Indexes for the table : " + tableName, ex);
	  	  	}
          	return sapTablesIndexesList;
    }//End of getTableIndexes method


   	/**
     * This method returns the list of possible application component, Short Description, packages and tables for given Search Criteria
     * @param ivTable, ivDesc, ivPackg, ivAPCom -  pass the name of the table, desc, package and application application
	 * @return ArrayList
    */

    public ArrayList getSearchResult(String ivTable, String ivDesc, String ivPackg, String ivAPComp) {

    	sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSearchResult","Search- Getting list search criteria: ");
    	ArrayList sapSearchDetailObjs = new ArrayList();

    	try {
            //get connection from pool
           destination = getSAPConnection();
           //get the JCO function name from the RFC function name
           JCoFunction function = destination.getRepository().getFunction(GET_SAP_TABLES_RFC_FUNCTION_NAME);
           if(function == null)
 	            throw new RuntimeException("Z_ODI_RFC_GET_TABLES RFC not found in SAP.");

            //set the input parameters for the RFC Fucntion
            JCoParameterList input = function.getImportParameterList();
            input.setValue("IV_FLAG","X");
            if(ivTable != null) {
            	sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSearchResult","Search- Getting list search criteria - IV_TABLE: "+ivTable);
            	input.setValue("IV_TABLE",ivTable);
            }
            if(ivDesc != null) {
            	sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSearchResult","Search- Getting list search criteria - IV_DESC: "+ivDesc);
            	input.setValue("IV_DESC",ivDesc);
            }
            if(ivPackg != null) {
            	sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSearchResult","Search- Getting list search criteria - IV_PACKG: "+ivPackg);
            	input.setValue("IV_PACKG",ivPackg);
            }
            if(ivAPComp != null) {
            	sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSearchResult","Search- Getting list search criteria - IV_AP_COMP: "+ivAPComp);
            	input.setValue("IV_AP_COMP",ivAPComp);
            }
            //execute the rfc function
            sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSearchResult","Executing RFC function for list search criteria");
            function.execute(destination);

            //process the output of the RFC Fucntion execution
            JCoTable listOfTables = function.getTableParameterList().getTable("ET_TBL_LIST");

            //process all the rows of the tables and create objects of class SAPSearchDetail in an array list
            SAPSearchDetail searchDetail = null;
            sapLogger.log(sapLogger.INFO,"listOfTables.getNumRows()>>>>: "+listOfTables.getNumRows());
            if(listOfTables.getNumRows() > 0)
            {
                for(int r=0; r < listOfTables.getNumRows(); r++) {
                    listOfTables.setRow(r);
                    searchDetail = new SAPSearchDetail();

                    searchDetail.name = listOfTables.getString("TABNAME");
                    sapLogger.log(sapLogger.INFO, "searchDetail.name>>>>> "+searchDetail.name);

                    searchDetail.desc = listOfTables.getString("COMMENTS");
                    sapLogger.log(sapLogger.INFO, "searchDetail.desc>>>>> "+searchDetail.desc);

                    searchDetail.tableClass = listOfTables.getString("TABCLASS");
                    sapLogger.log(sapLogger.INFO, "searchDetail.tableClass>>>>> "+searchDetail.tableClass);

                    searchDetail.devClass = listOfTables.getString("DEVCLASS");
                    sapLogger.log(sapLogger.INFO, "searchDetail.devClass>>>>> "+searchDetail.devClass);

                    searchDetail.moduleName = listOfTables.getString("MODULE_NAME");
                    sapLogger.log(sapLogger.INFO, "searchDetail.moduleName>>>>> "+searchDetail.moduleName);

                    sapSearchDetailObjs.add(searchDetail);
                }
            }
            // Release the client into the pool
            //JCO.releaseClient(client);
            sapLogger.logp(sapLogger.INFO, "OdiSAPERPAdapter", "getSearchResult","Complete getting list of search criteria : ");
    	}catch(Exception ex) {
    		sapLogger.logp(sapLogger.ERROR, "OdiSAPERPAdapter", "getSearchResult","Error in getting list search criteria : ", ex);
        }
    	return sapSearchDetailObjs;
    }//End of getSearchResult method


}// End of OdiSAPERPAdapter class


/**
 * This class is used to store SAP Module 
 * name & description to display in the tree browser.
 */
class SAPModule {
   	public String name;
	public String desc;
}

/**
 * This class to store SAP table or application
 * component information to display in the tree browser.
 */
class SAPTable {
   	public String name;
	public String desc;
	public String type;
	public String appComp;
}
/**
 * This class to store SAP Fields
 * information to display in the tree browser.
 */
class SAPField {
	public String name;
	public String desc;
	public String dataType;
	public String offset;
	public String length;
	public String decimal;
	public String notnull;
}

 /**
  * This class to store the searched SAP table or application
  * component information to display in the tree browser.
  */
class SAPSearchDetail {
	public String name;
	public String desc;
	public String type;
	public String tableClass;
	public String devClass;
	public String moduleName;
}

/**
 * This class to store SAP tables primary key
 * information to display in the SAP Model in ODI.
*/
class SAPTablePrimaryKey {
	public String primaryKeyTableName;
	public String primaryKeyFieldName;
}

/**
 * This class to store SAP tables FOREIGN key
 * information to display in the SAP Model in ODI.
*/
class SAPTableForeignKey {
	public String primaryKeyTabName;
	public String primaryKeyField;
	public String foreignKeyTabName;
	public String foreignKeyTableDesc;
	public String foreignKeyField;
}

/**
 * This class to store SAP tables Indexes
 * information to display in the SAP Model in ODI.
*/
class SAPTableIndexes {
	public String indexName;
	public String indexField;
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle	         		                                                               //
// ALL RIGHTS RESERVED.                                                                                       //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright                                   //
// notice in the COPYRIGHT file in this directory.                                                          //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Resource Bundle class
import java.util.Locale;
import java.util.ResourceBundle;

/**
 * <b>ODISAPERPResourceBundle</b> class handles loading of language resource
 * properties and providing strings as ui lables.
 * On fail, it sets the custome messages for each key
 */
public class ODISAPERPResourceBundle {


	private OdiSAPLogger sapLogger = null;
	private String resourceMessage = "";
	private String baseResourceName = null;
	private ResourceBundle messages = null;


	/**
	 * Constructor
	 * @param odiSAPLogger
	 */
	public ODISAPERPResourceBundle(OdiSAPLogger odiSAPLogger) {
		this.sapLogger = odiSAPLogger;
	}

	/**
	 * This method is responsible to load the resource properties file. On getting
	 * error in loading, it sets the custome message
	 * @param pBundleName
	 * @return
	 */
	public void initializeResource() {
		try {
			baseResourceName = "sap_rkm_erp";
			messages = ResourceBundle.getBundle("oracle/odi/sap/km/"+baseResourceName, Locale.getDefault(), this.getClass().getClassLoader());

		} catch (Exception e) {
			sapLogger.log(sapLogger.ERROR, "initializeResource() -- e: "+e);
			setMessages("!!! BUNDLE " + baseResourceName + " !!!"); //$NON-NLS-1$//$NON-NLS-2$
		}
	}//end of initializeResource()


	/**
	 * This method is responsible to get the string key value
	 * @param pKeyName
	 * @return
	 */
	public String getResourceString(String pKeyName) {
		sapLogger.log(sapLogger.INFO, ">>>>> getResourceString() -  resourceMessage: "+resourceMessage);
		if (resourceMessage.equalsIgnoreCase("!!! BUNDLE " + baseResourceName + " !!!")) {
			return resourceMessage;
		} else {
			try {
				return messages.getString(pKeyName);
			} catch (Exception e) {
				sapLogger.log(sapLogger.INFO, "Exception in getResourceString() -----: "+e);
				return "### KEY " + baseResourceName + " / " + pKeyName + "###"; //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$
			}
		}
	}//end of getResourceString() method

	private void setMessages(String resourceMsg) {
		this.resourceMessage = resourceMsg;
	}
}//end of ODISAPERPResourceBundle class



/**
 * This class will represent each Tree Browser node
 * name- node name
 * desc- node description
 * selected- its corresponding checkbox is selected/deselected
 *
 */
public class OdiSAPERPNode {

	String name = "";
	String desc = "";
	//selected status
	boolean selected;

	public OdiSAPERPNode(String name, String desc, boolean selected){
		this.name = name;
		this.desc = desc;
		this.selected = selected;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public boolean isSelected() {
		return selected;
	}
	public void setSelected(boolean selected) {
		this.selected = selected;
	}
	public String getDesc() {
		return desc;
	}
	public void setDesc(String desc) {
		this.desc = desc;
	}

}//end of class - OdiSAPERPNode

import javax.swing.tree.DefaultMutableTreeNode;

/**
 * This is a customized DefaultMutableTreeNode which handle each Tree node as
 * MyNode object
 *
 */
public class OdiSAPERPDefaultTreeNode extends DefaultMutableTreeNode {

	private OdiSAPERPNode node;

	public OdiSAPERPDefaultTreeNode(OdiSAPERPNode node){
		super(node.getName());
		this.node = node;
	}

	public OdiSAPERPNode getMyNode(){
		return node;
	}

	public String toString(){
		//return node name
		return node.getName();
	}

}//end of class - OdiSAPERPDefaultTreeNode



/////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle                      		       		   //
// ALL RIGHTS RESERVED.                                                    //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright //
// notice in the COPYRIGHT file in this directory.                         //
////////////////////////////////////////////////////////////////////////////

import com.sunopsis.graphical.gif.toolbar.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.TreeMap;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 * CheckRenderer: This inner class is responsible to set the tree node icon
 * @author
 *
 */
class CheckRenderer extends DefaultTreeCellRenderer implements ItemListener {

	protected JCheckBox check;
	protected TreeLabel label;
	protected JPanel jPan = null;
	public OdiSAPLogger sapLogger = null;
	private OdiSAPERPAdapter odiSAPERPAdapter = null;
	private OdiSAPERPMetadataBrowser browser;
	OdiSAPERPNode selNode;

	Icon iconRoot = null;
	Icon iconModule = null;
	Icon iconField = null;
	Icon iconTable = null;
	Icon iconComponent = null;


	private final String checkboxLabel1 = "<html><table cellpadding=0><tr><td><img src=\"";
	private final String checkboxLabel2 = "\"></img>&nbsp;";
	private final String checkboxLabel3 = "</td></tr></table></html>";

	public CheckRenderer(OdiSAPERPMetadataBrowser browser, OdiSAPERPAdapter odiSapERPAdapterObj, OdiSAPLogger odiSAPLogger) {
		jPan = new JPanel();
		jPan.add(check = new JCheckBox());
		jPan.add(label = new TreeLabel());
		this.browser = browser;////ODI version
		this.sapLogger = odiSAPLogger; //ODI version

		URL obj_model = this.getClass().getResource("com/sunopsis/graphical/gif/obj_model.gif");
		iconRoot = new ImageIcon(obj_model);
		URL obj_submodel = this.getClass().getResource("com/sunopsis/graphical/gif/obj_submodel.gif");
		iconModule = new ImageIcon(obj_submodel);
		URL obj_column = this.getClass().getResource("com/sunopsis/graphical/gif/obj_column.gif");
		iconField = new ImageIcon(obj_column);
		URL obj_table = this.getClass().getResource("com/sunopsis/graphical/gif/obj_table.gif");
		iconTable = new ImageIcon(obj_table);
		iconComponent = new ImageIcon(obj_submodel);

	}

    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {

    	try {
    		//sapLogger.log(sapLogger.INFO, "### Cell Rendered Component......");
            OdiSAPERPDefaultTreeNode tnode = (OdiSAPERPDefaultTreeNode) value;
            OdiSAPERPNode node = tnode.getMyNode();
            TreePath path = tree.getPathForRow(row);

            String name = node.getName();

	    int tableField = node.getDesc().toString().indexOf("{");

            if( (name.indexOf("-") == -1) && (tnode.getLevel() != 1) && !(name.equalsIgnoreCase("SAP Metadata")) && (tableField != 0)) {

				String imgSrc = "";
                //find out node type

            	try {

					imgSrc = iconTable.toString();

            	}catch(Exception ex) {
            		ex.printStackTrace();
            	}
    			//set custom label for checkbox
            	String cusLabel = checkboxLabel1 + imgSrc
            					  + checkboxLabel2
            					  + name+"  ("+node.getDesc()+")"
            					  + checkboxLabel3;
            	check.setLabel(cusLabel);
            	check.setFont(tree.getFont());

            	check.setBackground(UIManager.getColor("Tree.textBackground"));
            	if(selected) {
              	  sapLogger.log(sapLogger.INFO, ""+name+" is Clicked ");
              	  /*
              	   * Check the status of the node, if it is already selected, deselect it.
              	   */
              	  if(node != selNode) {
              		  sapLogger.log(sapLogger.INFO, ""+name+" is Clicked ");
					  if(node.isSelected()) {
							//CheckBox DESELECT Trigger
							browser.mUncheckedTableList.add(node.getName());
					  } else {
							//Checkbox SELECT Trigger
							int index = browser.mUncheckedTableList.indexOf(node.getName());
							if( index != -1) {
								//node already exists, so remove it
								browser.mUncheckedTableList.remove(index);
							}
					  }
              		  selNode = node;
              		  check.setSelected(!node.isSelected());
              		  node.setSelected(!node.isSelected());
              	  }
            	} else if(name.equalsIgnoreCase(browser.searchTableName) ) {//if node is selected thru search
            		check.setSelected(!node.isSelected());
            		node.setSelected(!node.isSelected());
		browser.searchTableName = null;
            	}
                check.setSelected(node.isSelected());
                return check;
            } else {

				String stringValue = "";
            	if(name.equalsIgnoreCase("SAP Metadata")){
                	stringValue = name;
                } else if(tableField >= 0) {
                	stringValue = name+"  "+node.getDesc();
                } else {
                	stringValue = name+"  ("+node.getDesc()+")";
                }

				jPan.setEnabled(tree.isEnabled());
				label.setFont(tree.getFont());
				label.setText(stringValue);
				label.setSelected(selected);
				label.setFocus(hasFocus);

				String modName = node.getName();

				if(path == null) {
					label.setIcon(iconTable);
				}else {
                    if (path.getPathCount() == 1) {
                    	label.setIcon( iconRoot);
                    } else   if (path.getPathCount() == 2) {
                    	label.setIcon(iconModule);
                    } else if (modName.indexOf("-") >= 0) {
                    	label.setIcon(iconComponent);
                    } else if(modName.indexOf("-") == -1) {
                    	label.setIcon(iconTable);
                    }
            	}

				if(tableField >= 0) {
	    			label.setIcon(iconField);
	    			label.setSelected(false);
				}
            }
			tree.clearSelection();
        }catch (Exception e) {
        	e.printStackTrace();
        }
		return label;
    }//end of public Component getTreeCellRendererComponent() method

	public void reset(){
    	selNode = null;
    }

	public void doLayout() {
		Dimension d_check = check.getPreferredSize();
		Dimension d_label = label.getPreferredSize();
		int y_check = 0;
		int y_label = 0;
		if (d_check.height < d_label.height) {
			y_check = (d_label.height - d_check.height) / 2;
		} else {
			y_label = (d_check.height - d_label.height) / 2;
		}
		check.setLocation(0, y_check);
		check.setBounds(0, y_check, d_check.width, d_check.height);
		label.setLocation(d_check.width, y_label);
		label.setBounds(d_check.width, y_label, d_label.width, d_label.height);
	}

	public class TreeLabel extends JLabel {
		boolean isSelected;

		boolean hasFocus;

		public void paint(Graphics g) {
			String str;
			if ((str = getText()) != null) {
				if (0 < str.length()) {
					if (isSelected) {
						//g.setColor(UIManager.getColor("Tree.selectionBackground"));
						g.setColor(Color.LIGHT_GRAY);
					} else {
						g.setColor(UIManager.getColor("Tree.textBackground"));
					}
					Dimension d = getPreferredSize();
					int imageOffset = 0;
					Icon currentI = getIcon();
					if (currentI != null) {
						imageOffset = currentI.getIconWidth()
						+ Math.max(0, getIconTextGap() - 1);
					}
					g.fillRect(imageOffset, 0, d.width - 1 - imageOffset,
							d.height);
					if (hasFocus) {
						g.setColor(UIManager
								.getColor("Tree.selectionBorderColor"));
						g.drawRect(imageOffset, 0, d.width - 1 - imageOffset,
								d.height - 1);
					}
				}
			}
			super.paint(g);
		}//end of paint() method

		public void setSelected(boolean isSelected) {
			this.isSelected = isSelected;
		}

		public void setFocus(boolean hasFocus) {
			this.hasFocus = hasFocus;
		}
	}//end of inner class TreeLabel
	public void itemStateChanged(ItemEvent e) {
		// TODO Auto-generated method stub

	}
}//End of class - CheckRenderer

/**
 * @(#)OdiSAPERPMetadataBrowser.java  1.00 11/24/2008
 *
 * Application : ODI SAP ERP Metadata Browser  Modules
 * Module      : SAP ERP Metadata Browser
 * Author(s)   : Oracle
 * About       :
 *
 * Dependencies: JDK 1.4.2 API (with standard extensions),
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

/**
 * <b>OdiSAPERPMetadataBrowser</b> swing class handles creation/management of SAP connections
 * including Connection pooling. It also deals with all the methods for getting
 * SAP Metadata information.
 */

/**
 * This swing class is responsible to create & show the ODI-SAP ERP Metadata Browser in the tree form with search panel on top
 *
 * @version 1.0
 */
public class OdiSAPERPMetadataBrowser {

	// The initial width and height of the frame
	private static int sWIDTH = 550;
	private static int sHEIGHT = 630;

	protected JFrame frame = null;

	public OdiSAPERPDefaultTreeNode jTreeRootNode; //rootNode
	public OdiSAPERPDefaultTreeNode jTreeSelectedNode; //selected node

	private JPanel jPanelTop	= new JPanel();
	private JPanel jPanelSearch = new JPanel();
	private JPanel jPanelTree	= new JPanel();
	private JPanel jBottomPanel = new JPanel();
	private JPanel jPanelGap2	= new JPanel();

	private JLabel jLabelTName 		= null;
	private JLabel jLabelSDesc 		= null;
	private JLabel jLabelAppComp 	= null;
	private JLabel jLabelPkg 		= null;

	private JTextField jTxtFieldTName	= new JTextField("",20);
	private JTextField jTxtFieldSDesc	= new JTextField("",20);
	private JTextField jTxtFieldAppComp = new JTextField("",20);
	private JTextField jTxtFieldPkg		= new JTextField("",20);

	private JButton jButtonSearch 	= null;
	private JButton jButtonCancle 	= null;
	private JButton jButtonReverse 	= null;

	private TreeMap mModuleName = null; //Hashtable of Module Name & Description
	private ArrayList mAppCompList = null; //List of Application Component & Tables

	private String moduleKey = null;
	private String moduleDesc = null;

	public boolean isTableNodeSelected = false;
	//mSelectedTables - map of keys as selected tables name & values as their list of fields name
	private Hashtable mSelectedTables = new Hashtable();
	public ArrayList mUncheckedTableList = new ArrayList();



	public OdiSAPLogger sapLogger = null;
	private OdiSAPERPAdapter odiSAPERPAdapter = null;
	private OdiSAPERPMetadataHelper odiSAPERPMetadataHelper = null;
	ODISAPERPResourceBundle odiSapERPResourceBundle = null;

	//private OdiSAPERPMetadataHelper odiSAPERPMetadataHelper = new OdiSAPERPMetadataHelper();

	private JTree tree =null;
	private String ivTable = null;
	private String ivDesc = null;
	private String ivPackg = null;
	private String ivAPComp = null;

	ImageIcon lookupFrameIcon = null;

	private JButton jButtonTLookup = null;
	private JButton jButtonSDescLookup = null;
	private JButton jButtonACompLookup = null;
	private JButton jButtonPckgLookup = null;

	public boolean isCancle = true;
	String searchTableName = null;

	/**
	 * Default Constructor
	 * Comments
	 */
	public OdiSAPERPMetadataBrowser(OdiSAPERPAdapter odiSapERPAdapterObj, OdiSAPLogger odiSAPLogger, OdiSAPERPMetadataHelper odiSAPERPMetadataHelper) {
	//public OdiSAPERPMetadataBrowser() { ////For eclipse version

		frame = new JFrame();
		frame.setResizable(false);

		this.sapLogger = odiSAPLogger; //For ODI version
		this.odiSAPERPAdapter = odiSapERPAdapterObj; //For ODI version
		this.odiSAPERPMetadataHelper = odiSAPERPMetadataHelper; //For ODI version
		//this.odiSAPERPAdapter = new OdiSAPERPAdapter(); //For eclipse version
		//this.sapLogger = odiSAPERPAdapter.sapLogger;; //For eclipse version
		
		this.mModuleName = odiSAPERPAdapter.getALLSAPModules(); //getting SAP main module
		//code for I18N
		odiSapERPResourceBundle = new ODISAPERPResourceBundle(sapLogger);//resourcebundle object to initialize & load resources
		odiSapERPResourceBundle.initializeResource();//initializing/loading resources

		frame.setTitle(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_Title"));

		jLabelTName 	= new JLabel(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jLabelTName"));
		jLabelSDesc 	= new JLabel(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jLabelSDesc"));
		jLabelAppComp 	= new JLabel(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jLabelAppComp"));
		jLabelPkg 		= new JLabel(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jLabelPkg"));

		jButtonSearch 	= new JButton(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonSearch"));
		jButtonCancle 	= new JButton(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonCancle"));
		jButtonReverse 	= new JButton(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonReverse"));

		//setting icon for frame
		URL designerIconUrl = this.getClass().getResource("com/sunopsis/graphical/gif/toolbar/designer_16.gif");
		sapLogger.log(sapLogger.INFO, "---->URL<-----"+designerIconUrl);

		ImageIcon frameIcon = new ImageIcon(designerIconUrl);
		frame.setIconImage(frameIcon.getImage());

		//setting icon for lookup screen
		URL lookupFrameIconUrl = this.getClass().getResource("com/sunopsis/graphical/gif/toolbar/search_16.gif");
		lookupFrameIcon = new ImageIcon(lookupFrameIconUrl);


		jButtonTLookup = new JButton("...");
		jButtonSDescLookup = new JButton("...");
		jButtonACompLookup = new JButton("...");
		jButtonPckgLookup = new JButton("...");

		jButtonTLookup.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonTLookup"));
		jButtonSDescLookup.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonSDescLookup"));
		jButtonACompLookup.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonACompLookup"));
		jButtonPckgLookup.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonPckgLookup"));

		jTxtFieldTName.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jTxtFieldTName"));
		jTxtFieldPkg.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jTxtFieldPkg"));
		jTxtFieldAppComp.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jTxtFieldAppComp"));
		jTxtFieldSDesc.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jTxtFieldSDesc"));

		jButtonSearch.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonSearchToolTip"));
		jButtonReverse.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonReverseToolTip"));
		jButtonCancle.setToolTipText(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jButtonCancleToolTip"));

		createSearchPanel(); //Add search panel on the top
		createTreePanel(); //Prepare tree panel
		addBottomPanel(); //Add bottom panel

	    frame.setSize(sWIDTH, sHEIGHT);
		frame.setLocationRelativeTo(null);//set location in center
	    frame.setVisible(true);
		frame.addWindowListener(new WindowAdapter() {
	    	public void windowClosing(WindowEvent e) {
	    		isCancle = true;
	    		frame.setVisible(false);
	    	}
	    });
		sapLogger.log(sapLogger.INFO, "------- OdiSAPERPMetadataBrowser  || OdiSAPERPMetadataBrowser() constructor ---------");
	}//End of Default Constructor



	/**
	 * This method is responsible to create the Search Panel and adding this panel on top **
	 *
	 * @param
	 * @return void
	 */
	private void createSearchPanel() {
		sapLogger.log(sapLogger.INFO, "++++++++++ OdiSAPERPMetadataBrowser  || createSearchPanel() +++++++++++++");
		jPanelSearch.setLayout(new GridBagLayout());
	   	jPanelSearch.setBorder(BorderFactory.createTitledBorder(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_jPanelSearch")));

	    GridBagConstraints gBC = new GridBagConstraints();
	    gBC.fill = GridBagConstraints.HORIZONTAL;

	    // ****** First row of search panel ********
		 //Adding Label - Table Name
		 gBC.gridx = 0;
		 gBC.gridy = 0;
		 //jLabelTName.setFont(new java.awt.Font ("Helvetica", 4, 11);
		 jLabelTName.setPreferredSize(new Dimension(5, 20));
		 jPanelSearch.add(jLabelTName, gBC);

		 // Adding a big Gap between 1st & 2nd column (1st row - Label)
		 gBC.gridx = 2;
		 gBC.gridy = 0;
		 jPanelSearch.add(jPanelGap2,gBC);

		 //Adding Label - Short Description
		 gBC.gridx = 4;
		 gBC.gridy = 0;
		// jLabelSDesc.setFont(new java.awt.Font ("Helvetica", 4, 11));
		 jLabelSDesc.setPreferredSize(new Dimension(5, 20));
		 jPanelSearch.add(jLabelSDesc, gBC);

		 //Adding text field - Table Name
		 gBC.gridx = 0;
		 gBC.gridy = 1;
		 gBC.weightx = 1.0;
		 jTxtFieldTName.setPreferredSize(new Dimension(5, 20));
		 jPanelSearch.add(jTxtFieldTName, gBC);

		 //Adding lookup button - Table Name
		 gBC.gridx = 1;
		 gBC.gridy = 1;
		 gBC.weightx = 1.0;
		 jButtonTLookup.setPreferredSize(new Dimension(5, 20));
		 jPanelSearch.add(jButtonTLookup, gBC);

		 //Adding a big Gap between 1st & 2nd column (1st row - text field )
		 gBC.gridx = 3;
		 gBC.gridy = 1;
		 jPanelSearch.add(jPanelGap2,gBC);

		 //Adding text field - Short Description
		 gBC.gridx = 4;
		 gBC.gridy = 1;
		 gBC.weightx = 1.0;
		 jTxtFieldSDesc.setPreferredSize(new Dimension(5, 20));
		 jPanelSearch.add(jTxtFieldSDesc, gBC);


	     //Adding look up button -  Short Description
	     gBC.gridx = 5;
	     gBC.gridy = 1;
	     gBC.weightx = 1.0;
	     jButtonSDescLookup.setPreferredSize(new Dimension(5, 20));
	     jPanelSearch.add(jButtonSDescLookup, gBC);


	     // ****** 2nd row of search panel ********
	     //Adding label - Application component
	     gBC.gridx = 0;
	     gBC.gridy = 3;
	     //jLabelAppComp.setFont(new java.awt.Font ("Helvetica", 4, 11));
	     jLabelAppComp.setPreferredSize(new Dimension(5, 20));
	     jPanelSearch.add(jLabelAppComp, gBC);

	     //Adding a big Gap between 1st & 2nd column (2nd row - Label )
	     gBC.gridx = 2;
	     gBC.gridy = 3;
	     jPanelSearch.add(jPanelGap2,gBC);

	     //Adding Label - Package
	     gBC.gridx = 4;
	     gBC.gridy = 3;
	     //jLabelPkg.setFont(new java.awt.Font ("Helvetica", 4, 11));
	     jLabelPkg.setPreferredSize(new Dimension(5, 20));
	     jPanelSearch.add(jLabelPkg, gBC);

	     //Adding text field - Application Component
	     gBC.gridx = 0;
	     gBC.gridy = 4;
	     gBC.weightx = 1.0;
	    // jTxtFieldAppComp.setPreferredSize(new Dimension(5,5));
	     jPanelSearch.add(jTxtFieldAppComp, gBC);

	     //Adding look up button - Application Component
	     gBC.gridx = 1;
	     gBC.gridy = 4;
	     gBC.weightx = 1.0;
	     jButtonACompLookup.setPreferredSize(new Dimension(5, 20));
	     jPanelSearch.add(jButtonACompLookup, gBC);

	     //Adding a big Gap between 1st & 2nd column (2nd row - text field )
	     gBC.gridx = 2;
	     gBC.gridy = 4;
	     jPanelSearch.add(jPanelGap2,gBC);

	     //Adding text field - Package
	     gBC.gridx = 4;
	     gBC.gridy = 4;
	     gBC.weightx = 1.0;
	     jTxtFieldPkg.setPreferredSize(new Dimension(5, 20));
	     jPanelSearch.add(jTxtFieldPkg, gBC);

	     //Adding lookup button - Package
	     gBC.gridx = 5;
	     gBC.gridy = 4;
	     gBC.weightx = 1.0;
	     jButtonPckgLookup.setPreferredSize(new Dimension(5, 20));
	     jPanelSearch.add(jButtonPckgLookup, gBC);

	     // Adding Gap between last row of text field & search button
	     gBC.gridx = 0;
	     gBC.gridy = 5;
	     jPanelSearch.add(jPanelGap2,gBC);

	     //Adding SEARCH button in the last row
	     gBC.gridx = 2;
	     gBC.gridy = 6;
	     jButtonSearch.setPreferredSize(new Dimension(58, 25));
	     jPanelSearch.add(jButtonSearch, gBC);


	     //Adding Search Panel into Top Panel
	     jPanelTop.add(jPanelSearch);
		 jPanelTop.setBorder(BorderFactory.createLoweredBevelBorder());
		 jPanelTop.setLayout(new BoxLayout(jPanelTop, BoxLayout.LINE_AXIS));//NEW CODE
		 frame.getContentPane().add(jPanelTop, BorderLayout.NORTH);


		//ActionListener for search button
		jButtonSearch.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent e) {
	        	showSearchResult();
	       } // End actionPerformed() method
	    }); // End of inner class button search listner


		//ActionListener for Table Name lookup button
		jButtonTLookup.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent e) {
	        	if(validateLookup(jTxtFieldTName)){
	        		displayLookupResult("TableName");
	        	} else {
	        		JOptionPane.showMessageDialog(null,(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1000")),"Error", JOptionPane.OK_OPTION);
	        	}
	        } // End actionPerformed() method
	    }); // End of inner class button search listner

		//ActionListener for Short Description lookup button
		jButtonSDescLookup.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent e) {
	        	if(validateLookup(jTxtFieldSDesc)){
	        		displayLookupResult("ShortDescription");
	        	} else {
	        		JOptionPane.showMessageDialog(null,(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1000")),"Error", JOptionPane.OK_OPTION);
	        	}
	        } // End actionPerformed() method
	    }); // End of inner class button search listner

		//ActionListener for Application Component lookup button
		jButtonACompLookup.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent e) {
	        	if(validateLookup(jTxtFieldAppComp)){
	        		displayLookupResult("ApplicationComponent");
	        	} else {
	        		JOptionPane.showMessageDialog(null,(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1000")),"Error", JOptionPane.OK_OPTION);
	        	}
	        } // End actionPerformed() method
	    }); // End of inner class button search listner

		//ActionListener for Package lookup button
		jButtonPckgLookup.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent e) {
	        	if(validateLookup(jTxtFieldPkg)){
	        		displayLookupResult("Package");
	        	} else {
	        		JOptionPane.showMessageDialog(null,(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1000")),"Error", JOptionPane.OK_OPTION);
	        	}
	        } // End actionPerformed() method
	    }); // End of inner class button search listner

		sapLogger.log(sapLogger.INFO, "------- OdiSAPERPMetadataBrowser  || createSearchPanel() --------");
	} // End of createSearchPanel() method

	/**
	 * This method is responsible to create tree node of fetched table metadata from SAP System **
	 * @param
	 * @return void
	 */
	private void createTreePanel() {
		sapLogger.log(sapLogger.INFO, "++++++++++ OdiSAPERPMetadataBrowser  || createTreePanel() +++++++++++++");
		// Root node and main modules
		jTreeRootNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode("SAP Metadata", "", false));
		
		/*Now Fetching SAP Module Name java code is the part of Constructor*/
		//mModuleName = odiSAPERPAdapter.getALLSAPModules(); //getting SAP main module

		Iterator iter = mModuleName.keySet().iterator();
		while ( iter.hasNext()) {
			moduleKey = (String) iter.next();
			moduleDesc = (String) mModuleName.get( moduleKey );

			//sapLogger.log(sapLogger.INFO, "moduleKey: "+moduleKey);
			//sapLogger.log(sapLogger.INFO, "moduleDesc: "+moduleDesc);

			OdiSAPERPDefaultTreeNode moduleNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(moduleKey, moduleDesc, false));

			jTreeRootNode.add(moduleNode); //Adding main module into tree

			if(moduleKey.equalsIgnoreCase("UNDEFINED")) {
				OdiSAPERPDefaultTreeNode zCategoryNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode("Z-Category", "Z Category Tables", false));
				OdiSAPERPDefaultTreeNode yCategoryNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode("Y-Category", "Y Category Tables", false));
				moduleNode.add(zCategoryNode);
				moduleNode.add(yCategoryNode);
			}//end of if(moduleKey.equalsIgnoreCase("UNDEFINED"))
		} // end while
		tree = new JTree(jTreeRootNode); //making tree

		final CheckRenderer checkRendererObj =  new CheckRenderer(this, odiSAPERPAdapter, sapLogger);
		tree.setCellRenderer(checkRendererObj); //Anzar Icon Change

		tree.putClientProperty("JTree.lineStyle", "Angled");


		//Call treeSelectionListener
		TreeSelectionListener listener = new MyTreeSelectionListener();
		if (listener != null) {
			tree.addTreeSelectionListener(listener);
		}
		//Add mouse listener to add sub nodes (App. component, tables & fields) in the tree on double click
		MouseListener mouseListener = new MouseAdapter() {
	          public void mousePressed(MouseEvent me) {
	        	  try {
		        	  if(me.getClickCount() == 1) { //Single Mouse click
		        		  sapLogger.log(sapLogger.INFO, "mouse single clicked");
						  checkRendererObj.reset();
		            	 //getting table & Application component
		            	 //sapLogger.log(sapLogger.INFO, "getChild Count: "+jTreeSelectedNode.getChildCount());
                          if(jTreeSelectedNode==null) {
                        	  sapLogger.log(sapLogger.INFO,"No Node is selected");
                        	  return;
                          }

                          if(jTreeSelectedNode.getChildCount() > 0 ) {
                        	  return;
                          } else {
                        	  frame.setCursor( Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                        	  if(checkModuleAndAppModule()) { ////selectd node is either Main Module or Application Component
                        		  sapLogger.log(sapLogger.INFO, "selected node is module name or application component");
                        		  OdiSAPERPNode node = jTreeSelectedNode.getMyNode();
                        		  String  selectedNodeName = node.getName();
                        		  if(selectedNodeName.equalsIgnoreCase("Z-Category")) {
                        			  sapLogger.log(sapLogger.INFO, "UNDEFINED - Z-Category node is selected for Z_ categroy tables");
                        			  mAppCompList = odiSAPERPAdapter.getSAPTables("", "Z-Category");
                        		  }else if(selectedNodeName.equalsIgnoreCase("Y-Category")) {
                        			  sapLogger.log(sapLogger.INFO, "UNDEFINED - Y-Category node is selected for Y_ categroy tables");
                        			  mAppCompList = odiSAPERPAdapter.getSAPTables("", "Y-Category");
                        		  }else {
                        			  mAppCompList = odiSAPERPAdapter.getSAPTables(node.getName().trim()+"*", null);
                        		  }

								  if(mAppCompList.isEmpty()) { //If no record found from SAP System
                    					JOptionPane.showMessageDialog(null,(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1005")),"Error",JOptionPane.OK_OPTION);
                    					return;
                    			  }
                        		  sapLogger.log(sapLogger.INFO, "ArrayList size of subModule: "+mAppCompList.size());
                        		  ArrayList filteredList = groupSubNodes(mAppCompList, jTreeSelectedNode);
                        		  sapLogger.log(sapLogger.INFO, "ArrayList size of filteredList: "+filteredList.size());

                        		  Iterator iterator = filteredList.iterator();
                        		  SAPTable sTable = null;
                        		  String prevItem = "";
                        		  while ( iterator.hasNext()) {
                        			  sTable = (SAPTable) iterator.next();
                        			  if(!(sTable.name.toString().trim()).equalsIgnoreCase(prevItem.trim())) { //Restrict duplicate Application Component to add as node

                        				  //sapLogger.log(sapLogger.INFO, "sTable.name: "+sTable.name.toString()+",  prevItem: "+prevItem);
                        				  prevItem = sTable.name.toString();
                        				  jTreeSelectedNode.add(new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(sTable.name, sTable.desc, false))); //Adding AC & table into node
                        			  } //end of if
                        		  }//end while
                        	  }else { //selectd node is table
                        		  sapLogger.log(sapLogger.INFO, "Selected node is table");

                        		  OdiSAPERPNode node = jTreeSelectedNode.getMyNode();
                        		  ArrayList fieldList = odiSAPERPAdapter.getSAPFields(node.getName().trim());
								  if(fieldList.isEmpty()) { //If no record found from SAP System
                  					JOptionPane.showMessageDialog(null,(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1005")),"Error",JOptionPane.OK_OPTION);
                  					return;
                  				  }
                        		  Iterator itr = fieldList.iterator();
                        		  SAPField sField = null;
                        		  while(itr.hasNext()){
                        			  sField = (SAPField)(itr.next());
                        			  OdiSAPERPDefaultTreeNode fieldNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(sField.name, "{ "+sField.desc+" }",false));
                        			  jTreeSelectedNode.add(fieldNode); //Adding table fields into node

                        		  }//end of while - else loop
                        		  String selectedTable = node.getName().trim();
                        		  //Adding selected tables as key & their values as arraylist into global hashtable variable
                        		  mSelectedTables.put(selectedTable, fieldList);
                        	  }//end of inner else - selectd node is table
                          }//end of outer else
		        	  }//end of  if(me.getClickCount() == 1)
		        	  else if(me.getClickCount() == 2) {
		        		  sapLogger.log(sapLogger.INFO, "mouse double clicked");
		        		  //code will be added in future as per requirement
		        	  }// end of if(me.getClickCount() == 2)
	        	  } catch(Exception excp) {
	        		  //JOptionPane.showInputDialog(OdiSAPERPMetadataBrowser.this, "Error: "+e.toString(), "Warning", JOptionPane.WARNING_MESSAGE);
	        		  excp.printStackTrace();
	        	  } finally {
	        		  frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	        		  frame.repaint();
	        	  }//end of finally
	          }// end of mousePressed() methoed
		}; //end of MouseListener adabpter class
		tree.addMouseListener(mouseListener);
		//Add tree structure into the scrollpane & after that in the container
		JScrollPane srollpane = new JScrollPane(tree);
		jPanelTree.setLayout(new BoxLayout(jPanelTree, BoxLayout.LINE_AXIS));
		jPanelTree.add(srollpane);
        jPanelTree.setBorder(BorderFactory.createTitledBorder(""));
        frame.getContentPane().add(jPanelTree, BorderLayout.CENTER); //Adding tree in the center
		sapLogger.log(sapLogger.INFO, "-------- OdiSAPERPMetadataBrowser  || createTreePanel() ------------");
	}//End of createTreePanel() method

	/**
	 * This method is use to add bottom panel and handle the button listener to cancel or reverse metadata
	 *
	*/
	private void addBottomPanel() {
		sapLogger.log(sapLogger.INFO, "++++++++++ OdiSAPERPMetadataBrowser  || addBottomPanel() ++++++++++++");
		//Add bottom panel with two buttons - cancel & reverse
		jButtonCancle.setPreferredSize(new Dimension(80, 25));
		jButtonReverse.setPreferredSize(new Dimension(80, 25));
		jBottomPanel.add(jButtonCancle);
		jBottomPanel.add(jButtonReverse);
		jBottomPanel.setBorder(BorderFactory.createLoweredBevelBorder());
		frame.getContentPane().add(jBottomPanel, BorderLayout.SOUTH);
		//ActionListener for cancel button
		jButtonCancle.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent e) {
	        	isCancle = true;
	        	frame.setVisible(false);
	        }
		});

		//ActionListener for Reverse Metadata button
		jButtonReverse.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent ae) {

	        	sapLogger.log(sapLogger.INFO, "Reverse Metadata");
	       	isCancle = false;
	        	sapLogger.log(sapLogger.INFO, "mUncheckedTableList.size()>>>>"+mUncheckedTableList.size());
	        	boolean frameVisible = true;

	        	frame.setCursor( Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

	        	try {
	        		 if(mSelectedTables.size() == 0) {
	        			 JOptionPane.showMessageDialog(null,(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1006")),"Error", JOptionPane.OK_OPTION);
	        			 frameVisible = true;
	        		 }else {
						  if(mUncheckedTableList.size() > 0) {
		        			Iterator itr = mUncheckedTableList.iterator();
		        			while(itr.hasNext()) {
	        					String uncheckedTable = (String)itr.next();
	        					mSelectedTables.remove(uncheckedTable);
	        				}
						  }
		        		 frameVisible = false;
		        		 sapLogger.log(sapLogger.INFO, ">>>><<<<<<< After removing de-selected Node -- tablesDetail.size: "+mSelectedTables.size());
		        		 odiSAPERPMetadataHelper.getSAPMetadata( mSelectedTables, false, null); //Reverse process starts here
		        	 }
	        	} catch (Exception e) {
	        		e.printStackTrace();
	        	} finally {
	        		frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	     	    	frame.repaint();
	     	    	if(frameVisible){
	     	    		frame.setVisible(true); //After reversing closing the SAP Metadata UI browser
	     	    	} else {
	     	    		frame.setVisible(false); //After reversing closing the SAP Metadata UI browser
	     	    	}

	        	}//end finally

	        }// end of actionPerformed() method
		});
		sapLogger.log(sapLogger.INFO, "--------- OdiSAPERPMetadataBrowser  || addBottomPanel() ------------");
	} //end of addBottomPanel() method


	/**
	 * This method checks whether selected node is module name or application component, if yes it returns true and if selected node
	 * is table it returns false. On the basis of returned value, we call the OdiSAPERPAdapter's method getSAPTables() in case of module
	 * or application component and getSAPFields() method in case of table.
	 * @return boolean
	 */
	private boolean checkModuleAndAppModule() {
		sapLogger.log(sapLogger.INFO, "+++++++++++ OdiSAPERPMetadataBrowser  || checkModuleAndAppModule()++++++++++++++");

		//String tempSelectedName = jTreeSelectedNode.toString().substring(0, jTreeSelectedNode.toString().indexOf(" ")).trim();
		String tempSelectedName = jTreeSelectedNode.getMyNode().getName().trim();
		String tempModuleKey = "";
		boolean result = false;

		Iterator iter = mModuleName.keySet().iterator();
		while ( iter.hasNext()) {
			tempModuleKey = (String)iter.next();
			if(tempModuleKey.equalsIgnoreCase(tempSelectedName) || (tempSelectedName.indexOf("-") != -1)){
				result = true;
			}else if((tempSelectedName.equalsIgnoreCase("Z-Category"))) {
				result = true;
			}else if((tempSelectedName.equalsIgnoreCase("Y-Category"))) {
				result = true;
			}
		} // end while
		sapLogger.log(sapLogger.INFO, ">>>>>>> checkModuleAndAppModule()   result: "+result);
		sapLogger.log(sapLogger.INFO, "--------- OdiSAPERPMetadataBrowser  || checkModuleAndAppModule()----------");
		return result;
	}// end of checkModuleAndAppModule() method

	/**
	 * This method used to group the tables & application component as their hierarchy
	 *
	 * @param  ArrayList      -  of fetched Application components & tables
	 * @param  OdiSAPERPDefaultTreeNode   -  selected node
	 * @return ArrayList      -  of filtered ACs & tables
	 */
	private ArrayList groupSubNodes(ArrayList subModule, OdiSAPERPDefaultTreeNode treeSelectedNode){

		sapLogger.log(sapLogger.INFO, "+++++++++++ OdiSAPERPMetadataBrowser  || groupSubNodes()++++++++++++++");
		ArrayList filteredArrayList = subModule;

		SAPTable sTable = null;
   	    jTreeSelectedNode = treeSelectedNode;

   	 	//int countSelectedNodeHyphen = count(jTreeSelectedNode.toString().substring(0, jTreeSelectedNode.toString().indexOf(" ")).trim(), "-") ;
   	    OdiSAPERPNode node = jTreeSelectedNode.getMyNode();
   	    int countSelectedNodeHyphen = count(node.getName().trim(), "-");

   	    SAPTable sTable1 = null;
   	    Iterator tempIterator = filteredArrayList.iterator();
		ArrayList tempList = new ArrayList();

	    while (tempIterator.hasNext()) {
			sTable1 = (SAPTable)tempIterator.next();
			if(count(sTable1.name.toString(), "-") != -1) {
				tempList.add(sTable1.name);
			}
	    }

	    Iterator filterItr = filteredArrayList.iterator();
	    while ( filterItr.hasNext()) {
   	 	  sTable = (SAPTable) filterItr.next();

   	 		if(countSelectedNodeHyphen == 0) {
   	 			if(count(sTable.name.toString(), "-") > 1) {
	   	 			if(validateParentSubModule(tempList, sTable.name.toString())){
	 					filterItr.remove();
	 				}
   	 			}
   	 		}else if(countSelectedNodeHyphen == 1) {
   	 			if(count(sTable.name.toString(), "-") > 2) {
   	 				if(validateParentSubModule(tempList, sTable.name.toString())){
 					filterItr.remove();
   	 				}
	 			}
   	 		}else if(countSelectedNodeHyphen == 2) {
   	 			if(count(sTable.name.toString(), "-") > 3) {
   	 				if(validateParentSubModule(tempList, sTable.name.toString())){
   	 					filterItr.remove();
   	 				}

	 			}
   	 		}else if(countSelectedNodeHyphen == 3){
   	 			if(count(sTable.name.toString(), "-") > 4) {
   	 				if(validateParentSubModule(tempList, sTable.name.toString())){
	 					filterItr.remove();
	 				}
	 			}
   	 		}else if(countSelectedNodeHyphen == 4){
   	 			if(count(sTable.name.toString(), "-") > 5) {
   	 				if(validateParentSubModule(tempList, sTable.name.toString())){
	 					filterItr.remove();
	 				}
	 			}
   	 		}else if(countSelectedNodeHyphen == 5) {
   	 			if(count(sTable.name.toString(), "-") > 6) {
   	 				if(validateParentSubModule(tempList, sTable.name.toString())){
   	 					filterItr.remove();
   	 				}
   	 			}
	 		} //end of last else if
   	 	}//end while
   	 	sapLogger.log(sapLogger.INFO, "-------- OdiSAPERPMetadataBrowser  || groupSubNodes()----------");
		return filteredArrayList;
	}// end of - groupSubNodes() method


	/**
	 * This method returns the flag value if particular node doesn't have any parent node
	 * @param ArrayList  - of table name
	 * @param String   - table name / application component name
	 * @return boolean
	 */
	private boolean validateParentSubModule(ArrayList tableNameList, String tableName) {

		boolean flag = false;

		int countAppCompHyphen = tableName.lastIndexOf("-");
		String checkParent = tableName.substring(0,countAppCompHyphen);

		int tempHyphen = checkParent.lastIndexOf("-");
		String temp = checkParent.substring(0,tempHyphen);

		if(!tableNameList.contains(checkParent)){
			if(tableNameList.contains(temp)){
				flag=true;
			}
		} else {
			flag=true;
		}
		return flag;
	} //end of validateParentSubModule() method


	/**
	 * This method returns the no. of specified character (hyphen in our case) within the string
	 *
	 * @param  String    -  any string
	 * @param  String    -  any specified character
	 * @return int       -  no of hyphen
	 */
	public int count(String base, String searchFor) {
	    int len   = searchFor.length();
	    int result = 0;
	    int start = base.indexOf(searchFor);
	    while(start != -1) {
	    	result++;
	        start = base.indexOf(searchFor, start+len);
	    }
	    return result;
	} //end of count() method



	/**
	 * This method is responsible to search a particular table in the tree browser. It sends the request to SAP thru RFC and get back tables
	 * and application compment with table fields and add it in the tree node to show the requested table.
	 * @return  void
	 */
	private void showSearchResult() {

		if(checkSearchFields()){

			ivTable =jTxtFieldTName.getText().toUpperCase();
			ivDesc = jTxtFieldSDesc.getText().toUpperCase();
			ivAPComp = jTxtFieldAppComp.getText().toUpperCase();
			ivPackg = jTxtFieldPkg.getText().toUpperCase();
			searchTableName = ivTable;//Assigning search table

			String undefinedTableName = null;
			String undefinedModName = null;
			String moduleName = null;
			ArrayList subMod = new ArrayList();
			ArrayList searchResult = new ArrayList();
			SAPSubModels sapSub = null;
			SAPSearchDetail searchDetail = null;
			OdiSAPERPDefaultTreeNode jTreeSearchNode = null;

			TreeModel model = tree.getModel();
			Object rootObject = model.getRoot(); //Getting root node of the tree

			// Checking for blank text fields
			frame.setCursor( Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			try {

				searchResult = odiSAPERPAdapter.getSearchResult(ivTable, ivDesc, ivPackg, ivAPComp);//Getting search result in an ArrayList

				// -----------If no record found for the given search----------------------*/
				if(searchResult.isEmpty()) {
					JOptionPane.showMessageDialog(null, odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1002"), "Error", JOptionPane.OK_OPTION);
					return;
				}

				// -----------Search for Undefined Nodes----------------------*/
				Iterator undefinedSearchItr = searchResult.iterator();

				while(undefinedSearchItr.hasNext()) {//populating search results
					searchDetail = new SAPSearchDetail();
					searchDetail = (SAPSearchDetail)(undefinedSearchItr.next());
					undefinedModName = searchDetail.moduleName;
		            undefinedTableName = searchDetail.name;
				}

				if(undefinedModName.equalsIgnoreCase("")){
					undefinedSearch(rootObject, undefinedTableName);
	           	} else {

	           		/**-----------Search for SAP Modules except Undefined Module----------------------*/

	           		Enumeration children = ((TreeNode)rootObject).children();
			   		String SearchMod = null;

	           		if (children != null) { //Populating modules
	           			while (children.hasMoreElements()) {

	           				jTreeSearchNode = (OdiSAPERPDefaultTreeNode) children.nextElement();

	           				Iterator searchIterator = searchResult.iterator();

	           				while(searchIterator.hasNext()) {//populating search results
	           					searchDetail = new SAPSearchDetail();
	           					searchDetail = (SAPSearchDetail)(searchIterator.next());

	           					String lastAppCompName = searchDetail.moduleName;
	           					moduleName = searchDetail.moduleName;
	           					String tableName = searchDetail.name;

	           					if((moduleName.indexOf("-")) == -1) {
	           						SearchMod = moduleName.trim();
	           					} else {
	           						SearchMod = moduleName.toString().substring(0, moduleName.toString().indexOf("-")).trim();
	           					}

	           					String modName = jTreeSearchNode.getMyNode().getName().trim();

	           					TreePath selectTreePath = null;

	           					if(SearchMod.equalsIgnoreCase(modName)) {

	           						subMod = getSubModels(lastAppCompName);//Breaking the Module into appComp and parentComp
	           						Collections.reverse(subMod);

	           						ListIterator itr = subMod.listIterator();

	           						OdiSAPERPDefaultTreeNode subNode = null;
	           						OdiSAPERPDefaultTreeNode prevNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode("", "", false));
									OdiSAPERPDefaultTreeNode currentNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode("", "", false));
	           						int index = lastAppCompName.indexOf("-");
									while(itr.hasNext()) {
	           							sapSub = new SAPSubModels();
	           							sapSub = (SAPSubModels) (itr.next());
	           							String appCompName = sapSub.appCompName;
										subNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(appCompName, "", false));

	           							if(appCompName.equalsIgnoreCase(SearchMod)) {//To remove first module as its already present in the tree

	           								// -----------If SAP Module has been already populated, No Hierarchy(Directly under Main Module)----------------------*/
	           								if(jTreeSearchNode.getChildCount() > 0){
	           									if(moduleName.indexOf("-") != -1){
	           										continue;
	           									} else {
	           										selectTreePath = searchWithPopulatedNodes(jTreeSearchNode,tableName);
													tree.setSelectionPath(selectTreePath);
	           										tree.scrollPathToVisible(selectTreePath);
	           										return;
	           									}
	           								} else {

	           									// -----------If SAP Module has not populated, No Hierarchy(Directly under Main Module) ----------------------*/
	           									ArrayList al1 = odiSAPERPAdapter.getSAPTables(appCompName.trim()+"*", null);
	           									ArrayList filteredList = groupSubNodes(al1, jTreeSearchNode);
	           									Iterator iterator = filteredList.iterator();
	           									SAPTable sTable = null;
	           									String prevItem = "";

	           									while ( iterator.hasNext()) {
	           										sTable = new SAPTable();
	           										sTable = (SAPTable) iterator.next();

	           										if(!(sTable.name.toString().trim()).equalsIgnoreCase(prevItem.trim())) { //Restrict duplicate Application Component to add as node
	           											prevItem = sTable.name.toString();
	           											OdiSAPERPDefaultTreeNode treeNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(sTable.name, sTable.desc, false));
	           											jTreeSearchNode.add(treeNode); //Adding AC & table into node

	           											if(tableName.equalsIgnoreCase(sTable.name)) {
	           												ArrayList fieldList = odiSAPERPAdapter.getSAPFields(treeNode.toString());
	           												Iterator itrTest = fieldList.iterator();
	           												SAPField sField = null;

	           												while(itrTest.hasNext()){
	           													sField = (SAPField)(itrTest.next());
	           													OdiSAPERPDefaultTreeNode fieldNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(sField.name, "{ "+sField.desc+" }",false));
	           													treeNode.add(fieldNode); //Adding table fields into node
	           												}
	           												String selectedTable = treeNode.toString();
	           												//Adding selected tables as key & their values as arraylist into global hashtable variable
	           												mSelectedTables.put(selectedTable, fieldList);
	           												selectTreePath = new TreePath( treeNode.getPath() );
	           											}//end of if(tabNm.equalsIgnoreCase(sTable.name)) --
	           										} //end of if
	           									}//end of while ( iterator.hasNext()) --
	           									tree.setSelectionPath(selectTreePath);
	           									tree.scrollPathToVisible(selectTreePath);
	           								}
	           								// If Searched table is inside Application component-Multiple Hierarchy*/

	           							} else {

	           								sapLogger.log(sapLogger.INFO, "<--------------In multiple hierarchy------------>");
	           								Enumeration child = ((TreeNode)jTreeSearchNode).children();
											currentNode = jTreeSearchNode;

	           								while (child.hasMoreElements()) {
												jTreeSearchNode = (OdiSAPERPDefaultTreeNode) child.nextElement();
												String subNode1 = jTreeSearchNode.getMyNode().getName();
												if(appCompName.equalsIgnoreCase(subNode1)) {

	           										prevNode = jTreeSearchNode;
	           										if(jTreeSearchNode.getChildCount() > 0){
														selectTreePath = searchWithPopulatedNodes(jTreeSearchNode,tableName);
	           											tree.setSelectionPath(selectTreePath);
	           											tree.scrollPathToVisible(selectTreePath);
	           										} else {
														ArrayList alist2 = odiSAPERPAdapter.getSAPTables(appCompName.trim()+"*", null);
														Iterator itr2 = alist2.iterator();
	           											SAPTable sTable = null;
	           											String prevItem = "";
	           											while ( itr2.hasNext()) {
	           												sTable = new SAPTable();
	           												sTable = (SAPTable) itr2.next();
	           												if(!(sTable.name.toString().trim()).equalsIgnoreCase(prevItem.trim())) { //Restrict duplicate Application Component to add as node
	           													prevItem = sTable.name.toString();
	           													OdiSAPERPDefaultTreeNode node1 = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(sTable.name, sTable.desc, false));
	           													jTreeSearchNode.add(node1); //Adding AC & table into node
	           													if(tableName.equalsIgnoreCase(sTable.name)) {
	           														ArrayList fieldList = odiSAPERPAdapter.getSAPFields(node1.toString());
	           														Iterator itrTest = fieldList.iterator();
	           														SAPField sField = null;
	           														while(itrTest.hasNext()) {
	           															sField = new SAPField();
	           															sField = (SAPField)(itrTest.next());
	           															OdiSAPERPDefaultTreeNode fieldNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(sField.name, "{ "+sField.desc+" }",false));
	           															node1.add(fieldNode); //Adding table fields into node
	           														}
	           														String selectedTable = node1.toString();
	           														//Adding selected tables as key & their values as arraylist into global hashtable variable
	           														mSelectedTables.put(selectedTable, fieldList);
	           														selectTreePath = new TreePath( node1.getPath() );
	           													}//end of if(tabNm.equalsIgnoreCase(sTable.name)) --
	           												} //end of if
	           											}//end of while (itr2.hasNext()) {
	           											continue;
	           										}
	           									}//end of  while (child.hasMoreElements()) ----
	           								}
											if(!prevNode.getMyNode().getName().trim().equals("")){
	           									jTreeSearchNode = prevNode;
												sapLogger.log(sapLogger.INFO, "prevNode is------------->"+prevNode);
	           								}else{
	           									jTreeSearchNode = currentNode;
	           									sapLogger.log(sapLogger.INFO, "currentNode is------------->"+currentNode);
	           								}
	           								
	           								sapLogger.log(sapLogger.INFO, "Selected path is ------------->"+selectTreePath);
	           								tree.setSelectionPath(selectTreePath);
	           								tree.scrollPathToVisible(selectTreePath);
	           							}//end of else
	           						}//end of  while(itr.hasNext())

	           					}//End of if module equals
	           					tree.collapsePath(selectTreePath);
	           					//	tree.expandPath(tp);
	           				}//End of search result Iterator
	           			}//End of Module Iterator
	           		}//End of outer If condition
	           	}//End of else part for undefined condition
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
				frame.repaint();
			}
		}//end of if(checkSpecialChar()){
		else{
			JOptionPane.showMessageDialog(frame, odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1003"), "Error", JOptionPane.ERROR_MESSAGE);
		}
	}//end of method - showSearchResult() --

	/**
	 * This method is used to search table from already populated Nodes
	 * @param  OdiSAPERPDefaultTreeNode    -  childNode
	 * @param  String    -  undefinedTableName
	 * @return TreePath
	 */

	public TreePath searchWithPopulatedNodes(OdiSAPERPDefaultTreeNode childNode,String undefinedTableName) {

		OdiSAPERPDefaultTreeNode jTreeNode = null;
		TreePath selectTreeNode = null;

		Enumeration enumeration = ((TreeNode)childNode).children();

		while (enumeration.hasMoreElements()) {
			jTreeNode = (OdiSAPERPDefaultTreeNode) enumeration.nextElement();
			String tableName = jTreeNode.toString();

			if(tableName.equalsIgnoreCase(undefinedTableName)) {
				if(jTreeNode.getChildCount() == 0) {
					ArrayList fieldList = odiSAPERPAdapter.getSAPFields(jTreeNode.toString());

					Iterator fieldIterator = fieldList.iterator();
					SAPField sField = null;
					while(fieldIterator.hasNext()) {
						sField = new SAPField();
						sField = (SAPField)(fieldIterator.next());
						OdiSAPERPDefaultTreeNode fieldNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(sField.name, "{ "+sField.desc+" }",false));
						jTreeNode.add(fieldNode); //Adding table fields into node
					}
					String selectedTable = jTreeNode.toString();
					//Adding selected tables as key & their values as arraylist into global hashtable variable
					mSelectedTables.put(selectedTable, fieldList);
					selectTreeNode = new TreePath( jTreeNode.getPath() );
				}//end of if(jTreeNode.getChildCount() == 0)
			}//if(tableName.equalsIgnoreCase(undefinedTableName)){
		}//while (enumeration.hasMoreElements()) {
		return selectTreeNode;
	}// end of method SearchWithPopulatedNodes()

	/**
	 * This method is used to search table by populating Nodes
	 * @param  OdiSAPERPDefaultTreeNode    -  childNode
	 * @param  ArrayList    -  mAppCompList
	 * @param  String  - undefinedTableName
	 * @param  OdiSAPERPDefaultTreeNode  -  jTreeUndefinedNode
	 * @return TreePath
	 */

	public TreePath searchWithoutPopulatedNodes(OdiSAPERPDefaultTreeNode childNode, String undefinedTableName, OdiSAPERPDefaultTreeNode jTreeUndefinedNode){

		TreePath selectTreeNode = null;
		SAPTable sTable = null;
		String prevItem = "";

		ArrayList filteredList = groupSubNodes(mAppCompList, jTreeUndefinedNode);
		Iterator iterator = filteredList.iterator();

		while ( iterator.hasNext()) {
			sTable = (SAPTable) iterator.next();

			if(!(sTable.name.toString().trim()).equalsIgnoreCase(prevItem.trim())) { //Restrict duplicate Application Component to add as node

				prevItem = sTable.name.toString();
				OdiSAPERPDefaultTreeNode treeNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(sTable.name, sTable.desc, false));
				childNode.add(treeNode); //Adding AC & table into node

				if(undefinedTableName.equalsIgnoreCase(sTable.name)) {
					ArrayList fieldList = odiSAPERPAdapter.getSAPFields(treeNode.toString());

					Iterator itr = fieldList.iterator();
	        		SAPField sField = null;

	        		while(itr.hasNext()){
	    			  sField = (SAPField)(itr.next());
	    			  OdiSAPERPDefaultTreeNode fieldNode = new OdiSAPERPDefaultTreeNode(new OdiSAPERPNode(sField.name, "{ "+sField.desc+" }",false));
	    			  treeNode.add(fieldNode); //Adding table fields into node
	        		}
	        		String selectedTable = treeNode.toString();
	        		//Adding selected tables as key & their values as arraylist into global hashtable variable
	        		mSelectedTables.put(selectedTable, fieldList);
	        		selectTreeNode = new TreePath( treeNode.getPath() );

				} //end of if(undefinedTableName.equalsIgnoreCase(sTable.name)) {
			}//end of if(!(sTable.name.toString().trim()).equalsIgnoreCase(prevItem.trim())) {
		}//while ( iterator.hasNext()) {
		return selectTreeNode;
	}//end of method SearchWithOutPopulatedNodes()


	/**
	 * This method is used to search tables in Undefined module
	 * @param  String    -  any string
	 * @param  String    -  any specified character
	 */

	public void undefinedSearch(Object rootObject,String undefinedTableName){

		try {
			TreePath selectTreeNode = null;
			OdiSAPERPDefaultTreeNode childNode = null;

			Enumeration children = ((TreeNode)rootObject).children();
			OdiSAPERPDefaultTreeNode jTreeUndefinedNode = null;

			//To get reference of Undefined Node
			if (children != null) {
				while (children.hasMoreElements()) {
					jTreeUndefinedNode = (OdiSAPERPDefaultTreeNode) children.nextElement();
		    		String modName = jTreeUndefinedNode.toString();
		    		if(modName.equalsIgnoreCase("Undefined")){
		    			break;
		    		}
				}
			}
			// **If searched table is in Z Category*/
			if(ivTable.indexOf("Z") == 0) {
				childNode = (OdiSAPERPDefaultTreeNode)jTreeUndefinedNode.getChildAt(0);
				//If Z Category has already populated with child nodes
				if(childNode.getChildCount() > 0){
					selectTreeNode = searchWithPopulatedNodes(childNode,undefinedTableName);
				} else {
					mAppCompList = odiSAPERPAdapter.getSAPTables("", "Z-Category");
					selectTreeNode = searchWithoutPopulatedNodes(childNode, undefinedTableName, jTreeUndefinedNode);
				}

			// **If searched table is in Y Category*/

			} else {
				childNode = (OdiSAPERPDefaultTreeNode)jTreeUndefinedNode.getChildAt(1);

				//If Y Category has already populated with child nodes
				if(childNode.getChildCount() > 0){
					selectTreeNode = searchWithPopulatedNodes(childNode,undefinedTableName);
				} else {
					mAppCompList = odiSAPERPAdapter.getSAPTables("", "Y-Category");
					selectTreeNode = searchWithoutPopulatedNodes(childNode, undefinedTableName, jTreeUndefinedNode);
				}
			 }
			tree.setSelectionPath(selectTreeNode);
			tree.scrollPathToVisible(selectTreeNode);
		} catch(StackOverflowError ex) {
			throw ex;
		}
	}//end of UndefinedSearch() method


	/**
	 * This method is used to check for the wild card or blank field in the search textfield and
	 *
	 * @return boolean
	 */
	private boolean checkSearchFields() {
		sapLogger.log(sapLogger.INFO, "checkSearchFields():");
		boolean flag = true;

		if(jTxtFieldTName.getText().toString().trim().equalsIgnoreCase("") && jTxtFieldSDesc.getText().toString().trim().equalsIgnoreCase("") && jTxtFieldAppComp.getText().toString().trim().equalsIgnoreCase("") && jTxtFieldPkg.getText().toString().trim().equalsIgnoreCase("")){
			flag = false;
		}

		if(!checkSpecialChar(jTxtFieldTName.getText())){
			flag = false;
		}
		if(!checkSpecialChar(jTxtFieldSDesc.getText())){
			flag = false;
		}
		if(!checkSpecialChar(jTxtFieldAppComp.getText())){
			flag = false;
		}
		if(!checkSpecialChar(jTxtFieldPkg.getText())){
			flag = false;
		}
		return flag;
	} //end of checkSearchFields() method


	/**
	 * This method is used to check for the wild card or blank field in the search textfield and
	 * if there any,remove it from the given string
	 * @return boolean
	 */
	private boolean checkSpecialChar(String searchText) {
		sapLogger.log(sapLogger.INFO, "checkSpecialChar():");
		boolean flag = true;

		if(!searchText.trim().equals("")) {//if passed search field is not blank

			 int percentage = searchText.trim().indexOf("%");
			 int asterisk = searchText.trim().indexOf("*");

			 if(percentage != -1){
				 flag = false;
			 }
			 if(asterisk != -1){
				 flag = false;
			 }
		}
		return flag;
	}

	/**
	 * This method is used to display Look up result in a new popup window
	 * @return void
	 */
	private void displayLookupResult(String criteria) {
		sapLogger.log(sapLogger.INFO, "Displaying search Popup");

		SAPSearchDetail searchDetails = null;
		String tableName = null;
		String shortDesc = null;
		String appComp = null;
		String pckg = null;

		final JFrame jFrameLookup = new JFrame(odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_LookupTitle"));
		jFrameLookup.setIconImage(lookupFrameIcon.getImage());

		ArrayList lookupResultList = new ArrayList();
		frame.setCursor( Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		try {
			if(criteria.equalsIgnoreCase("TableName")){

				tableName = jTxtFieldTName.getText().toUpperCase();
				if(tableName.indexOf("%") != -1) {
					tableName = tableName.replace('%', '*');
					lookupResultList = (odiSAPERPAdapter.getSearchResult(tableName, null, null, null));//Getting search result in an ArrayList
				}
				else if(tableName.lastIndexOf("_") != -1) {
					int indexVal= tableName.lastIndexOf("_")+ 1;
					//sapLogger.log(sapLogger.INFO, "Displaying search Popup index val is "+indexVal);
					tableName = tableName.replace('_', '*');
					lookupResultList = (odiSAPERPAdapter.getSearchResult(tableName, null, null, null));//Getting search result in an ArrayList


					sapLogger.log(sapLogger.INFO, "lookupResultList size after--->"+lookupResultList.size());
					ArrayList removelookuptable = new ArrayList();
					Iterator itrlookup = lookupResultList.iterator();
					while(itrlookup.hasNext())
					{
						SAPSearchDetail objVal = (SAPSearchDetail) itrlookup.next();
						String name = objVal.name;
						sapLogger.log(sapLogger.INFO, "Name--->"+ name);
						sapLogger.log(sapLogger.INFO, "Name length--->"+ name.length());
						sapLogger.log(sapLogger.INFO, "indexVal--->"+ indexVal);
						if(name.length()!=indexVal)
						{
							sapLogger.log(sapLogger.INFO, "Removing ="+ name+" <---name whose length is ---->"+name.length());
							//lookupResultList.remove(objVal);
							removelookuptable.add(objVal);

						}
					}
					sapLogger.log(sapLogger.INFO, "removelookuptable size after removing--->"+removelookuptable.size());
					lookupResultList.removeAll(removelookuptable);
					sapLogger.log(sapLogger.INFO, "lookupResultList size after removing--->"+lookupResultList.size());
				}

				//lookupResultList = (odiSAPERPAdapter.getSearchResult(tableName, null, null, null));//Getting search result in an ArrayList

			} else if(criteria.equalsIgnoreCase("ShortDescription")){

				 shortDesc = jTxtFieldSDesc.getText().trim();
				 shortDesc = shortDesc.replace('%', '*');
				 lookupResultList = (odiSAPERPAdapter.getSearchResult(null,shortDesc, null, null));//Getting search result in an ArrayList

			} else if(criteria.equalsIgnoreCase("Package")){

				 pckg = jTxtFieldPkg.getText().trim().toUpperCase();
				 pckg = pckg.replace('%', '*');
				 lookupResultList = (odiSAPERPAdapter.getSearchResult(null, null, pckg, null));//Getting search result in an ArrayList

			} else if(criteria.equalsIgnoreCase("ApplicationComponent")){

				 appComp = jTxtFieldAppComp.getText().trim().toUpperCase();
				 appComp = appComp.replace('%', '*');
				 lookupResultList = (odiSAPERPAdapter.getSearchResult(null, null, null, appComp));//Getting search result in an ArrayList
			}

			if(lookupResultList.isEmpty()){ //If no record found for the given search
				 JOptionPane.showMessageDialog(null, odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1002"), "Error", JOptionPane.OK_OPTION);
				 return;
			 }

			sapLogger.log(sapLogger.INFO, "Search Result size is >>>>>>>>>>>"+lookupResultList.size());

			//frame.setVisible(false);

			Vector rowData = new Vector();
			Vector rowDataTemp = null;

			Iterator lookupItr = lookupResultList.iterator();

			while(lookupItr.hasNext()) {
				searchDetails = (SAPSearchDetail)lookupItr.next();
				rowDataTemp = new Vector();

				rowDataTemp.addElement(searchDetails.name);
				rowDataTemp.addElement(searchDetails.moduleName);
				rowDataTemp.addElement(searchDetails.desc);

				rowData.addElement(rowDataTemp);
			}//end of while
			Vector columnHeader = new Vector();

			columnHeader.addElement("Table Name");
			columnHeader.addElement("Module Name");
			columnHeader.addElement("Short Description");

			final JTable jTableLookup = new JTable(new DefaultTableModel(rowData, columnHeader));

			ListSelectionModel cellSelectionModel = jTableLookup.getSelectionModel();
		    cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		    cellSelectionModel.addListSelectionListener(new ListSelectionListener() {

		    	public void valueChanged(ListSelectionEvent e) {

		    		int lookupSelection = JOptionPane.showConfirmDialog(jFrameLookup, odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_1004"), odiSapERPResourceBundle.getResourceString("SAP_RKM_ERP_Confirmation"), JOptionPane.YES_NO_OPTION);
		    		//jFrameLookup.setVisible(true);

		    		if(lookupSelection == 0){

		    			String selectedData = null;
		    			int selectedRow = jTableLookup.getSelectedRow();
		    			int selectedColumn = jTableLookup.getSelectedColumn();

		    			selectedData = (String) jTableLookup.getValueAt(selectedRow, 0);
		    			resetSearchField();
		    			jTxtFieldTName.setText(selectedData);
		    			jFrameLookup.setVisible(false);
		    			frame.setVisible(true);
						//frame.setEnabled(true);
		    		} else {
		    			jFrameLookup.setVisible(true);
		    		}
		    	}
		    });

		    jTableLookup.setOpaque(true); //content panes must be opaque

		    JScrollPane scrollPane = new JScrollPane(jTableLookup);
		    jFrameLookup.getContentPane().add(scrollPane);

		    Toolkit tk = Toolkit.getDefaultToolkit();
		    Dimension screenSize = tk.getScreenSize();
		    int screenHeight = screenSize.height;
		    int screenWidth = screenSize.width;
		    jFrameLookup.setSize(500, 400);
		    //jFrameLookup.setLocation(null);
		    jFrameLookup.setLocationRelativeTo(null);
		    jFrameLookup.setVisible(true);
		    jFrameLookup.setResizable(false);
		    /*frame.setEnabled(false);
		    jFrameLookup.addWindowListener(new WindowAdapter() {
		    	public void windowClosing(WindowEvent ev) {
		    		frame.setEnabled(true);
		    	}
		    });*/

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
			frame.repaint();
		}

	}//end of method - displayLookupResult()


	/**
	 * This method is used to reset the values of search textfields
	 * @return void
	 */
	private void resetSearchField() {
		sapLogger.log(sapLogger.INFO, "Resetting the Search text fields");

		jTxtFieldTName.setText("");
		jTxtFieldAppComp.setText("");
		jTxtFieldPkg.setText("");
		jTxtFieldSDesc.setText("");
	}


	/**
	 * This method is used to check wild card and blank field on click of lookup button.
	 * @return void
	 */
	private boolean validateLookup(JTextField searchValue) {
		sapLogger.log(sapLogger.INFO, "");

		boolean flag=false;

		if(!searchValue.getText().trim().equalsIgnoreCase("")) {
			if(!(searchValue.getText().trim().equalsIgnoreCase("%")) && (!(searchValue.getText().trim().equalsIgnoreCase("")))) { //Table Name
				if(searchValue.getText().indexOf("%") != -1) {
					flag=true;
				}
				else if(searchValue.getText().indexOf("_") != -1) {
					flag=true;
				}
			}else {
				return false;
			}
			return flag;
		} else {
    		return false;
    	}
	} //end of method - validateLookup()


	/**
	 * This method returns the current selected tree node name
	 *
	 * @param    TreePath
	 * @return   OdiSAPERPDefaultTreeNode   -  as name of current selected node
	 */
	private OdiSAPERPDefaultTreeNode getTreeNode(TreePath path) {
		return (OdiSAPERPDefaultTreeNode)(path.getLastPathComponent());
	}

	/**
	    * This method breakup the module into child and parent application
	    * component
	    */

	   public ArrayList getSubModels(String str) {

	        SAPSubModels sapSubModelsObj = null;
	        ArrayList subModelsList = new ArrayList();
	        String parentSubModel = null;
	        String appComp  = null;

	        String appComponentName = str;
	        if(appComponentName != null) {
	        int countHyphen = count(appComponentName, "-");
	        //String parentSubModel = null;
	        appComp  = appComponentName;
	        for(int i=0; i<=countHyphen; i++) {
	            sapSubModelsObj = new SAPSubModels();
	            int posOfLastHyphen = appComp.lastIndexOf("-");
	            if(posOfLastHyphen != -1){
					parentSubModel = appComp.substring(0,posOfLastHyphen);
	            }else{
					parentSubModel = null;
	            }
	            sapSubModelsObj.appCompName = appComp;
	            sapSubModelsObj.paranetAPPCompName = parentSubModel;

	            subModelsList.add(sapSubModelsObj); //adding sapSubModels object into arrayList
	            appComp = parentSubModel;

	          }//end of for loop
	       }//end of if(appComponentName != null)
	        return subModelsList;
		}
	/** static void main() method */
	/*public static void main(String args[]) {

		OdiSAPERPMetadataBrowser frame = new OdiSAPERPMetadataBrowser();

	} *///End of static void main() method


	class MyTreeSelectionListener implements TreeSelectionListener {
		public void valueChanged(TreeSelectionEvent event) {
			TreePath path = event.getPath();
			jTreeSelectedNode = getTreeNode(event.getPath()); //taking the name of selected node
			isTableNodeSelected = event.isAddedPath();
			/*if(!isTableNodeSelected){
				//mUncheckedTableList.add(jTreeSelectedNode.toString());
			}*/
			sapLogger.log(sapLogger.INFO, "Node " + jTreeSelectedNode.toString() + " is " + (event.isAddedPath() ? "selected" : "deselected"));

		} // End of valueChanged()
	} //End of inner class - MyTreeSelectionListener

} // end of main class -- OdiSAPERPMetadataBrowser





/////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle India Ltd		       		   //
// ALL RIGHTS RESERVED.                                                    //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright //
// notice in the COPYRIGHT file in this directory.                         //
////////////////////////////////////////////////////////////////////////////

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;

/**
 * @(#)OdiSAPERPMetadataHelper.java  1.00 11/24/2008
 *
 * Application : ODI SAP Knowledge Modules
 * Module      : SAP ERP Adapter
 * Author(s)   : Oracle.
 * About       :
 * Dependencies: JDK 1.4.2 API (with standard extensions),
 *
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

/**
 * <b>OdiSAPERPMetadataHelper</b> class is a data structure for storing the
 * user selection of SAP Metadata information from the Tree browser.
 */
public class OdiSAPERPMetadataHelper {

	//Contains list of SAPSubModels objects
	public Hashtable sSAPSubModels = null;

	//Contains list of SAPTable objects
	public ArrayList sSAPTables = null;

	//contains key as SAP Table Name --> Value array list with SAPField Objects
	public Hashtable sSAPFields = null;

	//contains key as SAP Table Name --> Value as array list with SAPPKField Objects
	public Hashtable sSAPPKFields = null;

	//contains key as SAP Table Name --> Value array list with SAPFKField Objects
	public Hashtable sSAPFKFields = null;

	//contains key as SAP Table Name --> Value array list with SAPIndField Objects
	public Hashtable sSAPIndexes = null;
	//Adapter class object
	private OdiSAPERPAdapter odiSAPERPAdapter = null; //ODI version

	//private OdiSAPERPAdapter odiSAPERPAdapter = new OdiSAPERPAdapter(); //eclipse version
	//Logger object
	public OdiSAPLogger sapLogger = null;

	//Constructor
	public OdiSAPERPMetadataHelper(OdiSAPERPAdapter odiSapERPAdapterObj, OdiSAPLogger odiSAPLogger){ //ODI version
	//public OdiSAPERPMetadataHelper(){ //eclipse version
		//this.sapLogger = odiSAPERPAdapter.sapLogger; // eclipse version
		this.sapLogger = odiSAPLogger; //ODI version
		this.odiSAPERPAdapter = odiSapERPAdapterObj;
	}


	public void getSAPMetadata(Hashtable selectedTableDetails, boolean searchWithoutUi, ArrayList tableInfoList) {
		sapLogger.log(sapLogger.INFO, "+++++++++ OdiSAPERPMetadataHelper || getSAPMetadata() +++++++++++");

		sapLogger.log(sapLogger.INFO, "Helper getSAPMetadata() - Number of selected Table: "+selectedTableDetails.size());
		this.sSAPFields = selectedTableDetails;
		String tableName = null;
		ArrayList tableFieldList = null;
		sSAPTables = new ArrayList(); //List of SAP Sub Models

		Enumeration selectedTableKeys = sSAPFields.keys();
		SAPSearchDetail sapSearchDetailObj = null;

		if(searchWithoutUi) { //if search without ui is TRUE
			sapLogger.log(sapLogger.INFO, "search without ui is TRUE");

			tableName = selectedTableKeys.nextElement().toString();

			Iterator tableInfoItr = tableInfoList.iterator();
			while(tableInfoItr.hasNext()) {

				sapSearchDetailObj = new SAPSearchDetail();
				String tableMetadata = tableInfoItr.next().toString();
				String[] tableMetadataArray = tableMetadata.split("\\$");

				//sapLogger.log(sapLogger.INFO, "$$$$$$ tableMetadataArray.length: "+tableMetadataArray.length);
				//sapLogger.log(sapLogger.INFO, "$$$$$$ tableName: "+tableMetadataArray[0]);
				//sapLogger.log(sapLogger.INFO, "$$$$$$ tableDesc: "+tableMetadataArray[1]);
				//sapLogger.log(sapLogger.INFO, "$$$$$$ tableType: "+tableMetadataArray[2]);
				//sapLogger.log(sapLogger.INFO, "$$$$$$ AppComp: "+tableMetadataArray[3]);
				sapSearchDetailObj.name = tableMetadataArray[0];
				sapSearchDetailObj.desc = tableMetadataArray[1];
				sapSearchDetailObj.tableClass = tableMetadataArray[2];
				sapSearchDetailObj.moduleName = tableMetadataArray[3];
				if(sapSearchDetailObj.moduleName == null || sapSearchDetailObj.moduleName.equalsIgnoreCase("")) {
					sapSearchDetailObj.moduleName = "UNDEFINED";
				}

				//tableName = sapSearchDetailObj.name;
				sapLogger.log(sapLogger.INFO, ">>>>>> selected TableName (search without ui): "+sapSearchDetailObj.name);
				sSAPTables.add(sapSearchDetailObj); //adding table details into public variable sSAPTables as ArrayList
			}//end of while(tableInfoItr.hasNext())

		}else { //if search without ui is FALSE

			while ( selectedTableKeys.hasMoreElements()) {

				tableName = (String)selectedTableKeys.nextElement(); //getting table name
				sapLogger.log(sapLogger.INFO, ">>>>>> selected TableName (search with ui): "+tableName);

				//getting table information and storing into SAPSearchDetail class object and then putting that object into ArrayList
				ArrayList tableMetadata = odiSAPERPAdapter.getSearchResult(tableName, null, null, null);//Getting Application component name
				Iterator searchIterator = tableMetadata.iterator();

				while(searchIterator.hasNext()) {
	            	sapSearchDetailObj = new SAPSearchDetail();
	            	sapSearchDetailObj = (SAPSearchDetail)(searchIterator.next());

					if(sapSearchDetailObj.moduleName == null || sapSearchDetailObj.moduleName.equalsIgnoreCase("")) {
	            		sapSearchDetailObj.moduleName = "UNDEFINED";
	            	}
	            	sSAPTables.add(sapSearchDetailObj); //adding table details into public variable sSAPTables as ArrayList

	            }//end of while(searchIterator.hasNext())
			}//end of while ( selectedTableKeys.hasMoreElements())

		}//end of -- else { //if search without ui is FALSE

		//getting ArrayList of SAP sub models
        this.sSAPSubModels = getAllSubModels(sSAPTables); //getting ArrayList of SAP sub models
        sapLogger.log(sapLogger.INFO, ">>>>getSAPMetadata() -- sSAPSubModels.size() >>:"+sSAPSubModels.size());


		// getting list of primary key
        this.sSAPPKFields = getPrimaryKeys(sSAPTables); // getting list of primary key
         sapLogger.log(sapLogger.INFO, "sSAPPKFields PrimaryKeyFields.size():"+sSAPPKFields.size());

		//getting foreign keys
        this.sSAPFKFields = getForeignKeys(sSAPTables); //getting foreign keys
        sapLogger.log(sapLogger.INFO, "sSAPForeign Key Fields.size():"+sSAPFKFields.size());

		//getting list of tables INDEXES
        this.sSAPIndexes = getIndexes(sSAPTables); //getting list of tables INDEXES
		sapLogger.log(sapLogger.INFO, "sSAP Indexes size():"+sSAPIndexes.size());

		//getting all fields of a table
		tableFieldList = (ArrayList)sSAPFields.get( tableName ); //getting list of fields

		SAPField sField = null;

	 	Iterator itr = tableFieldList.iterator();

	 	while(itr.hasNext()){

	 		sField = (SAPField)(itr.next());
			sField = new SAPField();
	 		String fieldName = sField.name;
	 		String fieldDesc = sField.desc;
			//sapLogger.log(sapLogger.INFO, "<-Data types are ----->"+sField.dataType);
	 		String fieldDataType = sField.dataType;
	 		String fieldOffset = sField.offset;
	 		String fieldLength = sField.length;
	 	}// end of inner while
	}// end of getSAPMetadata() method

	/**
	 * This method getAllSubModels() is responsible to get the tables Application component
	 * and break into sub models and then put into the SAPSubModels class objec **
	 * @param     ArrayList   of table details object
	 * @return    Hasbtable   of all sub models
	 */
	private Hashtable getAllSubModels(ArrayList selectedTablesMetadata) {
		sapLogger.log(sapLogger.INFO, "++++++OdiSAPERPMetadataHelper || getAllSubModels() +++++++++ ");

		SAPSearchDetail sapSearchDetailObj = null;
		SAPSubModels sapSubModelsObj = null;
		Hashtable subModelDetails = new Hashtable();
		String parentSubModel = null;
		String appComp  = null;


		if(selectedTablesMetadata.size() > 0) {
			Iterator itr = selectedTablesMetadata.iterator();
			String appComponentName = null;
			//sapSubModelsObj = new SAPSubModels();
			Hashtable hs = new Hashtable();
			while(itr.hasNext()) {

				sapSearchDetailObj = new SAPSearchDetail();
				sapSearchDetailObj = (SAPSearchDetail)(itr.next());
				ArrayList subModelsList = new ArrayList(); //to store sub model list
				//Hashtable hs = new Hashtable();

				String tableName =	sapSearchDetailObj.name;
				//sapLogger.log(sapLogger.INFO, "Helper - getAllSubModels() tableName: "+tableName);
				appComponentName = sapSearchDetailObj.moduleName; //getting Application component name
				//sapLogger.log(sapLogger.INFO, "Helper - getAllSubModels() appComponentName: "+appComponentName);

				if(appComponentName != null) {
	            	int countHyphen = count(appComponentName, "-");
	            	//String parentSubModel = null;
	            	appComp  = appComponentName;

	        		for(int i=0; i<=countHyphen; i++) {
	        			sapSubModelsObj = new SAPSubModels();
	        			int posOfLastHyphen = appComp.lastIndexOf("-");
	        			if(posOfLastHyphen != -1){
	        				parentSubModel = appComp.substring(0,posOfLastHyphen);
	        			}else{
	        				parentSubModel = null;
	        			}
	        			sapSubModelsObj.appCompName = appComp;
	        			sapSubModelsObj.paranetAPPCompName = parentSubModel;
	        			if(!(hs.containsKey(appComp))) {
	        				hs.put(appComp,"");
	        				subModelsList.add(sapSubModelsObj); //adding sapSubModels object into arrayList
	        			}
	        			appComp = parentSubModel;
	        		}//end of for loop
	            }//end of if(appComponentName != null)
				if(subModelsList.size() > 0) {
					subModelDetails.put(tableName, subModelsList);
				}
			}//end of while(itr.hasNext())

		}//end of if(selectedTablesMetadata.size() > 0)

		//sapLogger.log(sapLogger.INFO, "-------- getAllSubModels() -- subModelDetails.size(): "+subModelDetails.size());
		sapLogger.log(sapLogger.INFO, "-------- OdiSAPERPMetadataHelper || getAllSubModels() -------------");
		return subModelDetails;
	}//end of getAllSubModels() method

	/**
	 * This method getPrimaryKeys() is responsible to get the all primary keys of
	 * specified table putting into the SAPTablePrimaryKey class objec **
	 * @param     ArrayList   of table details object
	 * @return    Hashtable   of all table names as key and all values as arrayList of primary keys
	 */

	private Hashtable getPrimaryKeys(ArrayList tableList){
		sapLogger.log(sapLogger.INFO, "++++++ OdiSAPERPMetadataHelper || getPrimaryKeys() +++++++++ ");

		Hashtable primaryKeysList = new Hashtable();

		//sapLogger.log(sapLogger.INFO, "tableList.size(): "+tableList.size());
		if(tableList.size() > 0 && tableList != null){
			SAPSearchDetail sapSearchDtlObj = null;
			Iterator itr = tableList.iterator();
			while(itr.hasNext()) {
				sapSearchDtlObj = new SAPSearchDetail();

				sapSearchDtlObj = (SAPSearchDetail) itr.next();
				String tableName =	sapSearchDtlObj.name;

				ArrayList primaryKeyList = (ArrayList) odiSAPERPAdapter.getPrimaryKeys(tableName);
				ArrayList pkList = new ArrayList();
				if(primaryKeyList.size() > 0 && primaryKeyList != null){

					Iterator pkItr = primaryKeyList.iterator();

					SAPTablePrimaryKey sapTablePrimaryKeyObj = null;
					while(pkItr.hasNext()){
						sapTablePrimaryKeyObj = new SAPTablePrimaryKey();

						sapTablePrimaryKeyObj = (SAPTablePrimaryKey) pkItr.next();

						pkList.add(sapTablePrimaryKeyObj);

					} //end of while(pkItr.hasNext())
				}// end of if(primaryKeyList.size() .....
				//sapLogger.log(sapLogger.INFO, "******* primary Key List size: "+pkList.size());
				if(pkList.size() > 0) {
					primaryKeysList.put(tableName, pkList);
				}
			}
		}
		return primaryKeysList;
	}// end of getPrimaryKeys() method

	/**
	 * This method getForeignKeys() is responsible to get the all foreign keys of
	 * specified table putting into the SAPTableForeignKey class object **
	 * @param     ArrayList   of table details object
	 * @return    Hashtable   of all table names as key and all values as arrayList of foreign keys
	 */

	private Hashtable getForeignKeys(ArrayList tableList){
		sapLogger.log(sapLogger.INFO, "++++++ OdiSAPERPMetadataHelper || getForeignKeys() +++++++++ ");

		Hashtable foreignKeysList = new Hashtable();

		if(tableList.size() > 0 && tableList != null){
			SAPSearchDetail sapSearchDtlObj = null;
			Iterator itr = tableList.iterator();
			while(itr.hasNext()) {
				sapSearchDtlObj = new SAPSearchDetail();

				sapSearchDtlObj = (SAPSearchDetail) itr.next();
				String tableName =	sapSearchDtlObj.name;

				//sapLogger.log(sapLogger.INFO, "Helper getForeignKeys() - ><><><><: tableName: "+tableName);
				ArrayList foreignKeyList = (ArrayList) odiSAPERPAdapter.getForeignKeys(tableName);
				ArrayList fkList = new ArrayList();
				if(foreignKeyList.size() > 0 && foreignKeyList != null){

					Iterator fkItr = foreignKeyList.iterator();

					SAPTableForeignKey sapTableForeignKeyObj = null;
					while(fkItr.hasNext()){
						sapTableForeignKeyObj = new SAPTableForeignKey();

						sapTableForeignKeyObj = (SAPTableForeignKey) fkItr.next();

						fkList.add(sapTableForeignKeyObj);

					} //end of while(fkItr.hasNext())
				}// end of if(foreignKeyList.size() > 0 && foreignKeyList != null .....
				//sapLogger.log(sapLogger.INFO, "******* foreign Key List size: "+fkList.size());
				if(fkList.size() > 0) {
					foreignKeysList.put(tableName, fkList);
				}
			}
		}
		return foreignKeysList;
	}// end of getForeignKeys() method

	/**
	 * This method getIndexes() is responsible to get the all indexes of
	 * specified table putting into the SAPTableForeignKey class object **
	 * @param     ArrayList   of table details object
	 * @return    Hashtable   of all table names as key and all values as arrayList of foreign keys
	 */

	private Hashtable getIndexes(ArrayList tableList){
		sapLogger.log(sapLogger.INFO, "++++++ OdiSAPERPMetadataHelper || getIndexes() +++++++++ ");

		Hashtable indexHashTable = new Hashtable();

		//sapLogger.log(sapLogger.INFO, "getIndexes - tableList.size(): "+tableList.size());
		if(tableList.size() > 0 && tableList != null){
			SAPSearchDetail sapSearchDtlObj = null;
			Iterator itr = tableList.iterator();
			while(itr.hasNext()) {
				sapSearchDtlObj = new SAPSearchDetail();

				sapSearchDtlObj = (SAPSearchDetail) itr.next();
				String tableName =	sapSearchDtlObj.name;
				ArrayList indexList = new ArrayList();
				ArrayList tableIndexList = (ArrayList) odiSAPERPAdapter.getTableIndexes(tableName);

				if(tableIndexList.size() > 0 && tableIndexList != null){

					Iterator indexItr = tableIndexList.iterator();

					SAPTableIndexes sapTableIndexKeyObj = null;
					while(indexItr.hasNext()){
						sapTableIndexKeyObj = new SAPTableIndexes();
						sapTableIndexKeyObj = (SAPTableIndexes) indexItr.next();

						sapTableIndexKeyObj.indexName = sapTableIndexKeyObj.indexName;
						sapTableIndexKeyObj.indexField = sapTableIndexKeyObj.indexField;

						indexList.add(sapTableIndexKeyObj);
					} //end of while(pkItr.hasNext())
				}// end of if(primaryKeyList.size() .....
				//sapLogger.log(sapLogger.INFO, "*******  getIndexes - Index List size: "+indexList.size());
				if(indexList.size() > 0) {
					indexHashTable.put(tableName, indexList);
				}
			}
		}
		return indexHashTable;
	}// end of getIndexes() method

	/**
	 * Count hyphen (-) in a specified string
	 *
	 * @param base
	 * @param searchFor
	 * @return int
	 */
	public static int count(String base, String searchFor) {
		int len   = searchFor.length();
		int result = 0;
		int start = base.indexOf(searchFor);
		while(start != -1) {
			result++;
			start = base.indexOf(searchFor, start+len);
		}
		return result;
	}
	//main method
	/*public static void main(String arg[]){
		OdiSAPERPMetadataHelper odiHelper = new OdiSAPERPMetadataHelper();
	}*/
}// End of OdiSAPERPMetadataHelper class

/**
 * This class is used to store SAP's sub models
 * information to display application component
 * in hierarchy in the ODI SAP Model.
 */
class SAPSubModels {
	public String appCompName;
	public String paranetAPPCompName;
}


/////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle                      		       		   //
// ALL RIGHTS RESERVED.                                                    //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright //
// notice in the COPYRIGHT file in this directory.                         //
////////////////////////////////////////////////////////////////////////////


import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;

import javax.swing.JOptionPane;

/**
 * <b>OdiSAPERPMetadataPopulator</b> java class handles reversing of SAP Metadata without showing
 * UI browser. It fills the table, application component, primary keys, foreign keys, indexes information
 * into respective hashtable and arrayList to populate the data into ODI SNP_REV tables
 *
 * @version 1.0
 */

public class OdiSAPERPMetadataPopulator {
	
	public OdiSAPLogger sapLogger = null;
	private OdiSAPERPAdapter odiSAPERPAdapter = null;
	private OdiSAPERPMetadataHelper odiSAPERPMetadataHelper = null;
	
	/**
	 * OdiSAPERPMetadataPopulator constructor
	 *
	 */
	public OdiSAPERPMetadataPopulator(OdiSAPERPAdapter odiSapERPAdapterObj, OdiSAPLogger odiSAPLogger, OdiSAPERPMetadataHelper odiSAPERPMetadataHelper) {

		this.sapLogger = odiSAPLogger; //For ODI version
		this.odiSAPERPAdapter = odiSapERPAdapterObj; //For ODI version
		this.odiSAPERPMetadataHelper = odiSAPERPMetadataHelper; //For ODI version
		
		
	}
	
	/**
	 * This method is reponsible to take the search parameter, fetch the data from SAP system and
	 * put the all tables metadata into hashtable for reverse engineering in ODI SNP Rev tables
	 * @param
	 * @return
	 */
	public void populateSearchData() {
		sapLogger.log(sapLogger.INFO, "+++++++++ OdiSAPERPMetadataPopulator || populateSearchData() +++++++++++++");
		
		String maskTableName = "<%=odiRef.getModel("REV_OBJ_PATT")%>".toUpperCase();
		//sapLogger.log(sapLogger.INFO,"maskTableName: ", maskTableName);		

		String sapTableDesc = "<%=snpRef.getOption("SAP_TABLE_DESC")%>";
		//sapLogger.log(sapLogger.INFO, "search without ui - sapTableDesc: "+sapTableDesc);
		
		String sapPackage = "<%=snpRef.getOption("SAP_PACKAGE_NAME")%>".toUpperCase();
		//sapLogger.log(sapLogger.INFO, "search without ui - sapPackage: "+sapPackage);

		String sapModule = "<%=snpRef.getOption("SAP_MODULE_NAME")%>".toUpperCase();
		//sapLogger.log(sapLogger.INFO, "search without ui - sapModule: "+sapModule);

		String sapAppComp = "<%=snpRef.getOption("SAP_APP_COMP_NAME")%>".toUpperCase();
		//sapLogger.log(sapLogger.INFO, "search without ui - sapAppComp: "+sapAppComp);

		String sapTableName = "<%=odiRef.getOption("SAP_TABLES_NAME")%>".toUpperCase();
		sapLogger.log(sapLogger.INFO, "search without ui - sapTableName: "+sapTableName);
		
		ArrayList searchedDataList = null;

		try {
			if(!(maskTableName.equalsIgnoreCase("%")) && (!(maskTableName.equalsIgnoreCase("")))) { //Table Name
				 //Table Name
				if(maskTableName.indexOf("%") != -1) {
					maskTableName = maskTableName.replace('%', '*');
					searchedDataList = odiSAPERPAdapter.getSearchResult(maskTableName, null, null, null);
					
				}else if(maskTableName.lastIndexOf("_") != -1) {
					int indexVal= maskTableName.lastIndexOf("_")+1;
					String subTableString = maskTableName.substring(0,indexVal-1);
					sapLogger.log(sapLogger.INFO, "substring is --->"+ subTableString);
					maskTableName = subTableString+"*";//Adding * to substring
					searchedDataList = (odiSAPERPAdapter.getSearchResult(maskTableName, null, null, null));//Getting search result in an ArrayList
				
					sapLogger.log(sapLogger.INFO, "lookupResultList size after--->"+searchedDataList.size());
					ArrayList removelookuptable = new ArrayList();
					Iterator itrlookup = searchedDataList.iterator();
					while(itrlookup.hasNext()) {
						SAPSearchDetail objVal = (SAPSearchDetail) itrlookup.next();
						String name = objVal.name;
						if(name.length()!=indexVal) {
							removelookuptable.add(objVal);
						}
					}
					sapLogger.log(sapLogger.INFO, "removelookuptable size after removing--->"+removelookuptable.size());
					searchedDataList.removeAll(removelookuptable);
					removelookuptable.clear();
					sapLogger.log(sapLogger.INFO, "lookupResultList size after removing--->"+searchedDataList.size());
				} else {
					searchedDataList = odiSAPERPAdapter.getSearchResult(maskTableName, null, null, null);
				}

			}else if(!(sapTableName.equalsIgnoreCase("%")) && (!(sapTableName.equalsIgnoreCase("")))) { //SAP Table Name

				//if(sapTableName.indexOf(",") != -1) {
				searchedDataList = new ArrayList();
				if(sapTableName.indexOf(",") != -1) {//multiple tables
					String[] sapTableSearch = sapTableName.split(",");
					for(int i=0; i < sapTableSearch.length; i++) {
						String tableName =  sapTableSearch[i];
						ArrayList tablesList = odiSAPERPAdapter.getSearchResult(tableName, null, null, null);
						if(tablesList.size() > 0 && tablesList != null) {
							Iterator tableListItr = tablesList.iterator();
							SAPSearchDetail sapSearchDetailObj = null;
							while(tableListItr.hasNext()) {
								sapSearchDetailObj = new SAPSearchDetail();
								sapSearchDetailObj = (SAPSearchDetail)(tableListItr.next());
								searchedDataList.add(sapSearchDetailObj);
							}//end of while loop
						}//end of if condition
					}//end of for loop
				}else {//single tables
					ArrayList tableMetaData = odiSAPERPAdapter.getSearchResult(sapTableName, null, null, null);
					if(tableMetaData.size() > 0 && tableMetaData != null) {
						Iterator tableListItr = tableMetaData.iterator();
						SAPSearchDetail sapSearchDetailObj = null;
						while(tableListItr.hasNext()) {
							sapSearchDetailObj = new SAPSearchDetail();
							sapSearchDetailObj = (SAPSearchDetail)(tableListItr.next());
							searchedDataList.add(sapSearchDetailObj);
						}//end of while loop
					}//end of if condition
				}
				/*} else {
					sapLogger.log(sapLogger.ERROR,"Error: in OdiSAPERPMetadataPopulator.populateSearchData(): Please enter wild card(,) followed by searching tables string in SAP Tables Name!!!");
					throw new Exception("Please enter wild card(,) followed by searching tables string in SAP Tables Name!!!");
				}*/
			} else if(!(sapModule.equalsIgnoreCase("%")) && (!(sapModule.equalsIgnoreCase("")))) { //Module Name
				if(sapModule.indexOf("%") != -1) {
					sapModule = sapModule.replace('%', '*');
					searchedDataList = odiSAPERPAdapter.getSearchResult(null, null, null, sapModule);
				} else {
					sapLogger.log(sapLogger.ERROR,"Error: in OdiSAPERPMetadataPopulator.populateSearchData(): Please enter wild card(%) followed by search string in SAP Module Name!!!");
					throw new Exception("Please enter wild card(%) followed by search string in SAP Module Name!!!");
				}
			
			} else if(!(sapAppComp.equalsIgnoreCase("%")) && (!(sapAppComp.equalsIgnoreCase("")))) { //Application Component Name
				if(sapAppComp.indexOf("%") != -1) {
					sapAppComp = sapAppComp.replace('%', '*');
					searchedDataList = odiSAPERPAdapter.getSearchResult(null, null, null, sapAppComp);
				} else {
					sapLogger.log(sapLogger.ERROR,"Error: in OdiSAPERPMetadataPopulator.populateSearchData(): Please enter wild card(%) followed by search string in SAP App Comp Name!!!");
					throw new Exception("Please enter wild card(%) followed by search string in SAP App Comp Name!!!");
				}
							

			} else if(!(sapPackage.equalsIgnoreCase("%")) && (!(sapPackage.equalsIgnoreCase("")))) { //Package name
				if(sapPackage.indexOf("%") != -1) {
					sapPackage = sapPackage.replace('%', '*');
					searchedDataList = odiSAPERPAdapter.getSearchResult(null, null, sapPackage, null);
				} else {
					searchedDataList = odiSAPERPAdapter.getSearchResult(null, null, sapPackage, null);
					//sapLogger.log(sapLogger.ERROR,"Error: in OdiSAPERPMetadataPopulator.populateSearchData(): Please enter wild card(%) followed by search string in SAP Package Name!!!");
					//throw new Exception("Please enter wild card(%) followed by search string in SAP Package Name!!!");
				}
							
			
			} else if(!(sapTableDesc.equalsIgnoreCase("%")) && (!(sapTableDesc.equalsIgnoreCase("")))) { //Table Description
				if(sapTableDesc.indexOf("%") != -1) {
					sapModule = sapModule.replace('%', '*');
					searchedDataList = odiSAPERPAdapter.getSearchResult(null, sapTableDesc, null, null);
				} else {
					searchedDataList = odiSAPERPAdapter.getSearchResult(null, sapTableDesc, null, null);
					//sapLogger.log(sapLogger.ERROR,"Error: in OdiSAPERPMetadataPopulator.populateSearchData(): Please enter wild card(%) followed by search string in SAP Table Desc!!!");
					//throw new Exception("Please enter wild card(%) followed by search string in SAP Table Desc!!!");
				}
							
			}else {
				sapLogger.log(sapLogger.ERROR,"Error: in OdiSAPERPMetadataPopulator.populateSearchData(): Search strings should not Blank or should not contain wild card(%) only!!!");
				throw new Exception("Search strings should not Blank or should not contain wild card(%) only!!!");
			}
			
			if(searchedDataList.isEmpty()){ //If no record found for the given search
				 sapLogger.log(sapLogger.ERROR, "Search without UI - No Result Found for provided search criteria!!!");
				 throw new Exception("No Result Found for provided search criteria!!!");
			}
			ArrayList fieldList = null;
			
			Iterator searchItr = searchedDataList.iterator();
			Hashtable tableMetadata = new Hashtable();
			ArrayList tableInfoList = new ArrayList();
			SAPSearchDetail searchDetails = null;

			while(searchItr.hasNext()) {
				searchDetails = new SAPSearchDetail();
				searchDetails = (SAPSearchDetail) searchItr.next();
				
				String tableName = searchDetails.name;
				String tableDesc = searchDetails.desc;
				String tableType = searchDetails.tableClass;
				if(searchDetails.moduleName == null || searchDetails.moduleName.equalsIgnoreCase("")) {
					searchDetails.moduleName = "UNDEFINED";
				}
				String appComp   = searchDetails.moduleName;
				StringBuffer tableInfoTemp = new StringBuffer();//performance tuning
				tableInfoTemp.append(tableName);
				tableInfoTemp.append("$");
				tableInfoTemp.append(tableDesc);
				tableInfoTemp.append("$");
				tableInfoTemp.append(tableType);
				tableInfoTemp.append("$");
				tableInfoTemp.append(appComp);
				
				//String tableInfo = tableName +"$"+tableDesc+"$"+tableType+"$"+appComp;//old approach
				String tableInfo = tableInfoTemp.toString();
				
				tableInfoList.add(tableInfo); //adding tableInfo into arrayList
				if((tableName != null) && (!(tableName.equals("")))) {
					fieldList = new ArrayList();
					fieldList = odiSAPERPAdapter.getSAPFields(tableName.trim());
				}
				tableMetadata.put(tableName, fieldList);
			}
			//sapLogger.log(sapLogger.INFO, ">>>>>> tableMetadata.size(): "+tableMetadata.size());
			odiSAPERPMetadataHelper.getSAPMetadata(tableMetadata, true, tableInfoList); //Reverse process starts here
			
		}catch(Exception e) {
			throw new RuntimeException(e);
		}
		sapLogger.log(sapLogger.INFO, "---------- OdiSAPERPMetadataPopulator || populateSearchData() -----------");
	}
	/*public static void main(String[] args) {
		// TODO Auto-generated method stub
		OdiSAPERPMetadataPopulator populator = new OdiSAPERPMetadataPopulator();
	}*/
} //end of main class - OdiSAPERPMetadataPopulator]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:09.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:09.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Source Technology]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[COL_I_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_LINE_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36358000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[40]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Initialize]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36358000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Command Name: Initialize
import com.sap.mw.jco.*;
import java.sql.Connection;

//Initializing logger
String logFileName = <@=odiRef.getQuotedString("<%= odiRef.getOption("LOG_FILE_NAME")%>") @>;
OdiSAPLogger sapLogger = new OdiSAPLogger(logFileName);

//Initializing SAP Connector
OdiSAPERPAdapter odiSapERPAdapter = new OdiSAPERPAdapter(sapLogger);

//Helper object
OdiSAPERPMetadataHelper odiSAPERPMetadataHelper = new OdiSAPERPMetadataHelper(odiSapERPAdapter, sapLogger);

// SAP connection properties get from Topology Manager Defintions
String hostName = "<%=odiRef.getInfo("SRC_DSERV_NAME")%>";
String userName = "<%=odiRef.getInfo("SRC_USER_NAME")%>";
String password = "<%=odiRef.getInfo("SRC_PASS")%>";
String systemNo = "<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_SYSTEM_NUMBER" )?>";
String sapClient = "<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_CLIENT" )?>";
String language = "<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_LANGUAGE" )?>";

//Setting the SAP Connection
odiSapERPAdapter.setSAPConnection(hostName, systemNo, sapClient, language, userName, password, null, null);


//Get the repository connection
Connection repoConnection = odiRef.getJDBCConnection("DEST");
sapLogger.log(sapLogger.INFO, "repoConnection: "+repoConnection.toString());
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36359000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[60]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Install Base Structure for RKM RFCs]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36359000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[_OdiSAPAbapExecute "-UPLOAD=<%=odiRef.getOption("UPLOAD_ABAP_CODE")%>" "-EXECUTE=0" "-EXECUTE_BASE_RKM=1" "-ZRFC_RUN_INSTALL=0" "-ABAP_PROGRAM_NAME=ZCREATE_BDC" "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>" "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>" "-PASSWORD=<%=odiRef.getInfo("SRC_PASS")%>" "-SAP_CLIENT=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_CLIENT" )?>" "-SAP_LANGUAGE=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_LANGUAGE" )?>" "-SAP_SYSTEM_NUMBER=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_SYSTEM_NUMBER" )?>" "-SAP_FUNCTION_GROUP_NAME=<%=odiRef.getOption("SAP_FUNCTION_GROUP")%>" "-CONNECTION_POOL_NAME=<%=odiRef.getOption("SAP_CONNECTION_POOL")%>" "-CONNECTION_POOL_SIZE=<%=odiRef.getOption("SAP_CONNECTION_POOL_SIZE")%>"  "-FILE_DELIMITER=|" "-FTP_TRANSFER_TIMEOUT=100000" "-USER_ABAP_PARAMETER_NAMES=<Value>" "-USER_ABAP_PARAMETER_VALUES=<Value>" "-USER_ABAP_PARAMETER_SEPARATOR=<Value>" "-LOG_FILE_NAME=<%=odiRef.getOption("LOG_FILE_NAME")%>.opentool.log" "-DEV_CLASS=ZODI_DEVCLASS" "-HASH_VALUE_MARKER=HVM" "-ABAP_PROGRAM_BODY=
REPORT ZODI_CREATE_PROGRAMS .
CONSTANTS :
c_devclass        TYPE tadir-devclass
VALUE 'ZODI_DEVCLASS',
c_shorttext       TYPE trdevclass-ctext
VALUE 'ODI Package',
c_reqtext         TYPE e07t-as4text
VALUE 'ODI Transport Request',
c_component       TYPE dlvunit
VALUE 'SAP_ABA',
c_action          TYPE sy-ucomm
VALUE 'CREA',
c_dialog          TYPE trpari-flag
VALUE '',
c_dlvunit         TYPE trdevclass-dlvunit
VALUE 'HOME',
c_task            TYPE e070-trfunction
VALUE 'S',
c_request         TYPE e070-trfunction
VALUE 'K',
c_msgclass        TYPE rsdag-arbgb
VALUE 'ZODI_MSG',
c_msg_class_txt   TYPE t100a-stext
VALUE 'Message Class for ODI',
c_function_group  TYPE rsnewleng-area
VALUE 'ZODI_FGR',
c_fngrp_text      TYPE tftit-stext
VALUE 'Function Group for ODI',
c_zodi_appl_comp        TYPE
dd02v-tabname VALUE 'ZODI_APPL_COMP',
c_zodi_bapi_s_tbl_list        TYPE
dd02v-tabname VALUE 'ZODI_BAPI_S_TBL_LIST',
c_zodi_rfc_db_fld             TYPE
dd02v-tabname VALUE 'ZODI_RFC_DB_FLD',
c_zodi_bapi_s_tbl_index_list  TYPE
dd02v-tabname VALUE 'ZODI_BAPI_S_TBL_INDEX_LIST',
c_zodi_s_pk       TYPE dd02v-tabname
VALUE 'ZODI_S_PK',
c_zodi_s_fk       TYPE dd02v-tabname
VALUE 'ZODI_S_FK',
c_zreturn         TYPE dd02v-tabname
VALUE 'ZRETURN',
c_funcname        TYPE rs38l-name
VALUE 'ZRFC_ABAP_INSTALL_AND_RUN',
c_funcname_text   TYPE tftit-stext
VALUE 'Install code and execute',
c_remote_call     TYPE RS38L-REMOTE
VALUE 'X'.
DATA : BEGIN OF struct OCCURS 0,
tabname TYPE dd02v-tabname,
END OF struct.
DATA :
trans_req_no        TYPE e070-trkorr,
task_number         TYPE e070-trkorr,
es_devclass         TYPE trdevclass,
is_devclass         TYPE trdevclass,
t_version           TYPE cvers,
ev_something_changd TYPE trpari-flag,
ev_request          TYPE e070-trkorr,
obj_name            TYPE tadir-obj_name,
es_tadir            TYPE tadir,
e071                TYPE STANDARD TABLE OF e071,
wa_e071             TYPE e071,
et_log              TYPE sprot_u_tab,
it_bdcdata          TYPE STANDARD TABLE OF
bdcdata    WITH HEADER LINE,
it_messtab          TYPE STANDARD TABLE OF
bdcmsgcoll WITH HEADER LINE,
wa_headerstruct     LIKE dd02v,
lv_sysid            TYPE srcsystem,
wa_struct           LIKE LINE OF struct,
t_structure         TYPE STANDARD TABLE OF dd03p
WITH HEADER LINE,
exception_list      TYPE STANDARD TABLE OF rsexc,
export_parameter    TYPE STANDARD TABLE OF rsexp,
import_parameter    TYPE STANDARD TABLE OF rsimp,
parameter_docu      TYPE STANDARD TABLE OF rsfdo,
tables_parameter    TYPE STANDARD TABLE OF rstbl,
changing_parameter  TYPE STANDARD TABLE OF rscha,
wa_exp              TYPE rsexp,
wa_imp              TYPE rsimp,
wa_tables           TYPE rstbl,
wa_tdevc            TYPE tdevc,
cg_rep_tab          LIKE abaptext OCCURS 20,
include_name        TYPE rs38l-include,
cg_tabix            LIKE sy-tabix.
START-OF-SELECTION.
CLEAR trans_req_no.
CALL FUNCTION 'IW_C_CREATE_TRANSPORT_REQUEST'
EXPORTING
description            = c_reqtext
transport_kind         = c_request
langu                  = sy-langu
IMPORTING
commfile               = trans_req_no
EXCEPTIONS
language_missing       = 1
number_range_full      = 2
unallowed_trfunction   = 3
no_authorization       = 4
create_transport_error = 5
OTHERS                 = 6.
IF sy-subrc <> 0.
CLEAR trans_req_no.
ENDIF.
CLEAR task_number.
CALL FUNCTION 'TRINT_INSERT_NEW_COMM'
EXPORTING
wi_kurztext   = c_reqtext
wi_trfunction = c_task
iv_username   = sy-uname
wi_strkorr    = trans_req_no
wi_client     = sy-mandt
IMPORTING
we_trkorr     = task_number.
IF sy-subrc <> 0.
CLEAR task_number.
ENDIF.
SELECT SINGLE * FROM cvers INTO t_version
WHERE component = c_component.
IF t_version-release  >=  '700'.
PERFORM create_devclass_6.
ELSE.
PERFORM create_devclass_46c.
ENDIF.
CALL FUNCTION 'RS_FUNCTION_POOL_INSERT'
EXPORTING
function_pool       = c_function_group
short_text          = c_fngrp_text
responsible         = sy-uname
devclass            = c_devclass
corrnum             = trans_req_no
suppress_corr_check = space.
PERFORM structure.
PERFORM CREATE_ZRFC_ABAP.
PERFORM CREATE_ZRFC_ABAP_WRAPPER.
PERFORM DELETE_FTP_FILE.
PERFORM CREATE_MESSAGE_CLASS.
FORM create_devclass_46c.
CALL FUNCTION 'TR_MODIFY_DEVCLASS'
EXPORTING
iv_action            = c_action
iv_dialog            = c_dialog
iv_devclass          = c_devclass
iv_text              = c_shorttext
iv_responsible       = sy-uname
iv_dlvunit           = c_dlvunit
iv_request           = task_number
IMPORTING
es_devclass          = es_devclass
ev_something_changed = ev_something_changd
ev_request           = ev_request.
ENDFORM.
FORM create_devclass_6.
IS_DEVCLASS-DEVCLASS  =  c_devclass.
IS_DEVCLASS-CTEXT     =  c_shorttext.
IS_DEVCLASS-AS4USER   =  sy-uname.
IS_DEVCLASS-PDEVCLASS = 'SAP'.
IS_DEVCLASS-DLVUNIT   = 'HOME'.
CALL FUNCTION 'PA_REPLACE_MODIFY_DEVCLASS'
EXPORTING
IV_ACTION                   = c_action
IV_DIALOG                   = c_dialog
IS_DEVCLASS                 = is_devclass
IV_REQUEST                  = task_number
IMPORTING
es_devclass          = es_devclass
ev_something_changed = ev_something_changd
ev_request           = ev_request.
IF sy-subrc <> 0.
CLEAR: es_devclass, ev_something_changd,
ev_request.
ENDIF.
ENDFORM.
FORM structure.
CLEAR   t_structure.
REFRESH t_structure.
wa_headerstruct-tabname =
c_zodi_appl_comp.
wa_headerstruct-ddlanguage = sy-langu.
wa_headerstruct-tabclass = 'INTTAB'.
wa_headerstruct-ddtext   = 'ODI GET SAP MODULES '.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'APPL_COMP'.
t_structure-position  = '1'.
t_structure-rollname  = 'UFPS_POSID'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'SHORT_TEXT'.
t_structure-position  = '2'.
t_structure-rollname  = 'UDTEXT'.
APPEND t_structure.
CLEAR  t_structure.
struct-tabname = wa_headerstruct-tabname.
APPEND struct.
CLEAR  struct.
CALL FUNCTION 'DDIF_TABL_PUT'
EXPORTING
name              = wa_headerstruct-tabname
dd02v_wa          = wa_headerstruct
TABLES
dd03p_tab         = t_structure
EXCEPTIONS
tabl_not_found    = 1
name_inconsistent = 2
tabl_inconsistent = 3
put_failure       = 4
put_refused       = 5
OTHERS            = 6.
CALL FUNCTION 'DDIF_TABL_ACTIVATE'
EXPORTING
name        = wa_headerstruct-tabname
auth_chk    = space
EXCEPTIONS
not_found   = 1
put_failure = 2
OTHERS      = 3.
CLEAR wa_headerstruct.
CLEAR   t_structure.
REFRESH t_structure.
wa_headerstruct-tabname =
c_zodi_bapi_s_tbl_list.
wa_headerstruct-ddlanguage = sy-langu.
wa_headerstruct-tabclass = 'INTTAB'.
wa_headerstruct-ddtext   = 'ODI GET TABLES RFC '.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'TABNAME'.
t_structure-position  = '1'.
t_structure-rollname  = 'CHAR0032'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'TABCLASS'.
t_structure-position  = '2'.
t_structure-rollname  = 'CHAR0008'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'DEVCLASS'.
t_structure-position  = '3'.
t_structure-rollname  = 'CHAR0032'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'COMMENTS'.
t_structure-position  = '4'.
t_structure-rollname  = 'CHAR100'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'MODULE_NAME'.
t_structure-position  = '5'.
t_structure-rollname  = 'CHAR24'.
APPEND t_structure.
CLEAR  t_structure.
struct-tabname = wa_headerstruct-tabname.
APPEND struct.
CLEAR  struct.
CALL FUNCTION 'DDIF_TABL_PUT'
EXPORTING
name              = wa_headerstruct-tabname
dd02v_wa          = wa_headerstruct
TABLES
dd03p_tab         = t_structure
EXCEPTIONS
tabl_not_found    = 1
name_inconsistent = 2
tabl_inconsistent = 3
put_failure       = 4
put_refused       = 5
OTHERS            = 6.
CALL FUNCTION 'DDIF_TABL_ACTIVATE'
EXPORTING
name        = wa_headerstruct-tabname
auth_chk    = space
EXCEPTIONS
not_found   = 1
put_failure = 2
OTHERS      = 3.
CLEAR wa_headerstruct.
CLEAR   t_structure.
REFRESH t_structure.
wa_headerstruct-tabname = c_zodi_rfc_db_fld.
wa_headerstruct-ddlanguage = sy-langu.
wa_headerstruct-tabclass = 'INTTAB'.
wa_headerstruct-ddtext   = 'RFC Table Read'.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'FIELDNAME'.
t_structure-position  = '1'.
t_structure-rollname  = 'FIELDNAME'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'OFFSET'.
t_structure-position  = '2'.
t_structure-rollname  = 'DOFFSET'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'DATATYPE'.
t_structure-position  = '3'.
t_structure-rollname  = 'DATATYPE_D'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'LENGTH'.
t_structure-position  = '4'.
t_structure-rollname  = 'DDLENG'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'DECIMALS'.
t_structure-position  = '5'.
t_structure-rollname  = 'DECIMALS'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'FIELDTEXT'.
t_structure-position  = '6'.
t_structure-rollname  = 'AS4TEXT'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'NOTNULL'.
t_structure-position  = '7'.
t_structure-rollname  = 'NOTNULL'.
APPEND t_structure.
CLEAR  t_structure.
struct-tabname = wa_headerstruct-tabname.
APPEND struct.
CLEAR  struct.
CALL FUNCTION 'DDIF_TABL_PUT'
EXPORTING
name              = wa_headerstruct-tabname
dd02v_wa          = wa_headerstruct
TABLES
dd03p_tab         = t_structure
EXCEPTIONS
tabl_not_found    = 1
name_inconsistent = 2
tabl_inconsistent = 3
put_failure       = 4
put_refused       = 5
OTHERS            = 6.
CALL FUNCTION 'DDIF_TABL_ACTIVATE'
EXPORTING
name        = wa_headerstruct-tabname
auth_chk    = space
EXCEPTIONS
not_found   = 1
put_failure = 2
OTHERS      = 3.
CLEAR wa_headerstruct.
CLEAR   t_structure.
REFRESH t_structure.
wa_headerstruct-tabname =
c_zodi_bapi_s_tbl_index_list.
wa_headerstruct-ddlanguage = sy-langu.
wa_headerstruct-tabclass = 'INTTAB'.
wa_headerstruct-ddtext   =
'Structure used in ODI for table Indexes'.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'INDEXNAME'.
t_structure-position  = '1'.
t_structure-rollname  = 'INDEXID'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'INDEXFIELDS'.
t_structure-position  = '2'.
t_structure-rollname  = 'CHAR255'.
APPEND t_structure.
CLEAR  t_structure.
struct-tabname = wa_headerstruct-tabname.
APPEND struct.
CLEAR  struct.
CALL FUNCTION 'DDIF_TABL_PUT'
EXPORTING
name              = wa_headerstruct-tabname
dd02v_wa          = wa_headerstruct
TABLES
dd03p_tab         = t_structure
EXCEPTIONS
tabl_not_found    = 1
name_inconsistent = 2
tabl_inconsistent = 3
put_failure       = 4
put_refused       = 5
OTHERS            = 6.
CALL FUNCTION 'DDIF_TABL_ACTIVATE'
EXPORTING
name        = wa_headerstruct-tabname
auth_chk    = space
EXCEPTIONS
not_found   = 1
put_failure = 2
OTHERS      = 3.
CLEAR wa_headerstruct.
CLEAR   t_structure.
REFRESH t_structure.
wa_headerstruct-tabname = c_zodi_s_pk.
wa_headerstruct-ddlanguage = sy-langu.
wa_headerstruct-tabclass = 'INTTAB'.
wa_headerstruct-ddtext   =
'ODI Structure for Primary Keys'.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'PRI_KEY_TABNAM'.
t_structure-position  = '1'.
t_structure-rollname  = 'CHAR30'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'PRI_KEY_FIELD'.
t_structure-position  = '2'.
t_structure-rollname  = 'CHAR30'.
APPEND t_structure.
CLEAR  t_structure.
struct-tabname = wa_headerstruct-tabname.
APPEND struct.
CLEAR  struct.
CALL FUNCTION 'DDIF_TABL_PUT'
EXPORTING
name              = wa_headerstruct-tabname
dd02v_wa          = wa_headerstruct
TABLES
dd03p_tab         = t_structure
EXCEPTIONS
tabl_not_found    = 1
name_inconsistent = 2
tabl_inconsistent = 3
put_failure       = 4
put_refused       = 5
OTHERS            = 6.
CALL FUNCTION 'DDIF_TABL_ACTIVATE'
EXPORTING
name        = wa_headerstruct-tabname
auth_chk    = space
EXCEPTIONS
not_found   = 1
put_failure = 2
OTHERS      = 3.
CLEAR wa_headerstruct.
CLEAR   t_structure.
REFRESH t_structure.
wa_headerstruct-tabname = c_zodi_s_fk.
wa_headerstruct-ddlanguage = sy-langu.
wa_headerstruct-tabclass = 'INTTAB'.
wa_headerstruct-ddtext   =
'Structute for Foreign KEys'.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'FIELD_NAME'.
t_structure-position  = '1'.
t_structure-rollname  = 'CHAR30'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'TABLE_NAME'.
t_structure-position  = '2'.
t_structure-rollname  = 'CHAR30'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'FK_TABLE_NAME'.
t_structure-position  = '3'.
t_structure-rollname  = 'CHAR30'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'FK_FIELD_NAME'.
t_structure-position  = '4'.
t_structure-rollname  = 'CHAR30'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'FK_TABLE_TEXT'.
t_structure-position  = '5'.
t_structure-rollname  = 'AS4TEXT'.
APPEND t_structure.
CLEAR  t_structure.
struct-tabname = wa_headerstruct-tabname.
APPEND struct.
CLEAR  struct.
CALL FUNCTION 'DDIF_TABL_PUT'
EXPORTING
name              = wa_headerstruct-tabname
dd02v_wa          = wa_headerstruct
TABLES
dd03p_tab         = t_structure
EXCEPTIONS
tabl_not_found    = 1
name_inconsistent = 2
tabl_inconsistent = 3
put_failure       = 4
put_refused       = 5
OTHERS            = 6.
CALL FUNCTION 'DDIF_TABL_ACTIVATE'
EXPORTING
name        = wa_headerstruct-tabname
auth_chk    = space
EXCEPTIONS
not_found   = 1
put_failure = 2
OTHERS      = 3.
CLEAR wa_headerstruct.
CLEAR   t_structure.
REFRESH t_structure.
wa_headerstruct-tabname = c_zreturn.
wa_headerstruct-ddlanguage = sy-langu.
wa_headerstruct-tabclass = 'INTTAB'.
wa_headerstruct-ddtext   =
'StructuRe for Return table'.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'STAT_MSG_TYPE'.
t_structure-position  = '1'.
t_structure-rollname  = 'CHAR1'.
APPEND t_structure.
CLEAR  t_structure.
t_structure-tabname   = wa_headerstruct-tabname.
t_structure-fieldname = 'STAT_MSG_DESC'.
t_structure-position  = '2'.
t_structure-rollname  = 'CHAR50'.
APPEND t_structure.
CLEAR  t_structure.
struct-tabname = wa_headerstruct-tabname.
APPEND struct.
CLEAR  struct.
CALL FUNCTION 'DDIF_TABL_PUT'
EXPORTING
name              = wa_headerstruct-tabname
dd02v_wa          = wa_headerstruct
TABLES
dd03p_tab         = t_structure
EXCEPTIONS
tabl_not_found    = 1
name_inconsistent = 2
tabl_inconsistent = 3
put_failure       = 4
put_refused       = 5
OTHERS            = 6.
CALL FUNCTION 'DDIF_TABL_ACTIVATE'
EXPORTING
name        = wa_headerstruct-tabname
auth_chk    = space
EXCEPTIONS
not_found   = 1
put_failure = 2
OTHERS      = 3.
CLEAR wa_headerstruct.
LOOP AT struct INTO wa_struct.
obj_name  = wa_struct-tabname.
lv_sysid = sy-sysid.
CALL FUNCTION 'TRINT_TADIR_INSERT'
EXPORTING
author               = sy-uname
masterlang           = sy-langu
devclass             = c_devclass
genflag              = ' '
object               = 'TABL'
obj_name             = obj_name
pgmid                = 'R3TR'
srcsystem            = lv_sysid
IMPORTING
es_tadir             = es_tadir
EXCEPTIONS
object_exists_global = 1
object_exists_local  = 2
OTHERS               = 3.
wa_e071-trkorr    = trans_req_no.
wa_e071-as4pos    = '1'.
wa_e071-pgmid     = 'R3TR'.
wa_e071-object    = 'TABL'.
wa_e071-obj_name  = obj_name.
wa_e071-lockflag  = 'X'.
APPEND wa_e071 TO e071.
CLEAR wa_e071.
wa_e071-trkorr    = trans_req_no.
wa_e071-as4pos    = '2'.
wa_e071-pgmid     = 'LIMU'.
wa_e071-object    = 'TABD'.
wa_e071-obj_name  = obj_name.
wa_e071-lockflag  = 'X'.
APPEND wa_e071 TO e071.
CLEAR  wa_e071.
CALL FUNCTION 'TRINT_REQUEST_CHOICE'
EXPORTING
iv_suppress_dialog = 'X'
iv_request_types   = 'KL'
iv_request         = trans_req_no
IMPORTING
et_log             = et_log
TABLES
it_e071            = e071.
ENDLOOP.
ENDFORM.
FORM CREATE_ZRFC_ABAP.
REFRESH: exception_list,
         export_parameter,
         import_parameter,
         parameter_docu,
         tables_parameter,
         cg_rep_tab.
wa_imp-parameter = 'MODE'.
wa_imp-TYP = 'SY-MSGTY'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_imp-parameter = 'PROGRAMNAME'.
wa_imp-TYP = 'SY-REPID'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_exp-parameter = 'ERRORMESSAGE'.
wa_exp-types  = 'X'.
wa_exp-dbfield  = 'SY-MSGV1'.
APPEND wa_exp TO  export_parameter.
wa_tables-parameter = 'PROGRAM'.
wa_tables-dbstruct  = 'PROGTAB'.
APPEND wa_tables TO tables_parameter.
wa_tables-parameter = 'WRITES'.
wa_tables-dbstruct  = 'LISTZEILE'.
APPEND wa_tables TO tables_parameter.
CALL FUNCTION 'FUNCTION_CREATE_REMOTE'
EXPORTING
funcname         = 'ZRFC_ABAP_INSTALL_AND_RUN'
function_pool    = c_function_group
remote_call      = c_remote_call
short_text       = c_funcname_text
IMPORTING
function_include = include_name
TABLES
exception_list   = exception_list
export_parameter = export_parameter
import_parameter = import_parameter
parameter_docu   = parameter_docu
tables_parameter = tables_parameter.
READ REPORT include_name
INTO cg_rep_tab.
DESCRIBE TABLE cg_rep_tab LINES cg_tabix.
cg_tabix = cg_tabix - 3.
DATA: str TYPE string,str1 TYPE string,str2
TYPE string,str3 TYPE string
,str4 TYPE string,str5 TYPE string .
INSERT 'DATA: BEGIN OF LISTOBJ OCCURS 20.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'INCLUDE STRUCTURE ABAPLIST.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: END OF LISTOBJ.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: MESS(72), LIN(72), WRD(72).'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: SYSTEMEDIT  LIKE TADIR-EDTFLAG,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'SYS_CLIINDDEP_EDIT LIKE T000-CCNOCLIIND.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''TR_SYS_PARAMS'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IMPORTING' INTO cg_rep_tab INDEX
cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'SYSTEMEDIT          = SYSTEMEDIT'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'SYS_CLIINDDEP_EDIT  = SYS_CLIINDDEP_EDIT'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXCEPTIONS'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'OTHERS                   = 1.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF SY-SUBRC <> 0.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT
'ERRORMESSAGE = ''Error in TR_SYS_PARAMS''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXIT.' INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.' INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF SYSTEMEDIT EQ ''N''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'MESSAGE E102(TK).'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.' INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF SYS_CLIINDDEP_EDIT CA ''23''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'MESSAGE E729(TK).'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.' INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF MODE = ''F''.' INTO cg_rep_tab
INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT
'SYNTAX-CHECK FOR PROGRAM'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT
'MESSAGE MESS LINE LIN WORD WRD.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.' INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF MESS <> SPACE.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ERRORMESSAGE = MESS.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXIT.' INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.' INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF MODE = ''F''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'PROGRAMNAME = ''<<XRFC>>''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'INSERT REPORT PROGRAMNAME FROM PROGRAM.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.' INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'COMMIT WORK.' INTO cg_rep_tab INDEX
cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'SUBMIT (PROGRAMNAME) AND RETURN .'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DELETE REPORT PROGRAMNAME.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT REPORT include_name
FROM cg_rep_tab.
ENDFORM.
FORM CREATE_ZRFC_ABAP_WRAPPER.
CLEAR: wa_imp,
       wa_exp,
       wa_tables.
REFRESH: exception_list,
         export_parameter,
         import_parameter,
         parameter_docu,
         tables_parameter,
         cg_rep_tab.
wa_imp-parameter = 'MODE'.
wa_imp-TYP = 'SY-MSGTY'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_imp-parameter = 'PROGRAMNAME'.
wa_imp-TYP = 'SY-REPID'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_imp-parameter = 'LV_TASK'.
wa_imp-TYP = 'TABNAME'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_exp-parameter = 'ERRORMESSAGE'.
wa_exp-types  = 'X'.
wa_exp-dbfield  = 'SY-MSGV1'.
APPEND wa_exp TO  export_parameter.
wa_tables-parameter = 'PROGRAM'.
wa_tables-dbstruct  = 'PROGTAB'.
APPEND wa_tables TO tables_parameter.
wa_tables-parameter = 'WRITES'.
wa_tables-dbstruct  = 'LISTZEILE'.
APPEND wa_tables TO tables_parameter.
wa_tables-parameter = 'ET_FILE_RETURN'.
wa_tables-dbstruct  = 'BAPIRET2'.
APPEND wa_tables TO tables_parameter.
CALL FUNCTION 'FUNCTION_CREATE_REMOTE'
EXPORTING
funcname         = 'ZRFC_UPLOAD_INSTALL_WRAPPER'
function_pool    = c_function_group
remote_call      = c_remote_call
short_text       = c_funcname_text
IMPORTING
function_include = include_name
TABLES
exception_list   = exception_list
export_parameter = export_parameter
import_parameter = import_parameter
parameter_docu   = parameter_docu
tables_parameter = tables_parameter.
READ REPORT include_name
INTO cg_rep_tab.
DESCRIBE TABLE cg_rep_tab LINES cg_tabix.
cg_tabix = cg_tabix - 3.
DELETE cg_rep_tab WHERE LINE = 'ENDFUNCTION.'.
DATA: str TYPE string,str1 TYPE string,str2
TYPE string,str3 TYPE string
,str4 TYPE string,str5 TYPE string .
INSERT 'DATA: lv_grp    TYPE rzlli_apcl,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'wait_bfr  TYPE i  VALUE 1,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'wait_afr  TYPE i  VALUE 1,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'des       TYPE rfcdest.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF NOT lv_task IS INITIAL.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''ZRFC_ABAP_INSTALL_AND_RUN'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'STARTING NEW TASK lv_task'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DESTINATION IN GROUP DEFAULT'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'PERFORMING read_result ON END OF TASK'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'mode           = mode'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'programname    = programname'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'TABLES'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'program        = program'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'writes         = writes'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'et_file_return = et_file_return.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'wait_afr = wait_afr + 1.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'WAIT UNTIL wait_bfr >= wait_afr UP TO ''50'' SECONDS.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ELSE.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''ZRFC_ABAP_INSTALL_AND_RUN'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'mode           = mode'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'programname    = programname'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IMPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'errormessage   = errormessage'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'TABLES'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'program        = program'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'writes         = writes'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'et_file_return = et_file_return.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDFUNCTION.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'FORM read_result USING lv_task.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: program    TYPE STANDARD TABLE OF progtab,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'writes          TYPE STANDARD TABLE OF listzeile,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT'et_file_return  TYPE STANDARD TABLE OF bapiret2.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'RECEIVE RESULTS FROM'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'FUNCTION ''ZRFC_ABAP_INSTALL_AND_RUN'' KEEPING TASK' INTO
cg_rep_tab INDEX cg_tabix.
cg_tabix  =  cg_tabix + 1.
INSERT 'TABLES'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'program            = program'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'writes             = writes'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'et_file_return    = et_file_return.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDFORM.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT REPORT include_name
FROM cg_rep_tab.
ENDFORM.
FORM CREATE_MESSAGE_CLASS.
DATA:   it_bdcdata  TYPE STANDARD TABLE OF
bdcdata    WITH HEADER LINE.
DATA:   it_messtab  TYPE STANDARD TABLE OF
bdcmsgcoll WITH HEADER LINE.
perform bdc_dynpro      using 'SAPLWBMESSAGES'
'0100'.
perform bdc_field       using 'BDC_CURSOR'
'RSDAG-ARBGB'.
perform bdc_field       using 'BDC_OKCODE'
'=WB_CREATE'.
perform bdc_field       using 'RSDAG-ARBGB'
c_msgclass.
perform bdc_field       using 'RSDAG-MSGFLAG'
'X'.
perform bdc_dynpro      using 'SAPLWBMESSAGES'
'1000'.
perform bdc_field       using 'BDC_OKCODE'
'=MESS'.
perform bdc_field       using 'BDC_CURSOR'
'T100A-STEXT'.
perform bdc_field       using 'T100A-RESPUSER'
sy-uname.
perform bdc_field       using 'T100A-STEXT'
'TEST'.
perform bdc_dynpro      using 'SAPLSTRD' '0100'.
perform bdc_field       using 'BDC_CURSOR'
'KO007-L_DEVCLASS'.
perform bdc_field       using 'BDC_OKCODE'
'=ADD'.
perform bdc_field       using 'KO007-L_DEVCLASS'
c_devclass.
perform bdc_field       using 'KO007-L_AUTHOR'
sy-uname.
perform bdc_dynpro      using 'SAPLSTRD' '0300'.
perform bdc_field       using 'BDC_CURSOR'
'KO008-TRKORR'.
perform bdc_field       using 'BDC_OKCODE'
'=LOCK'.
perform bdc_field       using 'KO008-TRKORR'
trans_req_no.
PERFORM bdc_dynpro      USING 'SAPLSTRD' '0302'.
PERFORM bdc_field       USING 'BDC_CURSOR'
'KO008-TRKORR'.
PERFORM bdc_field       USING 'BDC_OKCODE'
'=LOCK'.
perform bdc_dynpro      using 'SAPLWBMESSAGES'
'1000'.
perform bdc_field       using 'BDC_OKCODE'
'=ALMA'.
perform bdc_field       using 'BDC_CURSOR'
'T100-TEXT(01)'.
perform bdc_field       using 'NUMMER'
'000'.
perform bdc_dynpro      using 'SAPLWBMESSAGES'
'1000'.
perform bdc_field       using 'BDC_OKCODE'
'=WB_BACK'.
perform bdc_field       using 'BDC_CURSOR'
'T100-TEXT(13)'.
perform bdc_field       using 'NUMMER'
'000'.
perform bdc_field       using 'T100-TEXT(00)'
'TEST'.
perform bdc_field       using 'T100-TEXT(01)'
'TEST'.
perform bdc_field       using 'T100-TEXT(02)'
'TEST'.
perform bdc_field       using 'T100-TEXT(03)'
'TEST'.
perform bdc_field       using 'T100-TEXT(04)'
'TEST'.
perform bdc_field       using 'T100-TEXT(05)'
'TEST'.
perform bdc_field       using 'T100-TEXT(06)'
'TEST'.
perform bdc_field       using 'T100-TEXT(07)'
'TESTT'.
perform bdc_field       using 'T100-TEXT(08)'
'TEST'.
perform bdc_field       using 'T100-TEXT(09)'
'TEST'.
perform bdc_field       using 'T100-TEXT(10)'
'TEST'.
perform bdc_field       using 'T100-TEXT(11)'
'TEST'.
perform bdc_field       using 'T100-TEXT(12)'
'TEST'.
perform bdc_field       using 'T100-TEXT(13)'
'TEST'.
perform bdc_field       using 'T100-TEXT(14)'
'TEST'.
perform bdc_field       using 'T100-TEXT(15)'
'TEST'.
perform bdc_field       using 'T100-TEXT(16)'
'TEST'.
perform bdc_field       using 'T100-TEXT(17)'
'TEST'.
perform bdc_dynpro      using 'SAPLSPO1'
'0100'.
perform bdc_field       using 'BDC_OKCODE'
'=YES'.
perform bdc_dynpro      using 'SAPLWBMESSAGES'
'0100'.
perform bdc_field       using 'BDC_CURSOR'
'RSDAG-ARBGB'.
perform bdc_field       using 'BDC_OKCODE'
'=WB_BACK'.
perform bdc_field       using 'RSDAG-ARBGB'
c_msgclass.
perform bdc_field       using 'RSDAG-MSGFLAG'
'X'.
perform bdc_transaction using 'SE91'.
ENDFORM.
FORM bdc_transaction USING tcode.
REFRESH it_messtab.
CALL TRANSACTION tcode USING it_bdcdata
MODE   'N'
UPDATE 'A'
MESSAGES INTO it_messtab.
IF sy-subrc NE 0.
ENDIF.
DATA:
it_text TYPE STANDARD TABLE OF t100,
wa_text TYPE t100.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '000'.
wa_text-text  = 'Table not available'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '001'.
wa_text-text  =
'Table Description not available for the table'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '002'.
wa_text-text  = 'Table not available'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '003'.
wa_text-text  = 'Invalid Package'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '004'.
wa_text-text  = 'Invalid Application Component'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '005'.
wa_text-text  = 'Package for table not available'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '006'.
wa_text-text  =
'No Tables Available for the given input'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '007'.
wa_text-text  = 'Error in passing FTP command'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '008'.
wa_text-text  = 'Error in opening data File'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '009'.
wa_text-text  =
'Error in passing data to FTP server'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '010'.
wa_text-text  = 'Error in passing FTP command'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '011'.
wa_text-text  =
'Data file transfer to FTP Server successful'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '012'.
wa_text-text  = 'No data Available'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '013'.
wa_text-text  = 'Error in closing RFC connection'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '014'.
wa_text-text  = 'Fields not Available'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '015'.
wa_text-text  = 'No foreign keys Available'.
APPEND wa_text TO it_text.
wa_text-sprsl = sy-langu.
wa_text-arbgb = c_msgclass.
wa_text-msgnr = '016'.
wa_text-text  =
'Secondary Indexes Not found for the table'.
APPEND wa_text TO it_text.
INSERT T100 FROM TABLE it_text.
ENDFORM.
FORM bdc_dynpro USING program dynpro.
CLEAR it_bdcdata.
it_bdcdata-program  = program.
it_bdcdata-dynpro   = dynpro.
it_bdcdata-dynbegin = 'X'.
APPEND it_bdcdata.
ENDFORM.
FORM bdc_field USING fnam fval.
CLEAR it_bdcdata.
it_bdcdata-fnam = fnam.
it_bdcdata-fval = fval.
APPEND it_bdcdata.
ENDFORM.
FORM DELETE_FTP_FILE .
CLEAR: wa_imp,
       wa_tables.
REFRESH: exception_list,
         export_parameter,
         import_parameter,
         parameter_docu,
         tables_parameter,
         cg_rep_tab.
wa_imp-parameter = 'IV_FILENAME'.
wa_imp-TYP  = 'BAPIEXT-VALUE'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_imp-parameter = 'IV_USER'.
wa_imp-TYP = 'BAPI0012_3-NAME'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_imp-parameter = 'IV_PWD'.
wa_imp-TYP = 'BAPI0012_3-NAME'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_imp-parameter = 'IV_HOST'.
wa_imp-TYP = 'BAPI0012_3-TAXJURCODE'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_imp-parameter = 'IV_PATH'.
wa_imp-TYP = 'CFDAT60'.
wa_imp-optional = ' '.
APPEND wa_imp TO  import_parameter.
wa_tables-parameter = 'ET_FILE_RETURN'.
wa_tables-dbstruct  = 'BAPIRET2'.
APPEND wa_tables TO tables_parameter.
CALL FUNCTION 'FUNCTION_CREATE_REMOTE'
EXPORTING
funcname         = 'ZODI_RFC_DELETE_FTP_FILE'
function_pool    = c_function_group
remote_call      = c_remote_call
short_text       = 'Delete FTP File'
IMPORTING
function_include = include_name
TABLES
exception_list   = exception_list
export_parameter = export_parameter
import_parameter = import_parameter
parameter_docu   = parameter_docu
tables_parameter = tables_parameter.
READ REPORT include_name
INTO cg_rep_tab.
DESCRIBE TABLE cg_rep_tab LINES cg_tabix.
cg_tabix = cg_tabix - 3.
DATA: str TYPE string,str1 TYPE string,str2
TYPE string,str3 TYPE string
,str4 TYPE string,str5 TYPE string .
INSERT 'DATA: gc_error VALUE ''E'' .'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: gc_success VALUE ''S''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: lv_hdl TYPE i,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lv_cmd(120) TYPE c ,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lv_slen TYPE i,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lv_line TYPE i.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: lc_dest TYPE rfcdes-rfcdest'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'VALUE ''SAPFTPA'','
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lc_key TYPE i VALUE 26101957,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lc_pasv VALUE ''X'','
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lc_cmd1(20) TYPE c VALUE '
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT '''set passive on'','
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lc_cmd2(5) TYPE c VALUE ''put''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'TYPES: BEGIN OF ls_blob,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'line(300) TYPE c,'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'END OF ls_blob.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA:lt_txtdata TYPE TABLE OF ls_text.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: wa_txtdata LIKE LINE OF lt_txtdata.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: lt_result TYPE TABLE OF ls_text.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'DATA: t_vers TYPE cvers .'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'SELECT SINGLE * FROM cvers INTO t_vers'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'WHERE component = ''SAP_ABA''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lv_slen = strlen( iv_pwd ).'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF t_vers-release >= ''700''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''HTTP_SCRAMBLE'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'SOURCE      = iv_pwd'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'sourcelen   = lv_slen'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'key         = lc_key'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IMPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'destination = iv_pwd.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ELSE.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL ''AB_RFC_X_SCRAMBLE_STRING'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ID ''SOURCE'' FIELD iv_pwd ID ''KEY'' '
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'FIELD lc_key'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ID ''SCR'' FIELD ''X'' ID''DESTINATION'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'FIELD iv_pwd'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ID ''DSTLEN'' FIELD lv_slen.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''FTP_CONNECT'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'user            = iv_user'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'password        = iv_pwd'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'host            = iv_host'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'rfc_destination = lc_dest'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IMPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'handle          = lv_hdl'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXCEPTIONS'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'not_connected   = 1'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'OTHERS          = 2.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF sy-subrc <> 0.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CLEAR et_file_return.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'et_file_return-type = gc_error.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'et_file_return-message = '
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT '''Unable to connect FTP server.''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'APPEND et_file_return.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ELSE.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'clear lv_cmd .'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'concatenate '' cd '' iv_path into lv_cmd'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'separated by '' ''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'REFRESH lt_result.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''FTP_COMMAND'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'handle        = lv_hdl'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'command       = lv_cmd'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'TABLES'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'data          = lt_result'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXCEPTIONS'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'tcpip_error   = 1'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'command_error = 2'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'data_error    = 3.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'clear lv_cmd.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'concatenate ''!rm'' iv_filename into'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lv_cmd separated by '' ''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT ' REFRESH lt_result.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''FTP_COMMAND'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'handle        = lv_hdl'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'command       = lv_cmd'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'TABLES'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'data          = lt_result'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXCEPTIONS'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'tcpip_error   = 1'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'command_error = 2'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'data_error    = 3.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'if sy-subrc ne 0.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'concatenate ''!del'' iv_filename into '
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'lv_cmd separated by '' ''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'REFRESH lt_result.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''FTP_COMMAND'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'handle        = lv_hdl'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'command       = lv_cmd'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'TABLES'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'data          = lt_result'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXCEPTIONS'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'tcpip_error   = 1'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'command_error = 2'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'data_error    = 3.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'if sy-subrc ne 0.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'endif.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'endif.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'concatenate ''del'' iv_filename'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'into lv_cmd separated by '' ''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'REFRESH lt_result.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''FTP_COMMAND'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'handle  = lv_hdl'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'command = lv_cmd'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'TABLES'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'data = lt_result'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXCEPTIONS'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'tcpip_error   = 1'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'command_error = 2'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'data_error    = 3.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF sy-subrc = 0.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CLEAR et_file_return.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'et_file_return-type = gc_success.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT
'et_file_return-message = ''File deleted''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'APPEND et_file_return.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''FTP_DISCONNECT'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'handle = lv_hdl.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'CALL FUNCTION ''RFC_CONNECTION_CLOSE'''
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXPORTING'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'destination = lc_dest'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'EXCEPTIONS'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'OTHERS      = 1.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'IF sy-subrc <> 0.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT ' CLEAR et_file_return.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'et_file_return-type = gc_success.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT
'et_file_return-message = ''Error in RFC .''.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'APPEND et_file_return.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT 'ENDIF.'
INTO cg_rep_tab INDEX cg_tabix.
cg_tabix = cg_tabix + 1.
INSERT REPORT include_name
FROM cg_rep_tab.
Endform."]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Target Technology]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[DEF_I_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_LINE_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36360000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[190]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Retrieve Indexes]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36360000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Retrieve Indexes

import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;

PreparedStatement batchInsert = null;
PreparedStatement batchInsert2 = null;

<% if(odiRef.getOption("GET_INDEXES").equals("1")) { %>
	try {
		batchInsert = repoConnection.prepareStatement("INSERT INTO SNP_REV_KEY(I_MOD, TABLE_NAME, KEY_NAME, CONS_TYPE, IND_ACTIVE, CHECK_FLOW, CHECK_STAT) values (?,?,?, 'I', '1','1','1')");
		batchInsert2 = repoConnection.prepareStatement("INSERT INTO SNP_REV_KEY_COL (I_MOD, TABLE_NAME, KEY_NAME, COL_NAME, POS) values (?,?,?,?,?)");
		
		Hashtable sIndexes = odiSAPERPMetadataHelper.sSAPIndexes;
		sapLogger.log(sapLogger.INFO, "Retrieve Indexes -  sIndexes.size(): "+sIndexes.size());
		
		if(sIndexes != null && sIndexes.size() > 0) {

			Iterator itr =  sT.iterator();
			SAPSearchDetail sapTable = null;
			int tableCount = 1;
			while(itr.hasNext()) {
				sapTable = new SAPSearchDetail();
				sapTable = (SAPSearchDetail) itr.next(); 
				String tableName = sapTable.name + "  "+sapTable.desc;
				sapLogger.log(sapLogger.INFO, "******** Retrieve Indexes - tableName: "+tableName);
				if(tableName.length() > 100) {
					tableName = tableName.substring(0, 99);
				}
				sapLogger.log(sapLogger.INFO, "inserting data into first index table SNP_REV_KEY started...");
				ArrayList idxList = (ArrayList) sIndexes.get(tableName.substring(0,tableName.indexOf(" ")).trim());
				if(idxList == null || idxList.size() == 0) {
					sapLogger.log(sapLogger.INFO, "............. idxList is null or size is 0...........");
					return;
				}
				Iterator idxItr = idxList.iterator();
				SAPTableIndexes sTableIndex = null;
				while(idxItr.hasNext()) {
					sTableIndex = new SAPTableIndexes();
					sTableIndex = (SAPTableIndexes) idxItr.next();

					if(!(sTableIndex.indexName.equals("")) && (!(sTableIndex.indexField.equals("")))) {

						batchInsert.setInt(1,<%=odiRef.getModel("ID")%>);//I_MOD
						batchInsert.setString(2, tableName.trim());//TABLE_NAME
						batchInsert.setString(3,"I_" + sTableIndex.indexName);//KEY_NAME
			
						batchInsert.addBatch();
										
						String []indexField = sTableIndex.indexField.split(";");
						int i = 1;
						for(int x = 0; x < indexField.length; x++) {
							//sapLogger.log(sapLogger.INFO, "Index Name: "+sTableIndex.indexName+", Index Field: "+indexField[x]);
							sapLogger.log(sapLogger.INFO, "inserting data into 2nd index table SNP_REV_KEY_COL started...");
							batchInsert2.setInt(1,<%=odiRef.getModel("ID")%>);//I_MOD
							batchInsert2.setString(2, tableName.trim());//TABLE_NAME
							batchInsert2.setString(3,"I_" + sTableIndex.indexName);//KEY_NAME
							String iField = indexField[x];
							batchInsert2.setString(4, iField);//COL_NAME
							batchInsert2.setInt(5, new Integer(i).intValue());//POS
							batchInsert2.addBatch();
							i++;
			    		} //end of for loop
					} //end of if(!(sTableIndex.indexName.equals("") ....
				}//end of inner while(idxItr.hasNext()) 
			
		} //end of while(itr.hasNext()) ---
		//execute the insert statement
		int []counts2 = batchInsert2.executeBatch();
		int []counts = batchInsert.executeBatch();
		
		repoConnection.commit();
		batchInsert2.close();
		batchInsert.close();
		sapLogger.log(sapLogger.INFO, "Data inserted into index key tables SNP_REV_KEY &  SNP_REV_KEY_COL successfully!!!");
		}//end of if(sIndexes != null && sIndexes.size() > 0) ---
	} catch (BatchUpdateException buexp) {
		sapLogger.log(sapLogger.ERROR, "Batchupdate Exception: Retrieve Indexes - BatchUpdate Count: "+buexp.getMessage());
		throw buexp;
	} catch(Exception e) {
		sapLogger.log(sapLogger.ERROR, "SQL Exception: - Retrieve Indexes --  "+e.printStackTrace());
		//throw e;
	} finally {
		batchInsert2 = null;
		batchInsert = null;
	}//end of finally
<% }; %>//end of if(odiRef.getOption("GET_INDEXES").equals("1")) --
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36361000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[200]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Remove Incomplete Constraints]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36361000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Command Name: Remove Incomplete Constraints
import java.sql.Statement;

Statement stmt1 = null;
Statement stmt2 = null;

try {
	sapLogger.log(sapLogger.INFO, "Incomplete Constraint Deletion started... from SNP_REV_JOIN & SNP_REV_JOIN_COLS tables");
	//Removing incomplete constraints from SNP_REV_JOIN table
	String firstQuery = "DELETE from SNP_REV_JOIN where I_MOD = <%=odiRef.getModel("ID")%>"+
				"and (table_name not in  (select table_name from snp_table where i_mod=<%=odiRef.getModel("ID")%>"+
					"union all select table_name from snp_rev_table where i_mod=<%=odiRef.getModel("ID")%>)"+
				 "or pk_table_name not in  ("+
						"select table_name from snp_table where i_mod=<%=odiRef.getModel("ID")%>"+
						"union all select table_name from snp_rev_table where i_mod=<%=odiRef.getModel("ID")%>))";
	stmt1 = repoConnection.createStatement();
	stmt1.executeUpdate(firstQuery);
			
	//Removing incomplete constraints from SNP_REV_JOIN_COL table
	String secondQuery = "DELETE from SNP_REV_JOIN_COL where I_MOD = <%=odiRef.getModel("ID")%>"+
				"and (fk_table_name not in  (select table_name from snp_table where i_mod=<%=odiRef.getModel("ID")%>"+
					"union all select table_name from snp_rev_table where i_mod=<%=odiRef.getModel("ID")%>)"+
				"or pk_table_name not in  ("+
						"select table_name from snp_table where i_mod=<%=odiRef.getModel("ID")%>"+
						"union all select table_name from snp_rev_table where i_mod=<%=odiRef.getModel("ID")%>))";
	stmt2 = repoConnection.createStatement();
	stmt2.executeUpdate(secondQuery);
	repoConnection.commit();
	stmt1.close();
	stmt2.close();
	sapLogger.log(sapLogger.INFO, "Incomplete Constraint Successfully Deleted from SNP_REV_JOIN & SNP_REV_JOIN_COLS tables");
					 
} catch(Exception ex) {
	sapLogger.log(sapLogger.ERROR, "Remove Incomplete Constraints - SQL Exception: "+ex.getMessage());
	throw ex;
} finally {
	stmt1 = null;
	stmt2 = null;
}//end of finally]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36362000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[210]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Set Metadata]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36362000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[OdiReverseSetMetaData -MODEL=<%=odiRef.getModel("ID")%>]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36363000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[220]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Set Flex Fields]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36363000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Command Name: SetFlexFields

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.BatchUpdateException;
import java.util.ArrayList;
import java.util.Iterator;


PreparedStatement ffInsert = null;
Statement stmt = null;
ResultSet resultSet = null;		

try {
	sapLogger.log(sapLogger.INFO, "Inserting data in SNP_FF_VALUEW table started..... ");
	ffInsert = repoConnection.prepareStatement("INSERT INTO SNP_FF_VALUEW(FF_CODE, I_INSTANCE, I_OBJECTS, SHORT_TXT_VALUE) values(?, ?, ?, ?)");
	stmt = repoConnection.createStatement();
	//Get all tables of the model with no SAP_TABLE_TYPE defined
	String query = "select I_TABLE, TABLE_NAME from SNP_TABLE T "+
	   			"where T.I_MOD = <%=odiRef.getModel("ID")%> AND not exists (select * from SNP_FF_VALUEW FF where "+
	   			"FF.I_INSTANCE = T.I_TABLE and FF.I_OBJECTS = 2400 and FF.FF_CODE = 'SAP_TABLE_TYPE')";
		
	resultSet = stmt.executeQuery(query);

	ArrayList sapTableList = new ArrayList();
	while(resultSet.next()) {
		String tabNameWithoutFF = resultSet.getString("TABLE_NAME").trim();
				
		String tableInstance = resultSet.getString("I_TABLE");
		sapLogger.log(sapLogger.INFO, "Set Flex Fields -- tableInstance: "+tableInstance);
				
		ArrayList tabList = odiSAPERPMetadataHelper.sSAPTables;
		if(tabList.size() == 0 || tabList == null) {
			sapLogger.log(sapLogger.INFO, "SetFlexFields - tabList is null or size is zero");
			return;
		}		
		Iterator itr =  tabList.iterator();
		SAPSearchDetail sapSearchedTable = null;
		
		while(itr.hasNext()) {
			sapSearchedTable = new SAPSearchDetail();
			sapSearchedTable = (SAPSearchDetail)itr.next(); 
			String tableName = (sapSearchedTable.name + "  "+sapSearchedTable.desc).trim();
			String tableType = sapSearchedTable.tableClass;
					
			if(tableType == null || tableType.equalsIgnoreCase("")) {
				throw new Exception("No table information retrieved from SAP for table ...!");
			}
			if(tabNameWithoutFF.equalsIgnoreCase(tableName)) {
				ffInsert.setString(1, "SAP_TABLE_TYPE");//FF_CODE
				ffInsert.setInt(2, new Integer(tableInstance).intValue());//I_INSTANCE
				ffInsert.setInt(3, 2400);//I_OBJECTS
				ffInsert.setString(4, tableType);//SHORT_TXT_VALUE
				ffInsert.addBatch();
				break;
			}
		}//end of while(itr.hasNext()) --
	}//end of while(resultSet.next()) --
	int []counts = ffInsert.executeBatch();
	repoConnection.commit();
	ffInsert.close();
	stmt.close();
	sapLogger.log(sapLogger.INFO, "Data inserted into SNP_FF_VALUEW tables successfully!!!");
			
} catch (BatchUpdateException buexp) {
	sapLogger.log(sapLogger.ERROR, "BatchException: Set Flex Fields: "+buexp.getMessage());
	throw new RuntimeException(buexp);
} catch(Exception e) {
	sapLogger.log(sapLogger.ERROR, "SQLException: SetFlexFields - "+e);
	throw new RuntimeException(e);
} finally {
	ffInsert = null;
} //end of finally]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36364000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[230]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Release Resources]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36364000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Command Name: Release Resources

odiSapERPAdapter.unregisterDataProvider();

//Resource Bundle objects
resourceName = null;
messages = null;

//ArrayList of SAPSubModels objects
sSAPSubModels = null;

//ArrayList of SAPTable objects
sSAPTables = null;
	
//Hashtable of SAP Table Name & SAPField Objects
sSAPFields = null;
	
//Hashtable of SAP Table Names & Primary key SAPPKField Objects
sSAPPKFields = null;
	
//Hashtable -- contains key as SAP Table Name --> Value array list with SAPFKField Objects
sSAPFKFields = null;
	
//Hashtable - contains key as SAP Table Name --> Value array list with SAPIndField Objects
sSAPIndexes = null; 


//Hashtable of Module Name & Description
mModuleName = null; 

//List of Application Component & Tables
mAppCompList = null;

//HashMap of keys as selected tables name & values as their list of fields name
mSelectedTables = null;
	
//ArrayList of deleselected nodes
mUncheckedTable = null;

//local collection object 
tableFieldList			= null;
tableMetadata			= null;
subModels				= null;
listOfPK				= null;
listOfFK				= null;
listOfIndex				= null;
subModelsList			= null;
primaryKeyList			= null;
pkList					= null;
foreignKeyList			= null;
fkList					= null;
indexList				= null;
tableIndexList			= null;
sortedTableList			= null;
sapFieldsObjs			= null;
sapTablesPrimaryKeyList = null;

indexHashTable			= null;
moduleNode              = null; 

// Local Collection objects

	
sapModList				= null;
sapTablesObjs		    = null;
sapTablesIndexesList	= null;
sapSearchDetailObjs	    = null;

tableInfoList           = null;
rowData                 = null;
rowDataTemp             = null;
columnHeader            = null;
filteredList		    = null;
sapSubModelsObj			= null;
sortedAppCompList		= null;   
testTreeMap				= null;
tempList				= null;

hs						= null;

tableName				= null;
sapSearchDtlObj			= null;

subModelDetails			= null;
primaryKeysList			= null;

// ***OdiSAPERPAdapter ****//

//static String variables
GET_SAP_TABLES_RFC_FUNCTION_NAME = null;
GET_SAP_FIELDS_FUNCTION_NAME	 = null;
GET_SAP_TABLES_PK_FK_RFC_NAME	 = null;
GET_SAP_TABLES_INDEXES_RFC_NAME  = null;
logFileName						 = null;
SID								 = null;
SRC_SCHEMA						 = null;
SRC_USER_NAME					 = null;
SRC_PWD							 = null;
SRC_LANGUAGE					 = null;
SRC_HOST_NAME					 = null;
SRC_CATALOG						 = null;
SRC_SYSTEM_ID					 = null;
SRC_ROUTER_STRING				 = null;
Client							 = null;
repository              = null;
ftemplate               = null;
 sapTableObjFilter      = null;
 
 tableListArray         = null;
 sTable1                = null;
 sTable2                = null;
 r                      = null; 
 sPrimaryKeyObj         = null;
  sForeignKeyObj        = null;
  sTableIndexObj        = null;
command	                = null;
strBuffer               = null;
echoProcess             = null;
isFinished              = null;
envIn                   = null;
envLine                 = null;
index                   = null;
tempHome                = null;
name                    = null;
desc                    = null;
type                    = null;
appComp                 = null;
tableClass              = null;  
devClass               = null; 
moduleName             = null;
primaryKeyFieldName    = null;
primaryKeyTabName      = null;
foreignKeyTabName      = null;   
foreignKeyField        = null;
indexName			   = null;
indexField             = null;

// *** OdiSAPLogger ******
//static Variables for all the supported log levels
FATAL		= null;
ERROR		= null;
WARNING		= null;
INFO		= null;
CONFIG		= null;
FINE		= null;
FINER		= null;
FINEST		= null;




// *****OdiSapMetaDataBrowser instance variable  ***********

sWIDTH			        = null;
sHEIGHT			        = null;
jPanelTop		        = null;
jPanelSearch		    = null;
jPanelTree		        = null;
jBottomPanel		    = null;
jPanelGap2		        = null;
jLabelTName		        = null;
jLabelSDesc		        = null;
jLabelAppComp		    = null;
jLabelPkg		        = null;
jTxtFieldTName		    = null;
jTxtFieldSDesc		    = null;
jTxtFieldAppComp	    = null;
jTxtFieldPkg		    = null;
jButtonSearch		    = null;
jButtonCancle		    = null;
jButtonReverse		    = null;
BORDER			        = null;
mModuleName		        = null;


moduleKey		    = null;
moduleDesc		    = null;
tree			    = null;
ivTable			    = null;
ivDesc			    = null;
ivPackg			    = null;
ivAPComp		    = null;
jButtonTLookup		    = null;
jButtonSDescLookup	    = null;
jButtonACompLookup    	    = null;
jButtonPckgLookup	    = null;
isTableNodeSelected	    = null;
mDeleselectedNodeList	    = null;
frame			    = null;
jTreeRootNode		    = null;
jTreeSelectedNode	    = null;
isCancle                    = null;
lookupFrameIcon             = null;
odi_java_home               = null;


//local Variable
fieldList		    = null;
filteredArrayList	    = null;
subMod			    = null;
searchResult		    = null;
al1			    = null;
listener                    = null;
alist2			    = null;
lookupResultList	    = null;




screenHeight            = null;
screenWidth            = null;
iconRoot               = null;

mouseListener         = null;
selectedNodeName     = null;
   
	prevItem            = null;
	sTable              = null;
	iterator            = null;
	tr                  = null;
	fieldNode           = null;
	selectedTable       = null;
	srollpane           = null;
	frameVisible        = null;
	tempSelectedName    = null;
	tempModuleKey       = null;
	result              = null;
	iter                = null;
	countSelectedNodeHyphen = null;
	tempIterator        = null;
	
	filterItr           = null;
	flag                = null;
	checkParent         = null;
	tempHyphen          = null;
	temp                = null;
	len                 = null;
	count               = null;  
    row                 = null; 
	rootObject          = null;
	model               = null;
	 children           = null;
    SearchMod           = null;
	tempModName         = null;
	searchIterator      = null;
  tabNm                 = null;
  modName               = null;
  selectTreePath        = null;
paranetAPPCompName      = null;
subNode                 = null;
prevNode                = null;
appCompName             = null;
child                   = null;
subNode1                = null;
itr2                    = null;
node1                   = null;
percentage              = null;
asterisk                = null;
 searchDetails          = null;

 shortDesc              = null;

	pckg                = null;

		lookupItr       = null;
		jTableLookup    = null;
	cellSelectionModel  = null;
	selectedData        = null;
	selectedRow         = null;
	 selectedColumn     = null;
	 tk                 = null;
	 screenSize         = null;
	
	  parentSubModel    = null;
	  
	  appComponentName  = null;
	  countHyphen       = null;

	        path        = null;
			check       = null;
			label       = null;
	         jPan       = null;
			
 iconModule             = null;
	 iconField          = null;
	 iconTable          = null;
 iconComponent          = null;
	
 iconRootLoc            = null;
	 iconFieldLoc       = null;
 iconTableLoc           = null;
 iconModuleLoc          = null;
checkboxLabel1          = null;
checkboxLabel2          = null;
checkboxLabel3          = null;
tableField              = null;

 

tnode                   = null;
tableField              = null;
imgSrc                  = null;
cusLabel                = null;
stringValue             = null;

isSelected              = null;
hasFocus                = null;
str                     = null;
imageOffset             = null;
currentI                = null;
d_check                 = null;
d_label                 = null;
y_check                 = null;
y_label                 = null;


// ***OdiSAPERPMetadataPopulator *****
 
searchedDataList	    = null;

maskTableName           = null;
sapTableDesc            = null;
sapPackage              = null;
sapModule               = null;
sapAppComp              = null;
tableDesc               = null; 
tableType               = null;
tableInfo               = null;


// *** supporting class objects ****

sField					= null; 
searchDetail			= null;
sTableIndexObj			= null;
sapSearchDetailObj		= null;
sapTableForeignKeyObj	= null;
primaryKeyObj			= null;
sapTablePrimaryKeyObj	= null;
indexKeyObj				= null;
sapTableIndexKeyObj		= null;
searchItr				= null;

//repository connection
repoConnection			= null;


//OdiSAPERPMetadataHelper, odiSapERPAdapter, OdiSAPLogger, OdiSAPERPMetadataPopulator &  OdiSAPERPMetadataPopulator class object
odiSAPERPMetadataHelper		= null;
odiSapERPAdapter		    = null;
odiSAPERPMetadataPopulator	= null;
odiSAPERPMetadataPopulator	= null;
sapLogger			        = null;

sT 			                = null;
show_ui			            = null;
browserFrame		        = null;
odiSAPERPMetadataBrowser 	= null;

/// OdiSAPERPMetadataHelper///




 sSAPIndexes				= null;
selectedTableKeys			= null;
tableInfoItr				= null;
tableMetadataArray			= null;
searchIterator				= null;
keys						= null;
tableNm						= null;
subModelObj					= null;
it							= null;
pkTableKeys					= null;
tableNameKey				= null;
fkTableKeys					= null;
itrFKey						= null;
foreignKeyObj				= null;
indexTableKeys				= null;
itrIndex					= null;

fieldName					= null;
fieldDesc					= null;
fieldDataType				= null;
fieldOffset					= null;
fieldLength					= null;
parentSubModel				= null;
pkItr						= null;
fkItr						= null;
indexItr					= null;
len							= null;
start						= null;

/// OdiSAPERPNode
selected					= null;
node						= null;

/// Get SAP MetaData
plzWait						= null;
contentPane					= null;
emptyLabel					= null;
theLabel					= null;


//Command Name: Retrieve Columns

batchInsert					= null;
sF							= null;
itr							=  null;
sapTable					= null;
tableName					= null;
fieldsList					= null;
fieldItr					= null;
    
sField						= null;
fieldName					= null;
shortDesc					= null;

//Retrieve Foreign Keys
batchInsert2				= null;
getForeignKey				= null;
sFK							= null;
tableItr					= null;
     
fkItr						= null;
counts2						= null;
counts						= null;
//Retrieve Indexes
getIndexes					= null;
sIndexes					= null;
tableCount					= null;
idxList						= null;
idxItr						= null;
sTableIndex					= null;
indexField					= null;

//Retrieve Primary Keys
getPrimaryKey				=  null;
sPK							= null;
pkItr						= null;

//Retrieve Sub Models
sSubModel					= null;
hst							= null;
query						= null;
stmt						= null;
rs							= null;
subModel					= null;
subModelKeys				= null;
subModelList				= null;
sapSubModel					= null;

//Retrieve Tables
tableInsertCount = null;


]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36365000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[70]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Install Get Module RFC]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36365000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[_OdiSAPAbapExecute "-UPLOAD=<%=odiRef.getOption("UPLOAD_ABAP_CODE")%>" "-EXECUTE=0" "-EXECUTE_BASE_RKM=0" "-ZRFC_RUN_INSTALL=1" "-ABAP_PROGRAM_NAME=ZODI_GET_SAP_MODULES" "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>" "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>" "-PASSWORD=<%=odiRef.getInfo("SRC_PASS")%>" "-SAP_CLIENT=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_CLIENT" )?>" "-SAP_LANGUAGE=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_LANGUAGE" )?>" "-SAP_SYSTEM_NUMBER=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_SYSTEM_NUMBER" )?>" "-SAP_FUNCTION_GROUP_NAME=<%=odiRef.getOption("SAP_FUNCTION_GROUP")%>" "-CONNECTION_POOL_NAME=<%=odiRef.getOption("SAP_CONNECTION_POOL")%>" "-CONNECTION_POOL_SIZE=<%=odiRef.getOption("SAP_CONNECTION_POOL_SIZE")%>" "-FILE_DELIMITER=|" "-FTP_TRANSFER_TIMEOUT=100000" "-USER_ABAP_PARAMETER_SEPARATOR=<Value>" "-ABAP_TABLE_PARAMETERS=ET_FILE_RETURN,BAPIRET2;IT_APPLN,ZODI_APPL_COMP" "-LOG_FILE_NAME=<%=odiRef.getOption("LOG_FILE_NAME")%>.opentool.log" "-DEV_CLASS=ZODI_DEVCLASS" "-HASH_VALUE_MARKER=HVM" "-ABAP_PROGRAM_BODY=
TYPES:BEGIN OF lt_comp,
id    TYPE ufps_posid,
desc  TYPE udtext,
END OF lt_comp.

DATA: wa_comp   TYPE lt_comp,
it_comp   TYPE STANDARD TABLE OF lt_comp,
wa_appl   TYPE df14l,
it_appl   TYPE STANDARD TABLE OF df14l,
wa_df14t  TYPE df14t,
it_df14t  TYPE STANDARD TABLE OF df14t,
wa_appln  TYPE zodi_appl_comp.

SELECT * FROM df14l
INTO TABLE it_appl.

IF NOT it_appl IS INITIAL.

SELECT * FROM df14t
INTO TABLE it_df14t
FOR ALL ENTRIES IN it_appl
WHERE langu  = 'EN'
AND   addon  = ' '
AND   fctr_id  = it_appl-fctr_id
AND   as4local = 'A'.

ENDIF.

SORT it_df14t BY fctr_id.
SORT it_appl  BY fctr_id.

LOOP AT it_appl INTO wa_appl.

READ TABLE it_df14t INTO wa_df14t WITH KEY 
fctr_id  = wa_appl-fctr_id
BINARY SEARCH.

IF sy-subrc EQ 0.

wa_comp-id    = wa_appl-ps_posid.
wa_comp-desc  = wa_df14t-name.
APPEND wa_comp TO it_comp.

ENDIF.

ENDLOOP.

SORT it_comp BY id ASCENDING.

LOOP AT it_comp INTO wa_comp.

SEARCH wa_comp-id FOR '-'.

IF sy-subrc NE 0.

wa_appln  = wa_comp.
APPEND wa_appln TO it_appln.

ENDIF.
ENDLOOP.

DELETE ADJACENT DUPLICATES FROM 
it_appln COMPARING appl_comp.

SORT it_appln BY appl_comp ASCENDING."]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36366000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[90]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Install Get Fields RFC]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36366000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[_OdiSAPAbapExecute "-UPLOAD=<%=odiRef.getOption("UPLOAD_ABAP_CODE")%>" "-EXECUTE=0" "-EXECUTE_BASE_RKM=0" "-ZRFC_RUN_INSTALL=1" "-ABAP_PROGRAM_NAME=Z_ODI_RFC_READ_TABLE" "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>" "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>" "-PASSWORD=<%=odiRef.getInfo("SRC_PASS")%>" "-SAP_CLIENT=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_CLIENT" )?>" "-SAP_LANGUAGE=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_LANGUAGE" )?>" "-SAP_SYSTEM_NUMBER=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_SYSTEM_NUMBER" )?>" "-SAP_FUNCTION_GROUP_NAME=<%=odiRef.getOption("SAP_FUNCTION_GROUP")%>" "-CONNECTION_POOL_NAME=<%=odiRef.getOption("SAP_CONNECTION_POOL")%>" "-CONNECTION_POOL_SIZE=<%=odiRef.getOption("SAP_CONNECTION_POOL_SIZE")%>"  "-FILE_DELIMITER=|" "-FTP_TRANSFER_TIMEOUT=100000" "-USER_ABAP_PARAMETER_NAMES=QUERY_TABLE,CHAR30;DELIMITER,CHAR1;NO_DATA,CHAR1;ROWSKIPS,SOID-ACCNT;ROWCOUNT,SOID-ACCNT" "-USER_ABAP_PARAMETER_VALUES=<Value>" "-USER_ABAP_PARAMETER_SEPARATOR=<Value>" "-ABAP_TABLE_PARAMETERS=OPTIONS,RFC_DB_OPT;FIELDS,ZODI_RFC_DB_FLD;DATA,TAB512;ET_RETURN,ZRETURN" "-ABAP_EXCEPTION_PARAMETERS=TABLE_NOT_AVAILABLE;TABLE_WITHOUT_DATA;OPTION_NOT_VALID;FIELD_NOT_VALID;NOT_AUTHORIZED;DATA_BUFFER_EXCEEDED" "-ABAP_EXPORT_PARAMETERS=<Values>" "-LOG_FILE_NAME=<%=odiRef.getOption("LOG_FILE_NAME")%>.opentool.log" "-HASH_VALUE_MARKER=HVM" "-ABAP_PROGRAM_BODY=
CALL FUNCTION 'VIEW_AUTHORITY_CHECK'
EXPORTING
view_action                    = 'S'
view_name                      = 
query_table
EXCEPTIONS
no_authority                   = 2
no_clientindependent_authority = 3
table_not_found                = 4.
IF sy-subrc = 2 OR sy-subrc = 3.
et_return-stat_msg_type = 'E'.
et_return-stat_msg_desc = 'Not Authorized'.
APPEND et_return.
CLEAR et_return.
RAISE not_authorized.
ELSEIF sy-subrc = 1.
et_return-stat_msg_type = 'E'.
et_return-stat_msg_desc = 'table not available'.
APPEND et_return.
CLEAR et_return.
RAISE table_not_available.
ENDIF.
DATA BEGIN OF table_structure OCCURS 10.
INCLUDE STRUCTURE dntab.
DATA END OF table_structure.
DATA table_header LIKE x030l.
DATA: BEGIN OF it_dd03l OCCURS 0,
tabname     TYPE   tabname,
fieldname   TYPE fieldname,
notnull     TYPE notnull,
leng        TYPE leng,
END OF it_dd03l .
CALL FUNCTION 'NAMETAB_GET'
EXPORTING
tabname             = query_table
IMPORTING
header              = table_header
TABLES
nametab             = table_structure
EXCEPTIONS
table_has_no_fields = 01
table_not_activ     = 02
internal_error      = 03
no_texts_found      = 04.
IF sy-subrc > 1.
et_return-stat_msg_type = 'E'.
et_return-stat_msg_desc = 'table not available'.
APPEND et_return.
CLEAR et_return.
RAISE table_not_available.
ENDIF.
IF sy-subrc = 1 OR table_header-tabform CN
'TCPV'.
et_return-stat_msg_type = 'E'.
et_return-stat_msg_desc = 'table without data'.
APPEND et_return.
CLEAR et_return.
RAISE table_without_data.
ENDIF.
DATA line_length TYPE i.
FIELD-SYMBOLS <d>.
ASSIGN COMPONENT 0 OF STRUCTURE data TO <d>.
DATA number_of_fields TYPE i.
DESCRIBE TABLE fields LINES number_of_fields.
IF number_of_fields = 0.
SELECT tabname fieldname notnull
INTO TABLE it_dd03l
FROM dd03l
WHERE tabname = query_table.
LOOP AT table_structure.
MOVE table_structure-fieldname TO
fields-fieldname.
READ TABLE it_dd03l WITH KEY tabname   =
table_structure-tabname
fieldname = table_structure-fieldname.
fields-notnull = it_dd03l-notnull.
APPEND fields.
CLEAR: table_structure, it_dd03l.
ENDLOOP.
ENDIF.
TYPES : BEGIN OF ty_field_int.
INCLUDE STRUCTURE ZODI_RFC_DB_FLD.
TYPES inttype.
TYPES: END OF ty_field_int.
DATA : it_output_fields TYPE TABLE OF
ty_field_int WITH HEADER LINE.
DATA : lv_leng TYPE dd03l-leng.
DATA : lv_rollname TYPE dd03l-rollname.
DATA: BEGIN OF fields_int OCCURS 10,
type LIKE
table_structure-inttype,
decimals   LIKE
table_structure-decimals,
length_src LIKE
table_structure-intlen,
length_dst LIKE
table_structure-ddlen,
offset_src LIKE
table_structure-offset,
offset_dst LIKE
table_structure-offset,
END OF fields_int,
line_cursor TYPE i.
line_cursor = 0.
LOOP AT fields.
SELECT SINGLE rollname
INTO lv_rollname
FROM dd03l
WHERE fieldname = fields-fieldname
and tabname = query_table .
SELECT SINGLE leng
INTO lv_leng
FROM dd04l
WHERE rollname = lv_rollname .
READ TABLE table_structure WITH KEY
fieldname = fields-fieldname.
IF sy-subrc NE 0.
et_return-stat_msg_type = 'E'.
et_return-stat_msg_desc =
'field not valid'.
APPEND et_return.
CLEAR et_return.
RAISE field_not_valid.
ENDIF.
IF line_cursor <> 0.
IF no_data EQ space AND delimiter NE space.
MOVE delimiter TO data+line_cursor.
ENDIF.
line_cursor = line_cursor + 
STRLEN( delimiter ).
ENDIF.
fields_int-length_src = 
table_structure-intlen.
fields_int-length_dst = 
table_structure-ddlen.
fields_int-offset_src = 
table_structure-offset.
fields_int-offset_dst = 
line_cursor.
fields_int-decimals   = 
table_structure-decimals.
line_cursor = line_cursor + 
table_structure-ddlen.
IF line_cursor > line_length AND no_data 
EQ space.
et_return-stat_msg_type = 'E'.
et_return-stat_msg_desc = 
'data buffer exceeded'.
APPEND et_return.
CLEAR et_return.
RAISE data_buffer_exceeded.
ENDIF.
APPEND fields_int.
fields-fieldtext   = 
table_structure-fieldtext.
fields-datatype    = 
table_structure-datatype.
fields-decimals    = fields_int-decimals  .
fields-offset      = fields_int-offset_dst.
fields-length      = lv_leng.
MODIFY fields.
CLEAR : lv_rollname, lv_leng.
ENDLOOP.
IF no_data EQ space.
DATA: BEGIN OF work, buffer(30000), 
END OF work.
FIELD-SYMBOLS <f>.
IF rowcount > 0.
rowcount = rowcount + rowskips.
ENDIF.
SELECT * FROM (query_table) INTO work 
WHERE (options).
IF sy-dbcnt GT rowskips.
LOOP AT fields_int.
IF fields_int-type = 'P'.
ASSIGN     
work+fields_int-offset_src(fields_int-length_src)
TO <f>
TYPE     fields_int-type
DECIMALS fields_int-decimals.
ELSE.
ASSIGN     
work+fields_int-offset_src(fields_int-length_src)
TO <f>
TYPE     fields_int-type.
ENDIF.
MOVE <f> TO  
<d>+fields_int-offset_dst(fields_int-length_dst).
ENDLOOP.
APPEND data.
IF rowcount > 0 AND sy-dbcnt GE rowcount.
EXIT. 
ENDIF.
ENDIF.
ENDSELECT.
ENDIF."
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36367000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[100]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Install Get Table Keys RFC]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36367000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[_OdiSAPAbapExecute "-UPLOAD=<%=odiRef.getOption("UPLOAD_ABAP_CODE")%>" "-EXECUTE=0" "-EXECUTE_BASE_RKM=0" "-ZRFC_RUN_INSTALL=1" "-ABAP_PROGRAM_NAME=Z_ODI_RFC_TABLE_KEYS" "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>" "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>" "-PASSWORD=<%=odiRef.getInfo("SRC_PASS")%>" "-SAP_CLIENT=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_CLIENT" )?>" "-SAP_LANGUAGE=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_LANGUAGE" )?>" "-SAP_SYSTEM_NUMBER=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_SYSTEM_NUMBER" )?>" "-SAP_FUNCTION_GROUP_NAME=<%=odiRef.getOption("SAP_FUNCTION_GROUP")%>" "-CONNECTION_POOL_NAME=<%=odiRef.getOption("SAP_CONNECTION_POOL")%>" "-CONNECTION_POOL_SIZE=<%=odiRef.getOption("SAP_CONNECTION_POOL_SIZE")%>" "-FILE_DELIMITER=|" "-FILE_NAME=<Value>" "-FTP_HOST=<value>" "-FTP_USER=<value>" "-FTP_PASSWORD=<value>" "-FTP_PASSIVE_MODE=<value>"  "-FTP_TRANSFER_TIMEOUT=100000" "-USER_ABAP_PARAMETER_NAMES=IV_TABLE_NAME,CHAR30;IV_ALL_KEYS,CHAR1" "-USER_ABAP_PARAMETER_VALUES=<Value>" "-USER_ABAP_PARAMETER_SEPARATOR=<Value>" "-ABAP_TABLE_PARAMETERS=ET_PRI_KEYS_TABLE,ZODI_S_PK;ET_FOR_KEYS_TABLE,ZODI_S_FK;ET_RETURN,ZRETURN" "-ABAP_EXCEPTION_PARAMETERS=<Value>" "-ABAP_EXPORT_PARAMETERS=<Values>" "-LOG_FILE_NAME=<%=odiRef.getOption("LOG_FILE_NAME")%>.opentool.log" "-DEV_CLASS=ZODI_DEVCLASS" "-MAX_ROW_COUNT=<Value>" "-HASH_VALUE_MARKER=HVM" "-ABAP_PROGRAM_BODY=
DATA BEGIN OF table_structure OCCURS 10.
INCLUDE STRUCTURE dntab.
DATA END OF table_structure.
DATA table_header LIKE x030l.
DATA : table_dd05m TYPE STANDARD TABLE OF 
dd05m WITH HEADER LINE.
DATA table LIKE dcobjdef-name.
table  = iv_table_name.
CALL FUNCTION 'NAMETAB_GET'
EXPORTING
tabname             = iv_table_name
IMPORTING
header              = table_header
TABLES
nametab             = table_structure
EXCEPTIONS
table_has_no_fields = 01
table_not_activ     = 02
internal_error      = 03
no_texts_found      = 04.
LOOP AT table_structure WHERE keyflag = 'X'
OR checktable NE space.
IF iv_all_keys = space.
IF table_structure-keyflag = 'X'.
et_pri_keys_table-pri_key_tabnam = 
table_structure-tabname.
et_pri_keys_table-pri_key_field  = 
table_structure-fieldname.
APPEND et_pri_keys_table.
CLEAR: table_structure, 
et_pri_keys_table.
ENDIF.
ELSE.
*      IF table_structure-keyflag = 'X'.
IF NOT table_structure-checktable IS 
INITIAL.
et_for_keys_table-table_name  = 
table_structure-tabname.
et_for_keys_table-field_name  = 
table_structure-fieldname.
et_for_keys_table-fk_table_name = 
table_structure-checktable.
*       et_for_keys_table-fk_field_name = 
*       table_structure-fieldname.
SELECT SINGLE ddtext INTO 
et_for_keys_table-fk_table_text FROM dd02t
WHERE tabname = table_structure-checktable
and ddlanguage = sy-langu.
CALL FUNCTION 'DD_FKEYS_GET'
EXPORTING
name                 = table
state                = 'A'
langu                = 'E'
TABLES
*   DD03P_TAB            =
dd05m_tab            = table_dd05m
*   DD08V_TAB            =
EXCEPTIONS
illegal_input        = 1
not_found            = 2
expand_failure       = 3
OTHERS               = 4.
IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY 
*  NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 
* SY-MSGV4.
ENDIF.
READ TABLE table_dd05m WITH KEY 
fieldname = table_structure-fieldname
forkey   = table_structure-fieldname.
IF sy-subrc = 0.
et_for_keys_table-fk_field_name = 
table_dd05m-checkfield.
ENDIF.
APPEND et_for_keys_table.
ENDIF.
CLEAR: table_structure, et_for_keys_table.
ENDIF.
ENDLOOP.
IF sy-subrc NE 0.
*    RAISE table_not_available.
ENDIF."
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:10.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36368000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[110]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Install Get Table Indexes RFC]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36368000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[_OdiSAPAbapExecute "-UPLOAD=<%=odiRef.getOption("UPLOAD_ABAP_CODE")%>" "-EXECUTE=0"  "-EXECUTE_BASE_RKM=0" "-ZRFC_RUN_INSTALL=1" "-ABAP_PROGRAM_NAME=Z_ODI_RFC_GET_TABLE_INDEXES" "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>" "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>" "-PASSWORD=<%=odiRef.getInfo("SRC_PASS")%>" "-SAP_CLIENT=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_CLIENT" )?>" "-SAP_LANGUAGE=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_LANGUAGE" )?>" "-SAP_SYSTEM_NUMBER=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_SYSTEM_NUMBER" )?>" "-SAP_FUNCTION_GROUP_NAME=<%=odiRef.getOption("SAP_FUNCTION_GROUP")%>" "-CONNECTION_POOL_NAME=<%=odiRef.getOption("SAP_CONNECTION_POOL")%>" "-CONNECTION_POOL_SIZE=<%=odiRef.getOption("SAP_CONNECTION_POOL_SIZE")%>"  "-FILE_DELIMITER=|" "-FTP_TRANSFER_TIMEOUT=100000" "-USER_ABAP_PARAMETER_NAMES=IV_QUERY_TABLE,CHAR30;" "-USER_ABAP_PARAMETER_VALUES=<Value>" "-USER_ABAP_PARAMETER_SEPARATOR=<Value>" "-ABAP_TABLE_PARAMETERS=ET_TABLE_INDEX_LIST,ZODI_BAPI_S_TBL_INDEX_LIST;ET_RETURN,ZRETURN" "-ABAP_EXCEPTION_PARAMETERS=TABLE_NOT_AVAILABLE;SECONDARY_INDEX_NOT_AVAILABLE" "-ABAP_EXPORT_PARAMETERS=<Values>" "-LOG_FILE_NAME=<%=odiRef.getOption("LOG_FILE_NAME")%>.opentool.log" "-OPENHUB_DESTINATION=<Value>" "-DEV_CLASS=ZODI_DEVCLASS" "-HASH_VALUE_MARKER=HVM" "-ABAP_PROGRAM_BODY=
DATA: lt_dd12l TYPE TABLE OF dd12l.
DATA: wa_dd12l LIKE LINE  OF lt_dd12l.
DATA: lt_dd17s TYPE TABLE OF dd17s.
DATA: wa_dd17s LIKE LINE  OF lt_dd17s.
SELECT * FROM dd12l  INTO TABLE lt_dd12l WHERE
sqltab = iv_query_table.
IF sy-subrc > 1.
et_return-stat_msg_type = 'E'.
et_return-stat_msg_desc = 'table not available'.
APPEND et_return.
CLEAR et_return.
RAISE table_not_available.
ENDIF.
LOOP AT lt_dd12l INTO wa_dd12l.
SELECT * FROM dd17s  INTO TABLE lt_dd17s WHERE
sqltab = wa_dd12l-sqltab
AND indexname = wa_dd12l-indexname.
IF sy-subrc > 1.
et_return-stat_msg_type = 'E'.
et_return-stat_msg_desc ='sec index unavailable'.
APPEND et_return.
CLEAR et_return.
RAISE table_not_available.
ENDIF.
MOVE wa_dd12l-indexname TO 
et_table_index_list-indexname.
LOOP AT lt_dd17s INTO wa_dd17s.
IF sy-tabix = 1.
MOVE wa_dd17s-fieldname TO 
et_table_index_list-indexfields.
ELSE.
CONCATENATE et_table_index_list-indexfields 
wa_dd17s-fieldname INTO
et_table_index_list-indexfields 
SEPARATED BY ';'.
ENDIF.
ENDLOOP.
APPEND et_table_index_list.
ENDLOOP."
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36369000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[120]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Reset SNP_REV tables]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36369000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[OdiReverseResetTable -MODEL=<%=odiRef.getModel("ID")%>]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36370000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Get SAP Metadata]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36370000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Command Name: Get SAP Metadata


//Show SAP metadata on the basis of USE_GUI option
JFrame browserFrame = null;
OdiSAPERPMetadataBrowser  odiSAPERPMetadataBrowser = null;
OdiSAPERPMetadataPopulator odiSAPERPMetadataPopulator = null;
JDialog plzWait = new JDialog();


<%if(odiRef.getOption("USE_GUI").equals("1")) {%>
	sapLogger.log(sapLogger.INFO, "USE_GUI = Yes");
	odiSAPERPMetadataBrowser = new OdiSAPERPMetadataBrowser(odiSapERPAdapter, sapLogger, odiSAPERPMetadataHelper);
	browserFrame = odiSAPERPMetadataBrowser.frame;
	//Wait loop unti user selection is done i.e user clicks either Cancel/ReverseMetadata button
	while(true) {
		if(browserFrame.isVisible())
			continue;
		else
			break;
	}
	if(odiSAPERPMetadataBrowser.isCancle) {
		throw new Exception("Reversing canceled / aborted!!!");
	}
<%} else {%>
	sapLogger.log(sapLogger.INFO, "USE_GUI = No");	
	odiSAPERPMetadataPopulator = new OdiSAPERPMetadataPopulator(odiSapERPAdapter, sapLogger, odiSAPERPMetadataHelper);

	odiSAPERPMetadataPopulator.populateSearchData();
	sapLogger.log(sapLogger.INFO,"Reversing Metadata Started......");
<%};%>
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36371000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[140]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Retrieve Sub Models]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36371000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Retrieve Sub Models

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.BatchUpdateException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;

PreparedStatement batchInsert = null;
		
try {
	Hashtable sSubModel = odiSAPERPMetadataHelper.sSAPSubModels;
	sapLogger.log(sapLogger.INFO, "Retrieve Sub Models>>>>> :"+sSubModel.size());
			
	if(sSubModel != null && sSubModel.size() > 0) {
				
		sapLogger.log(sapLogger.INFO, "Taking data of existing module started");  
		Hashtable hst = new Hashtable();
		//getting list of all existing sub_models to avoid unique constraints exception during insertion
		String query = "SELECT SMOD_CODE from SNP_REV_SUB_MODEL";
		Statement stmt = repoConnection.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		while(rs.next()){
			String subModel = rs.getString("SMOD_CODE");
			hst.put(subModel, "");
			sapLogger.log(sapLogger.INFO, "sub Model from Rev table: "+subModel);
		}

		sapLogger.log(sapLogger.INFO, "inserting data into SNP_REV_SUB_MODEL table -- started...");
		batchInsert = repoConnection.prepareStatement("INSERT INTO SNP_REV_SUB_MODEL (I_MOD, SMOD_CODE, SMOD_NAME, SMOD_PARENT_CODE, IND_INTEGRATION,  REV_APPY_PATTERN) values (<%=odiRef.getModel("ID")%>, ?,?, ?, '0', '0')");
				
		Enumeration subModelKeys = sSubModel.keys();

		while ( subModelKeys.hasMoreElements()) {
	        	String tableNm = subModelKeys.nextElement().toString().trim();
	        		
	        	sapLogger.log(sapLogger.INFO, "Retrieve SubModels -  tableName: "+tableNm);
	        		
	        	ArrayList subModelList = (ArrayList) sSubModel.get( tableNm );

	        	Iterator itr =  subModelList.iterator();
	        	SAPSubModels sapSubModel = null;
	        	while(itr.hasNext()) {
	        		sapSubModel = new SAPSubModels();
	        		sapSubModel = (SAPSubModels)itr.next(); 
	        			
	        		if(!(hst.containsKey(sapSubModel.appCompName))) {
	        			batchInsert.setString(1, (sapSubModel.appCompName).trim());
	        			batchInsert.setString(2, (sapSubModel.appCompName).trim());
					//sapLogger.log(sapLogger.INFO, "Retrieve subModels - SMOD_CODE: "+sapSubModel.appCompName);		
	        			if(sapSubModel.paranetAPPCompName != null) {
						sapLogger.log(sapLogger.INFO, "Retrieve subModels - SMOD_PARENT_CODE: "+(sapSubModel.paranetAPPCompName).trim());
	        				batchInsert.setString(3, (sapSubModel.paranetAPPCompName).trim());
					}else {
	        				batchInsert.setNull(3, java.sql.Types.VARCHAR);
	        			}
	        			batchInsert.addBatch();
	        		}//end of if(!(hs.containsKey(sapSubModel.appCompName))) --
	        	}//end of while(itr.hasNext()) --
		}//end of while ( subModelKeys.hasMoreElements())
	//execute the insert statement
	batchInsert.executeBatch();
	repoConnection.commit();
	batchInsert.close();
	sapLogger.log(sapLogger.INFO, "Data inserted successfully into SNP_REV_SUB_MODEL table");
	} //end of if(sSubModel != null && sSubModel.size() > 0) 
} catch (BatchUpdateException buexp) {
	sapLogger.log(sapLogger.ERROR, "Exception: Retrieve Sub Models - BatchUpdate Count: "+buexp.getMessage());
	throw buexp;
} catch(Exception e) {
	sapLogger.log(sapLogger.ERROR, "Retrieve Sub Models - SQL Exception: "+e.printStackTrace());
	throw e;
} finally {
	batchInsert = null;
} //end of finally]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36372000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[150]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Retrieve Tables]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36372000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Retrieve Tables
import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;


PreparedStatement batchInsert = null;
ArrayList sT;

try {

	sT = odiSAPERPMetadataHelper.sSAPTables; //getting table list
	if(sT != null && sT.size() > 0) {
		sapLogger.log(sapLogger.INFO, "Retrieve Tables - sT.size(): "+sT.size());

		sapLogger.log(sapLogger.INFO, "inserting data into table SNP_REV_TABLE - SAP Tables started....");  
		batchInsert = repoConnection.prepareStatement("INSERT INTO SNP_REV_TABLE (I_MOD, TABLE_NAME, RES_NAME, TABLE_ALIAS, TABLE_TYPE, TABLE_DESC, SMOD_CODE, R_COUNT, IND_SHOW) values (?,?,?,?, 'T', ?, ?, 1, '1')");

		Iterator itr =  sT.iterator();
		SAPSearchDetail sapTable = null;
		int i = 1;
		while(itr.hasNext()) {
			sapTable = new SAPSearchDetail();
			sapTable = (SAPSearchDetail)itr.next(); 

			String tableName = sapTable.name + "  "+sapTable.desc;
			if(tableName.length() > 100) {
				tableName = tableName.substring(0, 99);
			}
			sapLogger.log(sapLogger.INFO, "Retrieve Tables - Model ID: "+<%=odiRef.getModel("ID")%>);
			batchInsert.setInt(1, <%=odiRef.getModel("ID")%>); //I_MOD
			batchInsert.setString(2, tableName.trim()); //TABLE_NAME
			batchInsert.setString(3, sapTable.name); //RES_NAME
			batchInsert.setString(4, sapTable.name); //TABLE_ALIAS
			batchInsert.setString(5, sapTable.desc); //TABLE_DESC
			sapLogger.log(sapLogger.INFO, "Retrieve Tables - sapTable.moduleName: "+(sapTable.moduleName).trim());
			if(sapTable.moduleName != null) {
				sapLogger.log(sapLogger.INFO, "Retrieve Tables - putting module name&&&&: "+(sapTable.moduleName).trim());
				batchInsert.setString(6, (sapTable.moduleName).trim());
			} else {
				batchInsert.setNull(6, java.sql.Types.VARCHAR);
			}

			batchInsert.addBatch();
			i++;
		}//end of inner while(fieldItr.hasNext()) 
		int []tableInsertCount = batchInsert.executeBatch();
		repoConnection.commit();
		batchInsert.close();
		sapLogger.log(sapLogger.INFO, "Data inserted successfully into -- SNP_REV_TABLE table");
	} //end of while(itr.hasNext()) {
} catch (BatchUpdateException buexp) {
	sapLogger.log(sapLogger.ERROR, "Exception in BatchUpdate: Retrieve Tables - BatchUpdate Count: "+buexp.getUpdateCounts());
	throw buexp;
} catch(Exception e) {
	sapLogger.log(sapLogger.ERROR, "SQL Exception: Retrieve Tables -  "+e.printStackTrace());
	throw e;
} finally {
	batchInsert = null;
}//end of finally block]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36373000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[160]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Retrieve Columns]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36373000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Command Name: Retrieve Columns

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.BatchUpdateException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;


PreparedStatement batchInsert = null;

try {
	sapLogger.log(sapLogger.INFO, "inserting data into table SNP_REV_COL - table column started....") ;
			
	Hashtable sF = odiSAPERPMetadataHelper.sSAPFields;
	sapLogger.log(sapLogger.INFO, ">>Retrieve Columns -  sF.size(): "+sF.size());

	if(sF != null && sF.size() > 0) {
		batchInsert = repoConnection.prepareStatement("insert into SNP_REV_COL(I_MOD,TABLE_NAME,COL_NAME,COL_HEADING,COL_DESC,DT_DRIVER,POS,LONGC,SCALEC,BYTES,COL_MANDATORY,CHECK_FLOW,CHECK_STAT) values (?,?,?,?,?,?,?,?,?,?,?,?,?)");

		Iterator itr =  sT.iterator();
		SAPSearchDetail sapTable = null;
		while(itr.hasNext()) {
			sapTable = new SAPSearchDetail();
			sapTable = (SAPSearchDetail)itr.next(); 
			String tableName = sapTable.name + "  "+sapTable.desc;
			if(tableName.length() > 100) {
				tableName = tableName.substring(0, 99);
			}
			sapLogger.log(sapLogger.INFO, "Retrieve Columns -- tableName: "+tableName);

			ArrayList fieldsList = (ArrayList) sF.get(tableName.substring(0,tableName.indexOf(" ")).trim());
			sapLogger.log(sapLogger.INFO, "Retrieve Columns -  fieldsList.size(): "+fieldsList.size());
			Iterator fieldItr = fieldsList.iterator();
			int i = 0;
			SAPField sField = null;
			while(fieldItr.hasNext()) {
				sField = new SAPField();
				sField  = (SAPField) fieldItr.next();
				batchInsert.setInt(1, <%=odiRef.getModel("ID")%>); //I_MOD
				batchInsert.setString(2, tableName.trim()); //TABLE_NAME

				String fieldName = sField.name;
				if(fieldName.length() > 100) {
					fieldName = fieldName.substring(0, 99);
				}
				batchInsert.setString(3, fieldName); //COL_NAME
				String shortDesc = sField.desc;
				if(shortDesc.length() > 35) {
					shortDesc = shortDesc.substring(0,33);
				}
				batchInsert.setString(4, shortDesc); //COL_HEADING (short desc)
				batchInsert.setString(5, sField.desc); //COL_DESC
				batchInsert.setString(6, sField.dataType); //DT_DRIVER
				batchInsert.setInt(7, new Integer(i).intValue()); //POS
				batchInsert.setInt(8, new Integer(sField.length).intValue()); //LONGC
				batchInsert.setInt(9, new Integer(sField.decimal).intValue()); //SCALEC
				batchInsert.setInt(10, 0); //BYTES
				//sapLogger.log(sapLogger.INFO, "Retrieve Columns -- Column name: "+sField.name);
				if(sField.notnull.equalsIgnoreCase("X")) {
					batchInsert.setString(11, "1"); //COL_MANDATORY
				}else {
					batchInsert.setString(11, "0"); //COL_MANDATORY
				}
				batchInsert.setString(12, "1"); //CHECK_FLOW
				batchInsert.setString(13, "1"); //CHECK_STAT
				batchInsert.addBatch();
				i++;
			}//end of inner while(fieldItr.hasNext()) 
		} //end of while(itr.hasNext()) {
		//execute the insert statement
		batchInsert.executeBatch();
		repoConnection.commit();
		batchInsert.close();
		sapLogger.log(sapLogger.INFO, "Data inserted into table SNP_REV_COL table successfully.") ;
	}//end of if(sF != null && sF.size() > 0) {
} catch (BatchUpdateException buexp) {
	sapLogger.log(sapLogger.ERROR, "Exception: Retrieve Columns - BatchUpdate Count: "+buexp.getMessage());
	throw buexp;
} catch(Exception e) {
	sapLogger.log(sapLogger.ERROR, "Retrieve Columns - SQL Exception: "+e.printStackTrace());
	throw e;
} finally {
	batchInsert = null;
} //end of finally block]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36374000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[170]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Retrieve Foreign Keys]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36374000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Retrieve Foreign Keys
import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;


PreparedStatement batchInsert = null;
PreparedStatement batchInsert2 = null;

<% if(odiRef.getOption("GET_FOREIGN_KEYS").equals("1")) { %>
	
	try {
		batchInsert = repoConnection.prepareStatement("INSERT INTO SNP_REV_JOIN(I_MOD, FK_NAME, TABLE_NAME, FK_TYPE, PK_CATALOG, PK_SCHEMA, PK_TABLE_NAME, CHECK_STAT, CHECK_FLOW, IND_ACTIVE, DEFER, UPD_RULE, DEL_RULE) values (?,?,?,?,?,?,?,?,?,?,?,?,?)");
		batchInsert2 = repoConnection.prepareStatement("INSERT INTO SNP_REV_JOIN_COL (I_MOD, FK_NAME, FK_COL_NAME, FK_TABLE_NAME, PK_COL_NAME, PK_TABLE_NAME, POS) values (?,?,?,?,?,?,?)");

		Hashtable sFK = odiSAPERPMetadataHelper.sSAPFKFields;
		sapLogger.log(sapLogger.INFO, "Retrieve Foreign Keys - Number of table: "+sFK.size());
		if(sFK != null && sFK.size() > 0) {
			sapLogger.log(sapLogger.INFO, "Inserting Data into FOREIGN KEY TABLES started.....");
			Iterator tableItr =  sT.iterator();
			SAPSearchDetail sapTable = null;
			int i = 1;
			while(tableItr.hasNext()) {
				sapTable = new SAPSearchDetail();
				sapTable = (SAPSearchDetail)tableItr.next(); 
				String tableName = sapTable.name + "  "+sapTable.desc;
				if(tableName.length() > 100) {
					tableName = tableName.substring(0, 99);
				}
				ArrayList fkList = (ArrayList) sFK.get(tableName.substring(0,tableName.indexOf(" ")).trim());
				if(fkList == null || fkList.size() == 0) {
					sapLogger.log(sapLogger.INFO, "............. foreign key List is null or size is 0...........");
					return;
				}

				Iterator fkItr = fkList.iterator();
				sapLogger.log(sapLogger.INFO, "Retrieve Foreign key size :"+fkList.size());
		
				SAPTableForeignKey sFKField = null;				
				while(fkItr.hasNext()) {
					sFKField = new SAPTableForeignKey();
					sFKField = (SAPTableForeignKey)fkItr.next();
					//sapLogger.log(sapLogger.INFO, ">>>sFKField.foreignKeyTabName:  "+sFKField.foreignKeyTabName);
							
					if(!(sFKField.foreignKeyTabName.equals("")) && (!(sFKField.foreignKeyField.equals("")))) {
						
							
						batchInsert.setInt(1, <%=odiRef.getModel("ID")%>);//I_MOD				
						batchInsert.setString(2, "FK_" + sFKField.primaryKeyField+"_"+sFKField.primaryKeyTabName);//FK_NAME
						batchInsert.setString(3, tableName.trim());//TABLE_NAME
						batchInsert.setString(4, "D");//FK_TYPE
						batchInsert.setString(5, "");//PK_CATALOG
						batchInsert.setString(6, "");//PK_SCHEMA
						String fkTableName = sFKField.foreignKeyTabName + "  "+sFKField.foreignKeyTableDesc;
						if(fkTableName.length() > 100) {
							fkTableName = fkTableName.substring(0, 99);
						}
						//sapLogger.log(sapLogger.INFO, "Retrieve Foreign Key - fkTableName: "+fkTableName);
						batchInsert.setString(7, fkTableName);//PK_TABLE_NAME
						//batchInsert.setString(7, sFKField.foreignKeyTabName);//PK_TABLE_NAME
						batchInsert.setString(8, "1");//CHECK_STAT
						batchInsert.setString(9, "1");//CHECK_FLOW
						batchInsert.setString(10, "1");//IND_ACTIVE
						batchInsert.setString(11, "");//DEFER
						batchInsert.setString(12, "");//UPD_RULE
						batchInsert.setString(13, "");//DEL_RULE

						batchInsert.addBatch();
						
						//Inserting data into 2nd foreign key table SNP_REV_JOIN_COL	
						batchInsert2.setInt(1, <%=odiRef.getModel("ID")%>);//I_MOD
						//sapLogger.log(sapLogger.INFO, "odiRef.getModel(ID): "+<%=odiRef.getModel("ID")%>+", FK_NAME: FK_"+sFKField.primaryKeyField+", FK_COL_NAME: "+sFKField.primaryKeyField+" ["+i+"]");
						batchInsert2.setString(2, "FK_" + sFKField.primaryKeyField+"_"+sFKField.primaryKeyTabName);//FK_NAME
						batchInsert2.setString(3, sFKField.primaryKeyField);//FK_COL_NAME
						batchInsert2.setString(4, tableName.trim());//FK_TABLE_NAME
						batchInsert2.setString(5, sFKField.foreignKeyField);//PK_COL_NAME
						batchInsert2.setString(6, fkTableName);//PK_TABLE_NAME
						//batchInsert2.setString(6, sFKField.foreignKeyTabName);//PK_TABLE_NAME
						batchInsert2.setInt(7, new Integer(i).intValue());//POS

						batchInsert2.addBatch();
						i++;
					}//end of if condition
				}//end of inner while(fkItr.hasNext()) 
			} //end of while(tableItr.hasNext()) --
			int []counts2 = batchInsert2.executeBatch();
			int []counts = batchInsert.executeBatch();
			repoConnection.commit();
			batchInsert2.close();
			batchInsert.close();
			sapLogger.log(sapLogger.INFO, "Data inserted into SNP_REV_JOIN & SNP_REV_JOIN_COL tables successfully!!!");
		}//end of if(sFK != null && sFK.size() > 0) --
	} catch (BatchUpdateException buexp) {
		sapLogger.log(sapLogger.ERROR, "Exception: Retrieve Foreign Keys - BatchUpdate Count: "+buexp.getMessage());
		throw buexp;
	} catch(Exception e) {
		sapLogger.log(sapLogger.ERROR, "SQL Exception: - Retrieve Foreign Keys --  "+e.printStackTrace());
		//throw e;
	} finally {
		batchInsert2 = null;
		batchInsert = null;
	} //end of finally
<%}; %>//end of if(odiRef.getOption("GET_FOREIGN_KEYS").equals("1")) --]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36375000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[180]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Retrieve Primary Keys]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36375000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//Retrieve Primary Keys
import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;

PreparedStatement batchInsert = null;
PreparedStatement batchInsert2 = null;


<% if(odiRef.getOption("GET_PRIMARY_KEYS").equals("1")) { %>

	try {
		sapLogger.log(sapLogger.INFO, "inserting data into Primary key table SNP_REV_KEY  started.....");
		batchInsert = repoConnection.prepareStatement("INSERT INTO SNP_REV_KEY(I_MOD, TABLE_NAME, KEY_NAME, CONS_TYPE, IND_ACTIVE, CHECK_FLOW, CHECK_STAT) values (?, ?,?,'PK', '1','1','1')");
		batchInsert2 = repoConnection.prepareStatement("INSERT INTO SNP_REV_KEY_COL (I_MOD, TABLE_NAME, KEY_NAME, COL_NAME, POS) values (?,?,?,?,?)");
		Hashtable sPK = odiSAPERPMetadataHelper.sSAPPKFields;
		if(sPK != null && sPK.size() > 0) {
			Iterator itr =  sT.iterator();
			SAPSearchDetail sapTable = null;
			while(itr.hasNext()) {
				sapTable = new SAPSearchDetail();
				sapTable = (SAPSearchDetail)itr.next();

				String tableName = sapTable.name + "  "+sapTable.desc;
				if(tableName.length() > 100) {
					tableName = tableName.substring(0, 99);
				}
				ArrayList pkList = (ArrayList) sPK.get(tableName.substring(0,tableName.indexOf(" ")).trim());
				if(pkList == null || pkList.size() == 0) {
					sapLogger.log(sapLogger.INFO, "............. pkList is null or size is 0...........");
					return;
				}
				
				batchInsert.setInt(1,<%=odiRef.getModel("ID")%>);//I_MOD
				batchInsert.setString(2, tableName.trim());//TABLE_NAME
				batchInsert.setString(3,"PK_" + tableName.substring(0,tableName.indexOf(" ")).trim());//KEY_NAME
						
				batchInsert.addBatch();
			
				Iterator pkItr = pkList.iterator();
				int i = 0;
				SAPTablePrimaryKey sPKField = null;
				while(pkItr.hasNext()) {
					sPKField = new SAPTablePrimaryKey();
					sPKField = (SAPTablePrimaryKey) pkItr.next();
					if(!(sPKField.primaryKeyFieldName.equals(""))) {
								
						batchInsert2.setInt(1,<%=odiRef.getModel("ID")%>);//I_MOD
						batchInsert2.setString(2, tableName.trim());//TABLE_NAME
						batchInsert2.setString(3, "PK_" + tableName.substring(0,tableName.indexOf(" ")).trim());//KEY_NAME
						//sapLogger.log(sapLogger.INFO, "Primary Key Field Name: "+ sPKField.primaryKeyFieldName);
						batchInsert2.setString(4, sPKField.primaryKeyFieldName);//COL_NAME
						batchInsert2.setInt(5, new Integer(i).intValue());//POS

						batchInsert2.addBatch();
						i++;
					}//end of if
				}//end of inner while(pkItr.hasNext()) 
			} //end of while(itr.hasNext()) {
			//execute the insert statement
			batchInsert2.executeBatch();
			batchInsert.executeBatch();
			repoConnection.commit();
			batchInsert2.close();
			batchInsert.close();
			sapLogger.log(sapLogger.INFO, "Data inserted Successfully into both primary key tables SNP_REV_KEY & SNP_REV_KEY_COL!!!");
		}// end of - if(sPK != null && sPK.size() > 0)
	} catch (BatchUpdateException buexp) {
		sapLogger.log(sapLogger.ERROR, "Batchupdate Exception: Retrieve Primary key - BatchUpdate Count: "+buexp.getMessage());
		throw buexp;
	} catch(Exception e) {
		sapLogger.log(sapLogger.ERROR, "SQL Exception - Retrieve Primary Keys: "+e.printStackTrace());
		//throw e;
	} finally {
		batchInsert2 = null;
		batchInsert = null;
	}//end of finally
<% }; %>//end of if(odiRef.getOption("GET_PRIMARY_KEYS").equals("1")) --]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36376000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[80]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Install Get Tables RFC]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36376000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[_OdiSAPAbapExecute "-UPLOAD=<%=odiRef.getOption("UPLOAD_ABAP_CODE")%>" "-EXECUTE=0" "-EXECUTE_BASE_RKM=0" "-ZRFC_RUN_INSTALL=1" "-ABAP_PROGRAM_NAME=Z_ODI_RFC_GET_TABLES" "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>" "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>" "-PASSWORD=<%=odiRef.getInfo("SRC_PASS")%>" "-SAP_CLIENT=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_CLIENT" )?>" "-SAP_LANGUAGE=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_LANGUAGE" )?>" "-SAP_SYSTEM_NUMBER=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_SYSTEM_NUMBER" )?>" "-SAP_FUNCTION_GROUP_NAME=<%=odiRef.getOption("SAP_FUNCTION_GROUP")%>" "-CONNECTION_POOL_NAME=<%=odiRef.getOption("SAP_CONNECTION_POOL")%>" "-CONNECTION_POOL_SIZE=<%=odiRef.getOption("SAP_CONNECTION_POOL_SIZE")%>" "-FILE_DELIMITER=|" "-FTP_TRANSFER_TIMEOUT=100000" "-USER_ABAP_PARAMETER_NAMES=IV_FLAG,CHAR1;IV_TABLE,CHAR30;IV_PACKG,CHAR30;IV_AP_COMP,CHAR30;IV_DESC,CHAR80" "-USER_ABAP_PARAMETER_VALUES=<Value>" "-USER_ABAP_PARAMETER_SEPARATOR=<Value>" "-ABAP_TABLE_PARAMETERS=ET_TBL_LIST,ZODI_BAPI_S_TBL_LIST;ET_RETURN,BAPIRET2" "-ABAP_EXCEPTION_PARAMETERS=TABLES_NOT_AVAILABLE;TABLE_NOT_AVAILABLE;DESCRIPTION_NOT_MATCHING;PACKAGE_NOT_AVAILABLE;APPL_COMP_NOT_AVAILABLE;PACKAGE_TABLE_NOT_AVAILABLE" "-LOG_FILE_NAME=<%=odiRef.getOption("LOG_FILE_NAME")%>.opentool.log" "-DEV_CLASS=ZODI_DEVCLASS" "-HASH_VALUE_MARKER=HVM" "-ABAP_PROGRAM_BODY=
*{   INSERT         EI6K900116               1
*Data Declaration
*Variables
DATA: gc_msgclass(15) TYPE c VALUE 'ZODI_MSG'.
DATA: gc_error VALUE 'E'.
DATA: gc_success VALUE 'S'.
DATA: BEGIN OF gt_message,
msgty LIKE sy-msgty,
msgid LIKE sy-msgid,
message LIKE sy-msgli,
msgno LIKE sy-msgno,
msgv1 LIKE sy-msgv1,
msgv2 LIKE sy-msgv2,
msgv3 LIKE sy-msgv3,
msgv4 LIKE sy-msgv4,
END OF gt_message.
DATA: lv_devclass        TYPE devclass.
DATA: lv_component       TYPE uffctr.
DATA: lv_module_name(24) TYPE c.
DATA: lv_comments(100)   TYPE c.
DATA: lv_tabclass        TYPE tabclass.
DATA: lv_tabname         TYPE tabname.
DATA: lv_count           TYPE i.
*Internal Tables
DATA: it_tbl_detls TYPE TABLE OF dd02l WITH 
HEADER LINE.
DATA: it_tadir     TYPE TABLE OF tadir WITH 
HEADER LINE.
DATA: it_tdevc     TYPE TABLE OF tdevc WITH 
HEADER LINE.
DATA: lt_dd02t     TYPE TABLE OF dd02t WITH 
HEADER LINE.
DATA: lt_df14l     TYPE TABLE OF df14l WITH 
HEADER LINE.
DATA : gt_return  TYPE bapiret2.
FIELD-SYMBOLS: <fs1> TYPE ANY.
DATA:          oref1 TYPE REF TO data.
IF iv_flag = ' ' .
SELECT * FROM dd02l INTO TABLE it_tbl_detls
WHERE tabclass IN 
('POOL','CLUSTER','TRANSP')
AND as4local = 'A'.
***For error message on table
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 000.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return-message TO et_return.
ENDIF.
****end of error message
LOOP AT it_tbl_detls .
Clear : lv_comments,lv_devclass,
lv_component,lv_module_name.
SELECT SINGLE ddtext INTO lv_comments 
FROM dd02t
WHERE tabname = it_tbl_detls-tabname
AND ddlanguage = sy-langu.
SELECT SINGLE devclass FROM tadir INTO 
lv_devclass
WHERE pgmid ='R3TR'
AND   object = 'TABL'
AND obj_name = it_tbl_detls-tabname.
SELECT SINGLE component FROM tdevc INTO 
lv_component
WHERE devclass = lv_devclass.
SELECT SINGLE ps_posid FROM df14l INTO 
lv_module_name
WHERE fctr_id  = lv_component
AND   as4local = 'A'.
MOVE it_tbl_detls-tabname  TO 
et_tbl_list-tabname.
MOVE it_tbl_detls-tabclass TO 
et_tbl_list-tabclass.
MOVE lv_devclass           TO 
et_tbl_list-devclass.
MOVE lv_comments           TO 
et_tbl_list-comments.
MOVE lv_module_name        TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
CLEAR it_tbl_detls.
ENDLOOP.
SORT et_tbl_list BY module_name ASCENDING.
ELSE.
DO.
REPLACE '*' WITH '%' INTO iv_table.
IF sy-subrc <> 0.
EXIT.
ENDIF.
ENDDO.
DO.
REPLACE '+' WITH '_' INTO iv_table.
IF sy-subrc <> 0.
EXIT.
ENDIF.
ENDDO.
DO.
REPLACE '*' WITH '%' INTO iv_packg.
IF sy-subrc <> 0.
EXIT.
ENDIF.
ENDDO.
DO.
REPLACE '+' WITH '_' INTO iv_packg.
IF sy-subrc <> 0.
EXIT.
ENDIF.
ENDDO.
DO.
REPLACE '*' WITH '%' INTO iv_desc.
IF sy-subrc <> 0.
EXIT.
ENDIF.
ENDDO.
DO.
REPLACE '+' WITH '_' INTO iv_desc.
IF sy-subrc <> 0.
EXIT.
ENDIF.
ENDDO.
DO.
REPLACE '*' WITH '%' INTO iv_ap_comp.
IF sy-subrc <> 0.
EXIT.
ENDIF.
ENDDO.
DO.
REPLACE '+' WITH '_' INTO iv_ap_comp.
IF sy-subrc <> 0.
EXIT.
ENDIF.
ENDDO.
IF iv_table NE space.
IF iv_packg NE space.
IF iv_ap_comp NE space.
IF iv_desc NE space.
*Get based upon table,package,application 
*component and table desc.
SELECT * FROM dd02l INTO TABLE 
it_tbl_detls
WHERE tabclass IN 
('POOL','CLUSTER','TRANSP')
AND as4local = 'A'
AND tabname LIKE iv_table.
****for Wrong table name
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 000.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tbl_detls .
SELECT * FROM dd02t INTO 
TABLE lt_dd02t
WHERE tabname = it_tbl_detls-tabname
AND ddlanguage LIKE sy-langu
AND ddtext     LIKE iv_desc.
****for Wrong table description
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 001.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_dd02t.
SELECT * FROM tadir INTO 
TABLE it_tadir
WHERE pgmid = 'R3TR'
AND   object = 'TABL'
AND obj_name = 
it_tbl_detls-tabname
AND devclass LIKE iv_packg.
****for Wrong Package
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 002.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tadir.
Clear : lv_component.
SELECT SINGLE component FROM
tdevc INTO lv_component
WHERE devclass = 
it_tadir-devclass.
SELECT * FROM df14l INTO 
TABLE lt_df14l
WHERE fctr_id  = lv_component
AND  as4local = 'A'
AND  ps_posid LIKE iv_ap_comp.
****for Wrong Application component
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 003.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_df14l.
MOVE it_tbl_detls-tabname  TO 
et_tbl_list-tabname.
MOVE it_tbl_detls-tabclass TO 
et_tbl_list-tabclass.
MOVE it_tadir-devclass     TO 
et_tbl_list-devclass.
MOVE lt_dd02t-ddtext       TO 
et_tbl_list-comments.
MOVE lt_df14l-ps_posid     TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
CLEAR it_tbl_detls.
ENDLOOP.
***********Endif for wrong Application comp.
ENDIF.
************************************
ENDLOOP.
***********Endif for wrong package
ENDIF.
************************************
ENDLOOP.
***********Endif for wrong table descritption
ENDIF.
************************************
ENDLOOP.
***********Endif for wrong table name
ENDIF.
************************************
ELSE.
*Get based upon table, package and application 
*component name.
SELECT * FROM dd02l INTO TABLE 
it_tbl_detls
WHERE tabclass IN 
('POOL','CLUSTER','TRANSP')
AND as4local = 'A'
AND tabname LIKE iv_table.
****for Wrong table name
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 000.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tbl_detls .
Clear : lv_comments.
SELECT SINGLE ddtext FROM dd02t 
INTO lv_comments
WHERE tabname = 
it_tbl_detls-tabname
AND ddlanguage LIKE sy-langu.
SELECT * FROM tadir INTO 
TABLE it_tadir
WHERE pgmid = 'R3TR'
AND   object = 'TABL'
AND obj_name = it_tbl_detls-tabname
AND devclass LIKE iv_packg.
****for Wrong Package
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 002.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tadir.
Clear : lv_component.
SELECT SINGLE component FROM 
tdevc INTO lv_component
WHERE devclass = 
it_tadir-devclass.
SELECT * FROM df14l INTO 
TABLE lt_df14l
WHERE fctr_id  = lv_component
AND   as4local = 'A'
AND ps_posid LIKE iv_ap_comp.
****for Wrong Application component
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 003.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_df14l.
MOVE it_tbl_detls-tabname  TO 
et_tbl_list-tabname.
MOVE it_tbl_detls-tabclass TO 
et_tbl_list-tabclass.
MOVE it_tadir-devclass     TO 
et_tbl_list-devclass.
MOVE lv_comments           TO 
et_tbl_list-comments.
MOVE lt_df14l-ps_posid     TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
CLEAR it_tbl_detls.
ENDLOOP.
***********Endif for wrong application component
ENDIF.
************************************
ENDLOOP.
***********Endif for wrong package
ENDIF.
************************************
ENDLOOP.
***********Endif for wrong table name
ENDIF.
************************************
ENDIF.
ELSEIF iv_desc NE space.
*Get based upon table, package and 
*table descritption.
SELECT * FROM dd02l INTO TABLE 
it_tbl_detls
WHERE tabclass IN 
('POOL','CLUSTER','TRANSP')
AND as4local = 'A'
AND tabname LIKE iv_table.
****for Wrong table name
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 000.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tbl_detls .
SELECT * FROM dd02t INTO TABLE 
lt_dd02t
WHERE tabname = it_tbl_detls-tabname
AND ddlanguage LIKE sy-langu
AND ddtext LIKE iv_desc.
****for Wrong table description
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 001.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_dd02t.
SELECT * FROM tadir INTO TABLE 
it_tadir
WHERE pgmid = 'R3TR'
AND   object = 'TABL'
AND obj_name = it_tbl_detls-tabname
AND devclass LIKE iv_packg.
****for Wrong Package
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 002.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tadir.
Clear : lv_component,
lv_module_name.
SELECT SINGLE component FROM 
tdevc INTO lv_component
WHERE devclass = 
it_tadir-devclass.
SELECT SINGLE ps_posid FROM 
df14l INTO lv_module_name
WHERE fctr_id  = lv_component
AND   as4local = 'A'.
MOVE it_tbl_detls-tabname  TO 
et_tbl_list-tabname.
MOVE it_tbl_detls-tabclass TO 
et_tbl_list-tabclass.
MOVE it_tadir-devclass     TO 
et_tbl_list-devclass.
MOVE lt_dd02t-ddtext       TO 
et_tbl_list-comments.
MOVE lv_module_name        TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
CLEAR it_tbl_detls.
ENDLOOP.
***********Endif for wrong package
ENDIF.
************************************
ENDLOOP.
***********Endif for wrong table description
ENDIF.
************************************
ENDLOOP.
***********Endif for wrong table name
ENDIF.
************************************
ELSE.
*Get based upon table and package name.
SELECT * FROM dd02l INTO TABLE 
it_tbl_detls
WHERE tabclass IN 
('POOL','CLUSTER','TRANSP')
AND as4local = 'A'
AND tabname LIKE iv_table.
****for Wrong table name
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 000.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
***************
LOOP AT it_tbl_detls .
Clear : lv_comments.
SELECT SINGLE ddtext FROM dd02t INTO 
lv_comments
WHERE tabname = it_tbl_detls-tabname
AND ddlanguage LIKE sy-langu.
SELECT * FROM tadir INTO TABLE 
it_tadir
WHERE pgmid = 'R3TR'
AND   object = 'TABL'
AND obj_name = it_tbl_detls-tabname
AND devclass LIKE iv_packg.
****for Wrong Package
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 002.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tadir.
Clear : lv_component,
lv_module_name.
SELECT SINGLE component FROM tdevc 
INTO lv_component
WHERE devclass = it_tadir-devclass.
SELECT SINGLE ps_posid FROM df14l 
INTO lv_module_name
WHERE fctr_id  = lv_component
AND   as4local = 'A'.
MOVE it_tbl_detls-tabname  TO 
et_tbl_list-tabname.
MOVE it_tbl_detls-tabclass TO 
et_tbl_list-tabclass.
MOVE it_tadir-devclass     TO 
et_tbl_list-devclass.
MOVE lv_comments           TO 
et_tbl_list-comments.
MOVE lv_module_name        TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
CLEAR it_tbl_detls.
ENDLOOP.
***********Endif for wrong package
ENDIF.
************************************
ENDLOOP.
***********Endif for wrong table name
ENDIF.
************************************
ENDIF.
ELSEIF iv_ap_comp NE space.
IF iv_desc NE space.
*Get based upon table, application component
*and Description 
SELECT * FROM dd02l INTO TABLE 
it_tbl_detls
WHERE tabclass IN 
('POOL','CLUSTER','TRANSP')
AND as4local = 'A'
AND tabname LIKE iv_table.
****for Wrong table name
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 000.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
***************
LOOP AT it_tbl_detls .
SELECT * FROM dd02t INTO TABLE 
lt_dd02t
WHERE tabname = it_tbl_detls-tabname
AND ddlanguage LIKE sy-langu
AND ddtext LIKE iv_desc.
****for Wrong table description
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 001.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_dd02t.
Clear : lv_devclass,lv_component.
SELECT SINGLE devclass FROM tadir 
INTO lv_devclass
WHERE pgmid = 'R3TR'
AND   object = 'TABL'
AND obj_name = 
it_tbl_detls-tabname.
SELECT SINGLE component FROM 
tdevc INTO lv_component
WHERE devclass = lv_devclass.
SELECT * FROM df14l INTO TABLE 
lt_df14l
WHERE fctr_id  = lv_component
AND   as4local = 'A'
AND ps_posid LIKE iv_ap_comp.
****for Wrong Application component
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 003.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_df14l.
MOVE it_tbl_detls-tabname  TO 
et_tbl_list-tabname.
MOVE it_tbl_detls-tabclass TO 
et_tbl_list-tabclass.
MOVE lv_devclass           TO 
et_tbl_list-devclass.
MOVE lt_dd02t-ddtext       TO 
et_tbl_list-comments.
MOVE lt_df14l-ps_posid     TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
CLEAR it_tbl_detls.
ENDLOOP.
******endif for wrong applicaion comp.
ENDIF.
************************
ENDLOOP.
******endif for wrong description
ENDIF.
************************
ENDLOOP.
******endif for wrong table
ENDIF.
************************
ELSE.
*Get based upon table and application component.
SELECT * FROM dd02l INTO TABLE 
it_tbl_detls
WHERE tabclass IN 
('POOL','CLUSTER','TRANSP')
AND as4local = 'A'
AND tabname LIKE iv_table.
****for Wrong table name
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 000.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
***************
LOOP AT it_tbl_detls .
clear : lv_comments,lv_devclass.
SELECT SINGLE ddtext FROM dd02t INTO 
lv_comments
WHERE tabname = it_tbl_detls-tabname
AND ddlanguage LIKE sy-langu.
SELECT SINGLE devclass FROM tadir 
INTO lv_devclass
WHERE pgmid = 'R3TR'
AND   object = 'TABL'
AND obj_name = it_tbl_detls-tabname
..
SELECT SINGLE component FROM tdevc 
INTO lv_component
WHERE devclass = lv_devclass.
SELECT * FROM df14l INTO TABLE 
lt_df14l
WHERE fctr_id  = lv_component
AND   as4local = 'A'
AND ps_posid LIKE iv_ap_comp.
****for Wrong Application component
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 003.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_df14l.
MOVE it_tbl_detls-tabname  TO 
et_tbl_list-tabname.
MOVE it_tbl_detls-tabclass TO 
et_tbl_list-tabclass.
MOVE lv_devclass           TO 
et_tbl_list-devclass.
MOVE lv_comments           TO 
et_tbl_list-comments.
MOVE lt_df14l-ps_posid     TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
CLEAR it_tbl_detls.
ENDLOOP.
********endif for worng application comp.
ENDIF.
*************************
ENDLOOP.
********endif for worng table name
ENDIF.
*************************
ENDIF.
ELSEIF iv_desc NE space.
*Get based upon TABLE and table description.
SELECT * FROM dd02l INTO TABLE 
it_tbl_detls
WHERE tabclass IN 
('POOL','CLUSTER','TRANSP')
AND as4local = 'A'
AND tabname LIKE iv_table.
****for Wrong table name
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 000.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
***************
LOOP AT it_tbl_detls .
SELECT * FROM dd02t INTO TABLE 
lt_dd02t
WHERE tabname = it_tbl_detls-tabname
AND ddlanguage LIKE sy-langu
AND ddtext LIKE iv_desc.
****for Wrong table description
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 001.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_dd02t.
Clear : lv_devclass, lv_component,
lv_module_name.
SELECT SINGLE devclass FROM tadir 
INTO lv_devclass
WHERE pgmid = 'R3TR'
AND   object = 'TABL'
AND obj_name = it_tbl_detls-tabname.
SELECT SINGLE component FROM tdevc 
INTO lv_component
WHERE devclass = it_tadir-devclass.
SELECT SINGLE ps_posid FROM df14l 
INTO lv_module_name
WHERE fctr_id  = lv_component
AND   as4local = 'A'.
MOVE it_tbl_detls-tabname  TO 
et_tbl_list-tabname.
MOVE it_tbl_detls-tabclass TO 
et_tbl_list-tabclass.
MOVE lv_devclass           TO 
et_tbl_list-devclass.
MOVE lt_dd02t-ddtext       TO 
et_tbl_list-comments.
MOVE lv_module_name        TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
CLEAR it_tbl_detls.
ENDLOOP.
********endif for wrong table description
ENDIF.
***************************
ENDLOOP.
********endif for wrong table name
ENDIF.
***************************
ELSE.
*Get based upon table name.
SELECT * FROM dd02l INTO TABLE 
it_tbl_detls
WHERE tabclass IN 
('POOL','CLUSTER','TRANSP')
AND as4local = 'A'
AND tabname LIKE iv_table.
****for Wrong table name
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 000.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
***************
LOOP AT it_tbl_detls .
Clear : lv_comments,lv_devclass,
lv_component,lv_module_name.
SELECT SINGLE ddtext FROM dd02t INTO 
lv_comments
WHERE tabname = it_tbl_detls-tabname
AND ddlanguage LIKE sy-langu.
SELECT SINGLE devclass FROM tadir 
INTO lv_devclass
WHERE pgmid = 'R3TR'
AND   object = 'TABL'
AND obj_name = it_tbl_detls-tabname.
SELECT SINGLE component FROM tdevc 
INTO lv_component
WHERE devclass = lv_devclass.
SELECT SINGLE ps_posid FROM df14l 
INTO lv_module_name
WHERE fctr_id  = lv_component
AND   as4local = 'A'.
MOVE it_tbl_detls-tabname  TO 
et_tbl_list-tabname.
MOVE it_tbl_detls-tabclass TO 
et_tbl_list-tabclass.
MOVE lv_devclass           TO 
et_tbl_list-devclass.
MOVE lv_comments           TO 
et_tbl_list-comments.
MOVE lv_module_name        TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
CLEAR it_tbl_detls.
ENDLOOP.
******endif for wrong table name
ENDIF.
******************
ENDIF.
ELSEIF iv_packg NE space.
IF iv_ap_comp NE space.
IF iv_desc NE space.
*Get based upon package, application component 
*and description.
SELECT * FROM tadir INTO TABLE it_tadir
WHERE pgmid ='R3TR'
AND   object = 'TABL'
AND devclass LIKE iv_packg.
***for Wrong Package
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 002.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tadir.
SELECT * FROM dd02t INTO TABLE 
lt_dd02t
WHERE tabname  = it_tadir-obj_name
AND ddlanguage = sy-langu
AND ddtext LIKE iv_desc.
****for Wrong table description
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 001.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
exit.
ELSE.
********************
LOOP AT lt_dd02t.
Clear : lv_component.
SELECT SINGLE component FROM 
tdevc INTO lv_component
WHERE devclass = it_tadir-devclass.
SELECT * FROM df14l INTO 
TABLE lt_df14l
WHERE fctr_id  = lv_component
AND as4local = 'A'
AND ps_posid LIKE iv_ap_comp.
***for Wrong Application component
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 003.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ENDIF.
********************
SELECT SINGLE tabclass FROM 
dd02l INTO lv_tabclass
WHERE tabname = it_tadir-obj_name
AND tabclass IN 
('POOL','CLUSTER','TRANSP').
IF sy-subrc = 0.
LOOP AT lt_df14l.
MOVE it_tadir-obj_name     TO 
et_tbl_list-tabname.
MOVE lv_tabclass           TO 
et_tbl_list-tabclass.
MOVE it_tadir-devclass     TO 
et_tbl_list-devclass.
MOVE lt_dd02t-ddtext     TO 
et_tbl_list-comments.
MOVE lt_df14l-ps_posid     TO 
et_tbl_list-module_name .
APPEND et_tbl_list.
ENDLOOP.
ENDIF.
ENDLOOP.
********endif for wrong description
ENDIF.
************************
ENDLOOP.
********endif for wrong package
ENDIF.
************************
ELSE.
*Get based upon package and 
*application component name.
SELECT * FROM tadir INTO TABLE it_tadir
WHERE pgmid ='R3TR'
AND   object = 'TABL'
AND devclass LIKE iv_packg.
***for Wrong Package
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 002.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tadir.
clear : lv_comments,lv_component.
SELECT SINGLE ddtext FROM dd02t 
INTO lv_comments
WHERE tabname  = it_tadir-obj_name
AND ddlanguage = sy-langu.
SELECT SINGLE component FROM tdevc 
INTO lv_component
WHERE devclass = it_tadir-devclass.
SELECT * FROM df14l INTO 
TABLE lt_df14l
WHERE fctr_id  = lv_component
AND as4local = 'A'
AND ps_posid LIKE iv_ap_comp.
***for Wrong Application component
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 003.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
exit.
ENDIF.
********************
SELECT SINGLE tabclass FROM dd02l 
INTO lv_tabclass
WHERE tabname = it_tadir-obj_name
AND tabclass IN 
('POOL','CLUSTER','TRANSP').
IF sy-subrc = 0.
LOOP AT lt_df14l.
MOVE it_tadir-obj_name     TO 
et_tbl_list-tabname.
MOVE lv_tabclass           TO 
et_tbl_list-tabclass.
MOVE it_tadir-devclass     TO 
et_tbl_list-devclass.
MOVE lv_comments           TO 
et_tbl_list-comments.
MOVE lt_df14l-ps_posid     TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
ENDLOOP.
ENDIF.
ENDLOOP.
*******endif for wrong package
ENDIF.
********************
ENDIF.
ELSEIF iv_desc NE space.
*Get based upon package and description.
SELECT * FROM tadir INTO TABLE it_tadir
WHERE pgmid ='R3TR'
AND   object = 'TABL'
AND devclass 
LIKE iv_packg.
***for Wrong Package
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 002.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tadir.
SELECT * FROM dd02t INTO TABLE lt_dd02t
WHERE tabname  = it_tadir-obj_name
AND ddlanguage = sy-langu
AND ddtext LIKE iv_desc.
***for Wrong table description
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 001.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_dd02t.
Clear : lv_component,lv_module_name,
lv_tabclass.
SELECT SINGLE component FROM tdevc 
INTO lv_component
WHERE devclass = it_tadir-devclass.
SELECT SINGLE ps_posid FROM 
df14l INTO lv_module_name
WHERE fctr_id  = lv_component
AND as4local = 'A'.
SELECT SINGLE tabclass FROM dd02l 
INTO lv_tabclass
WHERE tabname = it_tadir-obj_name
AND tabclass IN 
('POOL','CLUSTER','TRANSP').
IF sy-subrc = 0.
MOVE it_tadir-obj_name     TO 
et_tbl_list-tabname.
MOVE lv_tabclass           TO 
et_tbl_list-tabclass.
MOVE it_tadir-devclass     TO 
et_tbl_list-devclass.
MOVE lt_dd02t-ddtext       TO 
et_tbl_list-comments.
MOVE lv_module_name        TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
ENDIF.
ENDLOOP.
****endif for wrong description
ENDIF.
*************
ENDLOOP.
****endif for wrong packae
ENDIF.
*************
ELSE.
*Get based upon package name.
SELECT * FROM tadir INTO TABLE it_tadir
WHERE pgmid ='R3TR'
AND   object = 'TABL'
AND devclass LIKE iv_packg.
***for Wrong Package
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 002.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT it_tadir.
Clear : lv_comments,lv_component,
lv_module_name,lv_tabclass.
SELECT SINGLE ddtext FROM dd02t INTO 
lv_comments
WHERE tabname  = it_tadir-obj_name
AND ddlanguage = sy-langu.
SELECT SINGLE component FROM tdevc 
INTO lv_component
WHERE devclass = it_tadir-devclass.
SELECT SINGLE ps_posid FROM df14l 
INTO lv_module_name
WHERE fctr_id  = lv_component
AND as4local = 'A'.
SELECT SINGLE tabclass FROM dd02l 
INTO lv_tabclass
WHERE tabname = it_tadir-obj_name
AND tabclass IN 
('POOL','CLUSTER','TRANSP').
IF sy-subrc = 0.
MOVE it_tadir-obj_name     TO 
et_tbl_list-tabname.
MOVE lv_tabclass           TO 
et_tbl_list-tabclass.
MOVE it_tadir-devclass     TO 
et_tbl_list-devclass.
MOVE lv_comments           TO 
et_tbl_list-comments.
MOVE lv_module_name        TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
ENDIF.
ENDLOOP.
*******endif for wrong package
ENDIF.
***************************
ENDIF.
ELSEIF iv_ap_comp NE space.
IF iv_desc NE space.
*Get based upon application component and 
*table description.
SELECT * FROM df14l INTO TABLE 
lt_df14l
WHERE ps_posid  LIKE iv_ap_comp
AND   as4local  = 'A'.
***for Wrong Application component
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 003.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT  lt_df14l.
SELECT * FROM tdevc INTO TABLE it_tdevc
WHERE component = lt_df14l-fctr_id.
LOOP AT it_tdevc.
SELECT * FROM tadir INTO TABLE 
it_tadir
WHERE pgmid  ='R3TR'
AND   object = 'TABL'
AND devclass = it_tdevc-devclass.
LOOP AT it_tadir.
SELECT * FROM dd02t INTO TABLE 
lt_dd02t
WHERE tabname  = it_tadir-obj_name
AND ddlanguage = sy-langu
AND ddtext LIKE iv_desc.
***for Wrong table description
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 001.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_dd02t.
Clear : lv_tabclass.
SELECT SINGLE tabclass FROM 
dd02l INTO lv_tabclass
WHERE tabname = it_tadir-obj_name
AND tabclass IN 
('POOL','CLUSTER','TRANSP').
IF sy-subrc = 0.
MOVE it_tadir-obj_name     TO 
et_tbl_list-tabname.
MOVE lv_tabclass           TO 
et_tbl_list-tabclass.
MOVE it_tdevc-devclass     TO 
et_tbl_list-devclass.
MOVE lt_dd02t-ddtext       TO 
et_tbl_list-comments.
MOVE lt_df14l-ps_posid     TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
ENDIF.
ENDLOOP.
******endif for wrong description
ENDIF.
*********************
ENDLOOP.
ENDLOOP.
ENDLOOP.
******endif for wrong application comp
ENDIF.
*********************
ELSE.
*Get based upon application component.
SELECT * FROM df14l INTO TABLE lt_df14l
WHERE ps_posid  LIKE iv_ap_comp
AND   as4local  = 'A'.
***for Wrong Application component
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 003.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT  lt_df14l.
SELECT * FROM tdevc INTO TABLE 
it_tdevc
WHERE component = lt_df14l-fctr_id.
LOOP AT it_tdevc.
SELECT * FROM tadir INTO TABLE 
it_tadir
WHERE pgmid  ='R3TR'
AND   object = 'TABL'
AND devclass = it_tdevc-devclass.
LOOP AT it_tadir.
Clear : lv_comments, lv_tabclass.
SELECT SINGLE ddtext INTO 
lv_comments FROM dd02t
WHERE tabname  = it_tadir-obj_name
AND ddlanguage = sy-langu.
SELECT SINGLE tabclass FROM 
dd02l INTO lv_tabclass
WHERE tabname = it_tadir-obj_name
AND tabclass IN 
('POOL','CLUSTER','TRANSP').
IF sy-subrc = 0.
MOVE it_tadir-obj_name     TO 
et_tbl_list-tabname.
MOVE lv_tabclass           TO 
et_tbl_list-tabclass.
MOVE it_tdevc-devclass     TO 
et_tbl_list-devclass.
MOVE lv_comments           TO 
et_tbl_list-comments.
MOVE lt_df14l-ps_posid     TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
ENDIF.
ENDLOOP.
ENDLOOP.
ENDLOOP.
******endif for wrong application comp.
ENDIF.
************************
ENDIF.
ELSE.
*Get based upon table description.
SELECT * FROM dd02t INTO TABLE lt_dd02t
WHERE ddtext   LIKE iv_desc
AND ddlanguage = sy-langu.
***for Wrong table description
IF sy-subrc <> 0.
CLEAR gt_message.
gt_message-msgty = gc_error.
gt_message-msgid = gc_msgclass.
gt_message-msgno = 001.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = gt_message-msgty
cl     = gt_message-msgid
number = gt_message-msgno
IMPORTING
return = gt_return.
APPEND gt_return TO et_return.
ELSE.
********************
LOOP AT lt_dd02t.
Clear : lv_devclass,lv_component,
lv_module_name,lv_tabclass.
SELECT SINGLE devclass FROM tadir INTO 
lv_devclass
WHERE pgmid  ='R3TR'
AND   object = 'TABL'
AND obj_name = lt_dd02t-tabname.
SELECT SINGLE component FROM tdevc INTO 
lv_component
WHERE devclass = lv_devclass.
SELECT SINGLE ps_posid FROM df14l INTO 
lv_module_name
WHERE fctr_id  = lv_component
AND   as4local = 'A'.
SELECT SINGLE tabclass FROM dd02l INTO 
lv_tabclass
WHERE tabname = lt_dd02t-tabname
AND tabclass IN 
('POOL','CLUSTER','TRANSP').
IF sy-subrc = 0.
MOVE lt_dd02t-tabname     TO 
et_tbl_list-tabname.
MOVE lv_tabclass          TO 
et_tbl_list-tabclass.
MOVE lv_devclass          TO 
et_tbl_list-devclass.
MOVE lt_dd02t-ddtext      TO 
et_tbl_list-comments.
MOVE lv_module_name       TO 
et_tbl_list-module_name.
APPEND et_tbl_list.
ENDIF.
ENDLOOP.
*********endif for wrong table description
ENDIF.
**********************
ENDIF.
ENDIF.
*}   INSERT
END FUNCTION."
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:24:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2119000]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[60]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2119000]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[80]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2119000]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[90]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2119000]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[100]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[364000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2119000]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[110]]></Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[5]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[40]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[37]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
</Object>
</SunopsisExport>
