<?xml version="1.0" encoding="ISO-8859-1"?>
<SunopsisExport>
<Object class="com.sunopsis.dwg.dbobj.SnpTrt">
		<Field name="ExtVersion" type="java.lang.String"><![CDATA[10.1.3.22]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2009-11-20 14:46:45.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="IndJrnMethod" type="java.lang.String"><![CDATA[S]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IProject" type="com.sunopsis.sql.DbInt"><![CDATA[1000]]></Field>
	<Field name="IState" type="com.sunopsis.sql.DbInt"><![CDATA[2002]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtTrtTxt" type="com.sunopsis.sql.DbInt"><![CDATA[33890000]]></Field>
	<Field name="KimMultiDserver" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="KmDefault" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KmSrcTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="KmTechno" type="java.lang.String"><![CDATA[ORACLE]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LChecksum" type="com.sunopsis.sql.DbInt"><![CDATA[4597]]></Field>
	<Field name="LCode" type="java.lang.String">null</Field>
	<Field name="OrdFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="TrtName" type="java.lang.String"><![CDATA[LKM SAP ERP to Oracle (SQLLDR)]]></Field>
	<Field name="TrtType" type="java.lang.String"><![CDATA[KL]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33890000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Component:LKM SAP ERP
Author: Oracle
Version: 10.1.3.22
Compatability:ODI 10.1.3 and above

Description :
- Loading Knowledge Module
- Loading Knowledge Module to retrieve the data from SAP systems for the selected SAP models in an interface design. This knowledge module works for SAP R/3 versions 4.6c and ECC 6.0.
-This knowledge module uses an Open Tool Interface command to extract data from SAP systems.
-It uses FTP protocol to transfer extracted data from SAP systems to ODI.
-To load the extracted data it uses Oracle bulk loader utility (SQLLDR) to load data from flat file.

To use this knowledge module and  run the reverse engineering:
1. Create interface design using SAP models including joins, filters and transformations.
2. Choose SAP ERP LKM to Oracle as loading knowledge module for the source tables
3. Execute the interface design and follow up the steps in the logs.

Open Tool:
- Use Open Tool version 10.1.3.4 to upload ABAP program into SAP system

]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[1000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[1000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Edit Command]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_TRT_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33901000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2046000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[100]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[VALIDATE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Validate Option values]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33901000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Flag to indicate whether to validate all the Option values specified before executing the LKM]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[User Exit help]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_UE_HELP]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_USER_EXIT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33898000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2043000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[110]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[UPLOAD_ABAP_CODE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Flag to indicate to upload]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33898000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Flag to indicate whether to upload the program for every interface execution.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33903000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2048000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[120]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[EXECUTE_ABAP_CODE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Flag to indicate execution]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33903000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Flag to indicate whether to execute uploaded program.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33900000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2045000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[ZODI_<%=odiRef.getPop("I_POP")%>_<%=odiRef.getInfo("I_SRC_SET")%>]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[ABAP_PROGRAM_NAME]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Name of the program]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33900000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Name of the ABAP program with which code is generated.

]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33891000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2036000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[140]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[<?=java.lang.System.getProperty("java.io.tmpdir")+System.getProperty("file.separator")?>SAPAbapExecuteOpenTool_<%=odiRef.getPop("I_POP")%>.log]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[LOG_FILE_NAME]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Name of the Log File]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33891000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Name of the Log file where info/error messages from LKM are written

]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33897000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2042000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[150]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[<?=new File(System.getProperty("java.io.tmpdir")).getPath()+System.getProperty("file.separator")?>]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[TEMP_DIR]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[FTP files are saved ]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33897000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Temporory directory where FTP files are downloaded.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[35012000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2173000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[160]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[MAX_ALLOWED_ERRORS]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Maximum allowed error -1]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[35012000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[When the number of discarded records is equal to MAX_ALLOWED_ERRORS the load process will stop.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33902000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2047000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[170]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[DELETE_TEMPORARY_OBJECTS]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Flag to delete temp files]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33902000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Flag to Indicate whether to delete temporay objects created.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33892000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2037000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[200]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[SAP_ODI_ERP_POOL]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_CONNECTION_POOL]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Sap Connection Pool Name]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33892000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Name of the SAP connection pool]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33893000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2038000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[210]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[10]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_CONNECTION_POOL_SIZE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[No of SAP connections in pool]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33893000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Number of SAP connections to be maintained as a pool.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33894000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2039000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[220]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[ZODI_FGR_<%=odiRef.getPop("I_POP")%>]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SAP_FUNCTION_GROUP_NAME]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Funtional Group Name of SAP]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33894000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[The name of the SAP function group where all generated ABAP programs will be uploaded.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33899000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2044000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[230]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[CHECK_DATA_FOR_DELIMITERS]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Checks delimiter char in data value]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33899000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[If set to true on delimited files, the ABAP program will validate any data field, whether it contains the delimiter character. Approriate action will be taken to handle the data values by raising exceptions.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33905000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2050000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[240]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[DELIMITED]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[FILE_FORMAT]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Delimited Value]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33905000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Value either DELIMITED or FIXED]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33904000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2049000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[250]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[|]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[FIELD_SEPARATOR]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Column Seperator ]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33904000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Column Seperator character to be used to write data to the Flat File, default "|".]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33909000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2053000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[300]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[FTP]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[FTP_TRANSFER_METHOD]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Type of FTP]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33909000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Provide Values for the type of FTP protocal used, Defualt is FTP, Other values SFTP, SCP, NONE.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33908000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2052000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[310]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[FTP_PASSIVE_MODE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[FTP Mode]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33908000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Specify mode of FTP transfer.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33907000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[33906000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2051000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[320]]></Field>
	<Field name="ShortValue" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[FILE_TRANSFER_TIMEOUT]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[FTP Time out time]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[T]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33906000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[100000]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[4000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[4000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Text value]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_VALUE]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_USER_EXIT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33907000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Specify FTP transfer time out time.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:13.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33895000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2040000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[330]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SSH_COMPRESSION]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Secure FTP compression parameter]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33895000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Specify Yes to compress mode of transfer else no.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[33896000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2041000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[340]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[<empty>]]></Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SSH_IDENTITY_FILE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Name of the file for secure FTP]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[33896000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[Specify the file name for secure FTP protocol.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[36042000]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2296000]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[960]]></Field>
	<Field name="ShortValue" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[MAX_ROW_COUNT]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Maximum rows to upload]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36042000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[To extract maximum number of rows from SAP.
By default <Blank> that means will load all records.
User can pass numeric value e.g. 100, will load only 100 records.]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[2000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36411000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:16.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:16.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[5]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[40]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Create Java Classes]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36411000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[<%
/////////////////////////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle	         		                   //
// ALL RIGHTS RESERVED.                                                                                   //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright  //
// notice in the COPYRIGHT file in this directory.                                                //
///////////////////////////////////////////////////////////////////////////////////////////////

import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileOutputStream;
import java.io.PrintStream;

/**
 * @(#)OdiSAPLogger.java  1.00 11/24/2008
 *
 * Application : ODI SAP Knowledge Modules
 *
 * Module      : SAP Logger
 *
 * Author(s)   : Oracle,
 *
 * About       :
 *
 * Dependencies: JDK 1.4.2 API (with standard extensions),
 *
 *
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

/**
 * This class is a common class for handling all the error/exception messages
 * of the SAP ERP/BW RKM/LKM modules. This class writes the messages either to
 * ODI console or a defalut log file name written to Systems Temporary folder
 *
 * This class is a temporary class written for ODI 10g version as 10g doesn't
 * have logging framework. This class will be replaced with ODI 11g class which
 * will same method signatures as written in this class.
 *
 * Thus enabling us to easily migrate the RKM/LKM modules to 11g version.
 */
public class OdiSAPLogger {

	//Static Variables for all the supported log levels
	private static OdiSAPLogger instance = null;	
	public static final Level FATAL = Level.parse(Integer.toString(
				Level.SEVERE.intValue() + 100));
	public static final Level ERROR = Level.SEVERE;
	public static final Level WARNING = Level.WARNING;
	public static final Level INFO = Level.INFO;
	public static final Level CONFIG = Level.CONFIG;
	public static final Level FINE = Level.FINE;
	public static final Level FINER = Level.FINER;
	public static final Level FINEST = Level.FINEST;
	public static PrintStream sapLogger = null; 

	/**
	 * Default Constructor to instantiate the class
	 * This is used if all the log messages needs to be
	 * logged to console directly.
	 */
    public static OdiSAPLogger getInstance() {				
	if(instance == null) {
		instance = new OdiSAPLogger();
	}
	   return instance;
	}
	public OdiSAPLogger() {
		
		String logFileName = System.getProperty("java.io.tmpdir") + "ODI_" + odiRef.getPop("I_POP") + "_" + odiRef.getInfo("SRC_SET_NAME") + ".genlog";
		OdiSAPLogger(logFileName); 

	}//End of Default Constructor
	

	/**
	 * Constructor to set the log file name to which the messages will be
	 * written
	 *
	 * @logFileName name of the log file to be created
	 */ 
	public OdiSAPLogger(String logFileName) {
		try {
			//Set the log file name in Javas System outputstream
			if(logFileName != null || !(logFileName.trim().equals("")))
			sapLogger = new PrintStream(new FileOutputStream(logFileName));
			sapLogger.println("################################################################");
			sapLogger.println("################## ODI SAP Log file	##########################");
			sapLogger.println("################################################################");
		}catch(Exception le) {
			le.printStackTrace();
			sapLogger.println("Error in creating log file : " + logFileName + "-" + le.getMessage());
		}
					
	
	}

	/**
	 * Log a message, with no arguments.
	 *
	 * @param level Log Level
	 * @param msg message to be logged
	 */
	public void log(Level level, String msg) {
		String logMsg = level.getName() + ": " + msg; 
		sapLogger.println(logMsg);
	}
          
	/**
	 * Log a message, with one object parameter.
	 *
	 * @param level Log Level
	 * @param msg message to be logged
	 * @param param1 parameter to be used in the msg
	 */
 	public void log(Level level, String msg, Object param1) {
		String logMsg = level.getName() + ": " + msg + "  " + param1; 
		sapLogger.println(logMsg);	
	}
         
      	/**
	 * Log a message, with an array of object arguments. 
	 *
	 * @param level Log Level
	 * @param msg message to be logged
	 * @param params[] array of parameters to be used in the msg
	 */	
 	public void log(Level level, String msg, Object[] params) {
		String logMsg = level.getName() + ": " + msg; 
		sapLogger.println(logMsg);
	}
	
	/**
	 * Log a message, with associated Throwable information. 
	 *
	 * @param level Log Level
	 * @param msg message to be logged
	 * @param thrown Throwable exception
	 */
	public void log(Level level, String msg, Throwable thrown) {
		String logMsg = level.getName() + ": " + msg + " " + thrown.getMessage();
	        thrown.printStackTrace(System.out);	
		sapLogger.println(logMsg);
	}
	
	/**
	 * Log a message, specifying source class and method,with no arguments. 
	 *
	 * @param level Log Level
	 * @param sourceClass class name from where message to be logged
	 * @param sourceMethod method name of the class from where message 
	 * to be logged.
	 * @param msg message to be logged
	 */
 	public void logp(Level level, String sourceClass, String sourceMethod, String msg) { 
        	String logMsg = level.getName() + ": " + sourceClass + ": " + sourceMethod + " : " + msg; 
		sapLogger.println(logMsg);	
	}
	
	/**
	 * Log a message, specifying source class and method, with a single 
	 * object parameter to the log message. 
	 *
	 * @param level Log Level
	 * @param sourceClass class name from where message to be logged
	 * @param sourceMethod method name of the class from where message 
	 * to be logged.
	 * @param msg message to be logged
	 * @param param1 parameter to be passed
	 */
 	public void logp(Level level, String sourceClass, String sourceMethod, String msg, Object param1) { 
        	String logMsg = level.getName() + ": " + sourceClass + ": " + sourceMethod + " : " + msg + " " + param1;
		sapLogger.println(logMsg);	
	}
       	
	/**
	 * Log a message, specifying source class and method, with an array 
	 * of object arguments. 
	 *
	 * @param level Log Level
	 * @param sourceClass class name from where message to be logged
	 * @param sourceMethod method name of the class from where message 
	 * to be logged.
	 * @param msg message to be logged
	 * @param params array of parameter to be passed
	 */
 	public void logp(Level level, String sourceClass, String sourceMethod, String msg, Object[] params) { 
        
	      	String logMsg = level.getName() + ": " + sourceClass + ": " + sourceMethod + " : " + msg;
		sapLogger.println(logMsg);	
	}
	
	/**
	 * Log a message, specifying source class and method, with associated
	 * Throwable information.  
	 *
	 * @param level Log Level
	 * @param sourceClass class name from where message to be logged
	 * @param sourceMethod method name of the class from where message 
	 * to be logged.
	 * @param msg message to be logged
	 * @param params array of parameter to be passed
	 */
 	public void logp(Level level, String sourceClass, String sourceMethod, String msg, Throwable thrown) { 
        
		String logMsg = level.getName() + ": " + sourceClass + ": " + sourceMethod + " : " + msg + " " + thrown.getMessage();
		thrown.printStackTrace(System.out);
		sapLogger.println(logMsg);	
	}

}// End of OdiSAPLogger class


/**
 * This class to store SAP table or application 
 * component information to display in the tree browser.
 */
class SAPTable { 
	public String name;
	public String alias;
	public String type;
	public String id;

	public void SAPTable(String id, String name, String alias, String type) {
		this.name = name;
		this.alias = alias;
		this.type = type;
		this.id = id;	
	}
}

/**
 * This class to store SAP table or application 
 * component information to display in the tree browser.
 */

class SAPField { 
   	public String colName;
	public String colAlias;
	public String tableName;
	public String dataType;
	public String id;

	public void SAPField(String id, String tabName, String colName, String colAlias, String dataType) {
		this.tableName = tabName;
		this.colName = colName;
		this.id = id;
		this.colAlias = colAlias;
		this.dataType = dataType;	
	}
}
/**
 * This class to store SAP join.
 */
class SAPJoin { 
	
	public String primaryTable = null;
	public String joinedTable = null;
	public ArrayList conditions = null;

}//End of SAPJoin class...

/**
 * This class to store SAP Mapped Columns obtained from
 * interface design
 */
class SAPMappedField { 

	public String tableName;
	public String colName;
	public String exp;
	public String colPos;
	
}//end of SAPMappedField class..

/**
 * This class is used to store SAP selected source tables obtained from
 * interface design
 */
class SourceTable {
	
	private static SourceTable instance = null;
	public String resourceName = null;
	public String aliasName = null;
	public String tableOrderNo = null;

	public static SourceTable getInstance() {				
		if(instance == null) {
			instance = new SourceTable();
		}
		return instance;
	}
} //end of class SourceTable

class SAPTableInfo { 
	public String table_name;
	public String res_name;
	public String pop_tab_alias;
	
	public SAPTableInfo() {
		//default constructor
	}

	public SAPTableInfo(String tableName, String resName, String alias) {
		this.table_name = tableName;
		this.res_name = resName;
		this.pop_tab_alias = alias;
	}
}//end of class SAPTableInfo


/////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle India Ltd			   //
// ALL RIGHTS RESERVED.                                                    //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright //
// notice in the COPYRIGHT file in this directory.                         //
////////////////////////////////////////////////////////////////////////////

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
 
/**
 * @(#)OdiInterfaceMetadataHelper.java  1.00 11/24/2008
 *
 * Application : ODI SAP Knowledge Modules
 * Module      : SAP ERP Adapter
 * Author(s)   : Oracle.
 * About       :
 * Dependencies: JDK 1.4.2 API (with standard extensions),
 *
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

/**
 * <b>OdiInterfaceMetadataHelper</b> class is a data structure for storing the 
 * ODI interface metadata information of the selected tables, joins, columns, 
 * filter conditions and transformations. This information is used to construct
 * ABAP OPEN SQL select syntax.
 */
public class OdiInterfaceMetadataHelper {
	
	//Contains list of selected source tables in
	//interface design (SAPTable objects)
	public ArrayList sSAPTables = null;
	
	//contains list of Source columns of all the tables-- SAPField
	//Objects
	private static OdiInterfaceMetadataHelper inst = null;
	public ArrayList sSAPFields = null;

	//List of all the mapped columns in the interface
	//including aggregate fucntion exprssions
	public ArrayList sSAPMappedCols = null;
	
	//List of table joins with exprssions indicating whcih
	//cols are joined
	public ArrayList sSAPJoins = null;	
	
	//List of all filters defined in interface design	
	public ArrayList sSAPFilters = null;

	//From Expression of the interface design
	String sFromExpr = null;

	//List of Group by columns 
	ArrayList sGrpByList = null;		

	//Logger Instance..
	private OdiSAPLogger sapLogger = null;
	
	public static OdiInterfaceMetadataHelper getInstance(OdiSAPLogger logger) {				
	if(inst == null) {
		inst = new OdiInterfaceMetadataHelper(logger);
	}
		return inst;
	}

	
	//Constructor
	public OdiInterfaceMetadataHelper(OdiSAPLogger logger){ 
		this.sapLogger = logger;
	}

	/**
	 * This method parses the selected tables pattern
	 * passed from the ODI api's. It creates arraylist
	 * of SAPTable objects.
	 *
	 * @pPattern selected tables pattern string
	 */
	public void setSelectedTables(String pPattern) {
		
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper - Selected tables pattern :" + pPattern);
		sSAPTables = new ArrayList();
		
		if(pPattern != "") {
			StringTokenizer sTabsTokens = new StringTokenizer(pPattern, "~~");
			String tabExpr = null;
			SAPTable sTable = null;	
			while(sTabsTokens.hasMoreTokens()) {
				tabExpr = sTabsTokens.nextToken();
				
				String[] tabProps = tabExpr.split("#");
				//sapLogger.log(sapLogger.INFO, "Table Name : " + tabProps.length);
				//sapLogger.log(sapLogger.INFO, "Table Name : " +tabProps[2]);
				String[] resource_name = tabProps[1].trim().split(",");
				String tableName = resource_name[1].replaceAll(""+(char)34,"");
				sapLogger.log(sapLogger.INFO, "OdiInterfaceMetaDataHelper.tableName<<<<<>>>>>>>" + tableName);
				sTable = new SAPTable(tabProps[0].trim(),tableName.trim(),tabProps[2].trim(),"");
				sSAPTables.add(sTable);
			}
		}
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: No of Selected tables pattern :" + sSAPTables.size());
	}//end setSelectedTables method..

	/**
	 * This method parses the selected columns pattern
	 * for all the selected tables in the interface
	 * design, creates a arraylist of SAPField objects.
	 *
	 * @pPattern selected columns pattern string
	 */
	public void setSelectedColumns(String pPattern) {
		
		//sapLogger.log(sapLogger.INFO, "Selected Columns pattern :" + pPattern);
		
	}//end of setSelectedColumns method ..
	
	/**
	 * This method parses the complete metadata of the
	 * interface design..created the list of SAP Tables and List of
	 * SAPFields filling up all the metadata of the tables and columns
	 *
	 * @pPattern complete interface metadata pattern string 	
	 */ 
	public void setInterfaceMetadata(String pPattern) {
		
		//sapLogger.log(sapLogger.INFO, "Interface Metadata pattern :" + pPattern);
		
	}//end of setInterfaceMetadata method..

	/**
	 * This method parses all the mapped columns along with
	 * aggregate functions applied on the columns in the interface
	 * design
	 *
	 * @pPattern mapped columns pattern string	
	 */ 
	public void setMappedColumns(String pPattern) {
		
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: Interface Mapped Columns :" + pPattern);
		sSAPMappedCols = new ArrayList();
		
		if(pPattern != "") {
			StringTokenizer mColsTokens = new StringTokenizer(pPattern, "~~");
			String mColExpr = null;	
			while(mColsTokens.hasMoreTokens()) {
				mColExpr = mColsTokens.nextToken();
				//sapLogger.log(sapLogger.INFO, ">>>>>> mColExpr: "+mColExpr);
				sSAPMappedCols.add(mColExpr);
			}
		}
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: No of Interface Mapped Columns :" + sSAPMappedCols.size());
	}//end of setMappedColumns method..

	/**
	 * This method parses all the join conditions defined
	 * in the interface design..
	 *
	 * @pPattern joins pattern string.
	 */ 
	public void setJoinConditions(String pPattern) {
		
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: Interface Joins :" + pPattern);
		sSAPJoins = new ArrayList();
		
		if(pPattern.length() != 0) {
			StringTokenizer joinTokens = new StringTokenizer(pPattern, "~~");
			String joinExpr = null;	
			while(joinTokens.hasMoreTokens()) {
				joinExpr = joinTokens.nextToken();
				sSAPJoins.add(joinExpr);
			}
		}else {	
			sapLogger.log(sapLogger.INFO, "Coming in setting empty Join");	
			String jExp = "";
			sSAPJoins.add(jExp);
		}
		
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: No of Interface Joins :" + sSAPJoins.size());
	}//end of setJoinConditions method..

	/**
	 * This method parses all the filter expression defined
	 * in the interface design..
	 *
	 * @pPattern filter conditions pattern string
	 */
	public void setFilterConditions(String pPattern) {
		
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: Interface Filters :" + pPattern);
		
		sSAPFilters = new ArrayList();
		
		if(pPattern != "") {
			StringTokenizer filTokens = new StringTokenizer(pPattern, "~~");
			String filtrExpr = null;	
			while(filTokens.hasMoreTokens()) {
				filtrExpr = filTokens.nextToken();
				sSAPFilters.add(filtrExpr);
			}
		}

		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: No Interface Filters :" + sSAPFilters.size());
	}

	/**
	 * This method gets the complete from expression of
	 * interface design. 
	 */
	public void setFromCondition(String pPattern) {
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: Interface From Condition :" + pPattern);
		
		if(pPattern != "") {
			sFromExpr = pPattern;
		}
	} 

	/**
	 * This method gets the complete list of columns which goes under
	 * group by condition.
	 * Each columns is seperated by ~~ 
	 */
	public void setGroupByList(String pPattern) {
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: Interface Group By Expression :" + pPattern);
		
		sGrpByList = new ArrayList();

		if(pPattern.length() != 0) {
			StringTokenizer sGrpTokens = new StringTokenizer(pPattern, "~~");
			String grpExpr = null;
			while(sGrpTokens.hasMoreTokens()) {
				grpExpr = sGrpTokens.nextToken();
				sGrpByList.add(grpExpr);
			}
		} else {
			String gEx = "";
			sGrpByList.add(gEx);
		}
		
		sapLogger.log(sapLogger.INFO, "OdiInterfaceMetadataHelper: No Group by Columns :" + sGrpByList.size());
	} 

}// End of OdiInterfaceMetadataHelper class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle	         		                   //
// ALL RIGHTS RESERVED.                                                                                  //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright //
// notice in the COPYRIGHT file in this directory.                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/**
 * @(#)OdiSAPRef.java  1.00 11/24/2008
 *
 * Application : ODI SAP Knowledge Modules
 *
 * Module      : ABAP Program genaration api
 *
 * Author(s)   : Oracle,
 *
 * About       :
 *
 * Dependencies: JDK 1.4.2 API (with standard extensions),
 *
 *
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

import java.util.*;

/**
 * This class is a api class which supports methods to constructs SAP ABAP 
 * syntax expresssions for constructing OPEN SQL ABAP Select Statement
 *
 * This class uses ODI interface defintion information using their API to 
 * build selected columns, selected tables, joins, filter conditions and 
 * transformations information ABAP expressions.
 *
 * The api's provided in this class are used as substitution api's to 
 * dynamically generate ABAP programs for an interface design.
 *
 * So all the api's provided are generic and will apply to any ABAP program
 * generation.
 * 
 */
public class OdiSAPRef {

	//Interface metadata helper class
	private OdiInterfaceMetadataHelper iHelper = null;
	

	//Instance for OdiSAPRef
	private static OdiSAPRef ins = null;

	//logger class
	private OdiSAPLogger sapLogger = null;	

	//List of all selected source tables
	//defined in interface design --
	//arraylist will have ojects of SAPTable class
	public ArrayList sSrcTables = null;
	
	//List of all the mapped columns -- 
	//arraylist will have objects of SAPMappedField class
	private ArrayList sMappedCols = null;
	
	//list of all joins conditions -- list of
	//SAPJoin objects.
	private ArrayList sJoinsExpr = null;
	
	//list of all filter strings
	private ArrayList sFiltersExpr = null;

	//list of all grp by columns
	private ArrayList sGrpByExpr = null;
	
	//Name of the last table
	public String lastTable = null;

	//from expression of the interface desing
	private String sFromExpr = null;

	public boolean CROSS_INTERFACE = false;

	public LinkedHashSet hsMoveCol = new LinkedHashSet();
	
	/**
	 * Constructor to instantiate the class
	 */
	public OdiSAPRef(OdiInterfaceMetadataHelper iHelper, OdiSAPLogger sLogger) {
		this.iHelper = iHelper;
		this.sapLogger = sLogger;

		//initialize the interface metadata first
		//which will be used in generating the api
		initializeMetaData();

	}//End of Default Constructor


	public static OdiSAPRef getInstance(OdiInterfaceMetadataHelper iHelper, OdiSAPLogger sLogger) {
	if(ins == null) {
		ins = new OdiSAPRef(iHelper,sLogger);
	}
		return ins;
	}

	
	/**
	 * This strores the metadata of the selected tables, columns,
	 * joins, filter expressions and transformations. This metadata
	 * information of the interface design will be used to constructs the
	 * list of tables, columns and all the required expressions for
	 * generating ABAP program.
	 */ 
	private void initializeMetaData() {
		
		//get the list of all source tables used in
		//interface design
		sSrcTables = iHelper.sSAPTables;		
		
		//get the list of mapped columns from the 
		//metadata helper and parse each of the mapped columns
		//to build as arraylist of SAPMappedField class objects
		if(iHelper.sSAPMappedCols != null) {
			sMappedCols = parseRawMappedCols(iHelper.sSAPMappedCols);
		}

		//initialize joins list as passed from odi
		if(iHelper.sSAPJoins != null) {
			sJoinsExpr = parseRawJoinsExpr(iHelper.sSAPJoins);
		}	
		
		//Initialize filters list as passed from odi
	       	sFiltersExpr = iHelper.sSAPFilters;
		
		//Initialize Group By list as passed from odi
		sGrpByExpr = iHelper.sGrpByList;
		
		//Initialize from expression
		this.sFromExpr = iHelper.sFromExpr;	
		
		//check the interface type.
		/*for(int i=0; i < sSrcTables.size(); i++) {
			SAPTable sT = (SAPTable)sSrcTables.get(i);
			if((sT.type).equalsIgnoreCase("Clustered") || (sT.type).equalsIgnoreCase("POOL")) {
				if(sSrcTables.size() > 1) {
					CROSS_INTERFACE = true;
				}
				break;
			}
		}*/	

	}//end of initializeMetaData method.
	
	/**
	 * Getting Odi Variable Name from filter condition
	 * @return StringBuffer : Odi Variable Name
	 */
	public StringBuffer getOdiName(){
        StringBuffer filtrExpSubStr = new StringBuffer();
        String optr = null;
       // StringBuffer strExp = new StringBuffer();
        int counter = 0;
        for(int i=0;i<sFiltersExpr.size();i++){
        	//sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() "+sFiltersExpr.get(i));
            String val = sFiltersExpr.get(i).toString();
             if(val.indexOf(" AND ") != -1){
                 String []fSplit = val.split(" AND ");
                 for(int j = 0; j < fSplit.length; j++) {

                     if(fSplit[j].indexOf(" OR ")!= -1){
                         String []ORSplit = fSplit[j].split(" OR ");
                         for(int m = 0; m < ORSplit.length; m++) {
                            if(counter>0){
                                filtrExpSubStr.append("|");
                            }
                           // sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() Final String AND OR: "+ORSplit[m]);
                            optr = getOperator(ORSplit[m].trim());
                            //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() OPERATOR IS : "+optr);
                            filtrExpSubStr.append(getOdiNameInLkm(ORSplit[m].trim(),optr));
                            counter++;
                         }
                     } else {
                            if(counter>0){
                                filtrExpSubStr.append("|");
                            }
                            //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() Final String AND Only: "+fSplit[j]);
                            optr = getOperator(fSplit[j].trim());
                            //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() OPERATOR IS : "+optr);
                            filtrExpSubStr.append(getOdiNameInLkm(fSplit[j].trim(),optr));
                            counter++;
                     }
                 }
            }else if(val.indexOf(" OR ")!= -1){
                     String []ORSplit = val.split(" OR ");
                     for(int m = 0; m < ORSplit.length; m++) {
                    	// sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() Final String OR if: "+ORSplit[m]);
                         if(ORSplit[m].indexOf(" AND ")!= -1){
                            String []ANDSplit = ORSplit[m].split(" AND ");
                            for(int n = 0; m < ANDSplit.length; m++) {
                                if(counter>0){
                                    filtrExpSubStr.append("|");
                                }
                                //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() Final String OR AND: "+ANDSplit[n]);
                                optr = getOperator(ANDSplit[n].trim());
                               // sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() OPERATOR IS : "+optr);
                                filtrExpSubStr.append(getOdiNameInLkm(ANDSplit[n].trim(),optr));
                                counter++;
                            }
                         }else{
                            if(counter>0){
                                filtrExpSubStr.append("|");
                            }
                            //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() Final String OR only: "+ORSplit[m]);
                            optr = getOperator(ORSplit[m].trim());
                            sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() OPERATOR IS : "+optr);
                            filtrExpSubStr.append(getOdiNameInLkm(ORSplit[m].trim(),optr));
                            counter++;
                        }//End of  if(ORSplit[m].indexOf(" AND ")!= -1)
                   }//End of  for(int m = 0; m < ORSplit.length; m++)
            }else{
				if(counter>0){
								filtrExpSubStr.append("|");
				}
            	optr = getOperator(val.trim());
            	sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() OPERATOR IS : "+optr);
                filtrExpSubStr.append(getOdiNameInLkm(val.trim(),optr));
                counter++;
            }//End of else part of if(val.indexOf(" AND ") != -1)
             
             
         }//End of For Loop

        sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiName() ODI NAME Final String: "+filtrExpSubStr);
        return filtrExpSubStr;
    }//End of getOdiName()
	
	/**
	 * 
	 * @param condn
	 * @param oprt
	 * @return
	 */
	public StringBuffer getOdiNameInLkm(String condn,String oprt){
	     StringBuffer strExp = new StringBuffer();
	     StringTokenizer st1 = new StringTokenizer(condn.toString(),oprt.trim());
	            while(st1.hasMoreTokens()){
	                String odi = st1.nextToken().trim();
	                if(odi.indexOf('#') != -1){
	                     if(odi.indexOf(' ') != -1){
	                         String app = odi.substring(odi.indexOf((char)35),odi.indexOf((char)32));
	                         strExp.append(app.trim().replaceAll("#","IV_"));
	                     }else{
	                         strExp.append(odi.trim().replaceAll("#","IV_"));
	                     }
	                }
	            }//End of while(st1.hasMoreTokens())
	        return strExp; 
	}//End of  getOdiNameInLkm()

	/**
	 * Getting Odi Variable Value from filter condition
	 * @return StringBuffer : Odi Variable Value
	 */
	 public StringBuffer getOdiValue(){
	        StringBuffer filtrExpSubStr = new StringBuffer();
	        String optr = null;
	        StringBuffer strExp = new StringBuffer();
	        int counter = 0;
	        for(int i=0;i<sFiltersExpr.size();i++){
	        	sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue() "+sFiltersExpr.get(i));
	            String val = sFiltersExpr.get(i).toString();
	             if(val.indexOf(" AND ") != -1){
	                 String []fSplit = val.split(" AND ");
	                 for(int j = 0; j < fSplit.length; j++) {
	                    
	                     if(fSplit[j].indexOf(" OR ")!= -1){
	                         String []ORSplit = fSplit[j].split(" OR ");
	                         for(int m = 0; m < ORSplit.length; m++) {
	                            if(counter>0){
	                                filtrExpSubStr.append("|");
	                            }
	                            //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue() Final String AND OR: "+ORSplit[m]);
	                            optr = getOperator(ORSplit[m].trim());
	                            //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue() OPERATOR IS : "+optr);
	                            filtrExpSubStr.append(getOdiValueInLkm(ORSplit[m].trim(),optr));
	                            counter++;
	                         }
	                     } else {
	                            if(counter>0){
	                                filtrExpSubStr.append("|");
	                            }
	                            //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue() Final String AND Only: "+fSplit[j]);
	                            optr = getOperator(fSplit[j].trim());
	                            //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue() OPERATOR IS : "+optr);
	                            filtrExpSubStr.append(getOdiValueInLkm(fSplit[j].trim(),optr));
	                            counter++;
	                     }
	                 }
	            }else if(val.indexOf(" OR ")!= -1){
	                     String []ORSplit = val.split(" OR ");
	                     for(int m = 0; m < ORSplit.length; m++) {
	                    	 //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue() Final String OR if: "+ORSplit[m]);
	                         if(ORSplit[m].indexOf(" AND ")!= -1){
	                            String []ANDSplit = ORSplit[m].split(" AND ");
	                            for(int n = 0; m < ANDSplit.length; m++) {
	                                if(counter>0){
	                                    filtrExpSubStr.append("|");
	                                }
	                                System.out.println("Final String OR AND: "+ANDSplit[n]);
	                                optr = getOperator(ANDSplit[n].trim());
	                                //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue()OPERATOR IS : "+optr);
	                                filtrExpSubStr.append(getOdiValueInLkm(ANDSplit[n].trim(),optr));
	                                counter++;
	                            }
	                         }else{
	                            if(counter>0){
	                                filtrExpSubStr.append("|");
	                            }
	                            //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue()Final String OR only: "+ORSplit[m]);
	                            optr = getOperator(ORSplit[m].trim());
	                            ///sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue()OPERATOR IS : "+optr);
	                            filtrExpSubStr.append(getOdiValueInLkm(ORSplit[m].trim(),optr));
	                            counter++;
	                        }
	                   }//End of for(int m = 0; m < ORSplit.length; m++)
	             }else{
							if(counter>0){
								filtrExpSubStr.append("|");
							}
	                        optr = getOperator(val.trim());
	                        //sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue()OPERATOR IS : "+optr);
	                        filtrExpSubStr.append(getOdiValueInLkm(val.trim(),optr));
	                        counter++;
	             }//End of if(val.indexOf(" AND ") != -1)
	         }//End of for loop for(int i=0;i<sFiltersExpr.size();i++)

	        sapLogger.log(sapLogger.INFO, ">>>>>>odiRef getOdiValue() ODI NAME Final String: "+filtrExpSubStr);
	        return filtrExpSubStr;
	 }//End of getOdiValue()
	 
	 /**
	  * 
	  * @param condn
	  * @param oprt
	  * @return
	  */
	 public StringBuffer getOdiValueInLkm(String condn,String oprt){
	StringBuffer strExp = new StringBuffer();
	StringTokenizer st1 = new StringTokenizer(condn.toString(),oprt.trim());
	while(st1.hasMoreTokens()){
		String odi = st1.nextToken().trim();
		if(odi.indexOf('#') != -1){
			if(odi.indexOf((char)32) != -1){
				 if(odi.indexOf((char)41) != -1){
					 String app = odi.substring(odi.indexOf((char)35),odi.indexOf((char)41));
					 strExp.append(app.trim());
				 }else{
					 String app = odi.substring(odi.indexOf((char)35),odi.indexOf((char)32));
					 strExp.append(app.trim());
				 }
		 }else if(odi.indexOf((char)41) != -1){
			 String app = odi.substring(odi.indexOf((char)35),odi.indexOf((char)41));
			 strExp.append(app.trim());
		 }else{
			 strExp.append(odi.trim());
		 }
	  }
   }
	return strExp;
}//End of getOdiValueInLkm(String arr1,String oprt)

	public Iterator getSrcTableIterator() {
		
		ArrayList joinTableList = new ArrayList();
		String fromExp = odiRef.getFrom();
		sapLogger.log(sapLogger.INFO, ">>>>>> OdiSAPRef - sSrcTables.size(): "+sSrcTables.size());
		
		//SAP ABAP Technology supports only order join, if more than 1 table join 
		//is there in the interface
		if((fromExp.indexOf("JOIN") == -1) && (sSrcTables.size() > 1)) {
			throw new Exception("SAP ABAP supports only order join!!!");
		}
		Iterator selectedTableItr = sSrcTables.iterator();

		int tabOrder = 1;
		SourceTable sourceTable = null;
		while(selectedTableItr.hasNext()) {
			sourceTable = new SourceTable();
			SAPTable sTable = (SAPTable)selectedTableItr.next();
			sourceTable.resourceName = sTable.name;
			sourceTable.aliasName = sTable.alias;
			sourceTable.tableOrderNo = new Integer(tabOrder).toString();
			lastTable = sourceTable.aliasName.trim(); 
			joinTableList.add(sourceTable);
			tabOrder++;
			//sapLogger.log(sapLogger.INFO, ">>>sourceTable.resourceName: "+sourceTable.resourceName);
			//sapLogger.log(sapLogger.INFO, ">>>sourceTable.aliasName: "+sourceTable.aliasName);
			//sapLogger.log(sapLogger.INFO, ">>> sourceTable.tableOrderNo: "+sourceTable.tableOrderNo);
		}
		return joinTableList.iterator();
	}//end of getSrcTableIterator() method
	
	/**
	 * 
	 * @return Iterator
	 */
	public Iterator getRevSrcTableIterator() {
		
		sapLogger.log(sapLogger.INFO, "OdiSAPRef.getRevSrcTableIterator() method called");
		Iterator itr = getSrcTableIterator();
		ReverseIterator reverseItr = new ReverseIterator(itr);
		while(reverseItr.hasNext()) {
			SourceTable objSourceTable = (SourceTable)reverseItr.next();
			sapLogger.log(sapLogger.INFO, "Reverse: "+objSourceTable.resourceName + "     "+objSourceTable.aliasName);
		}

		return reverseItr;
	}//end of getRevSrcTableIterator() method

	
	public String getColList(String pStart, String pPattern, String pSeparator, String pEnd) {
		
		StringBuffer strExp = new StringBuffer();

		//First append the start string to the buffer
		if(pStart != "") {
			strExp.append(pStart);
		}	
		
		//The expressions we require for SAP ABAP program generation are
		//[CX_COL_NAME] TYPE [TABLE_NAME]-[COL_NAME] == for internal structure
		//[TABLE_NAME]~[COL_NAME] == for select statement
		//<internal table name>-[COL_NAME] == for output to file
		
		//for all the mapped columns replace the pPattern passed
		//with [xxx] approriate parameters and use pSeperator to
		//seperate each of the expression generated for the mapped
		//columns
		if(sMappedCols != null) {
			for(int i=0; i < sMappedCols.size(); i++) {
			
				SAPMappedField sMapField = (SAPMappedField)sMappedCols.get(i);			
			
				String parsedPattern = parseAttributes(pPattern);
				//sapLogger.log(sapLogger.INFO, "Removed pattern expression '[' ']' :" + parsedPattern); 
			
			
				//replace [TABLE_NAME] variable
				String rTable = parsedPattern.replaceAll("TABLE_NAME", sMapField.tableName);

				//replace [COL_NAME] variable
				String rColumn = rTable.replaceAll("COL_NAME", sMapField.colName);

				//replace [COL_POS] variable
			    	String rPos = rColumn.replaceAll("COL_POS", sMapField.colPos);

				//replace [EXPRESSION] variable
				String colEx = "";
				if((sMapField.exp).indexOf("(") != -1) {
					String aggExp = (sMapField.exp).substring(0, (sMapField.exp).indexOf("(")+1) + " " + (sMapField.exp).substring((sMapField.exp).indexOf("(")+1, (sMapField.exp).indexOf(")")) + " )";
					colEx = aggExp;
				}else {
					colEx = sMapField.exp;
				}
				String eExpr = rPos.replaceAll("EXPRESSION", colEx);	
			
				strExp.append(eExpr);
				if(pEnd.equals("")) {
					strExp.append(pSeparator + "\u000A");
					strExp.append("\u000A");
				}else{
					if(pSeparator.equals(",") && i ==  sMappedCols.size() -1) {
						//cannot add "," separator at the end of the statement
					}else {
						strExp.append(pSeparator + " \u000A");
						strExp.append("\u000A");
					}
				}		
			}
			//append the end of the string
			strExp.append(pEnd);
		}
		sapLogger.log(sapLogger.INFO, "OdiSAPRef.getColList() - ABAP Syntax String : " + strExp.toString());
		return strExp.toString();
	}//end of getColList method

			
	
	/**
	 * 
	 * @param pStart
	 * @param pPattern
	 * @param pSeparator
	 * @param pEnd
	 * @return Column List of all table by appending C and column number to it
	 */
		public String getColListForTarget(String pStart, String pPattern, String pSeparator, String pEnd) {
			
			StringBuffer strExp = new StringBuffer();

			//First append the start string to the buffer
			if(pStart != "") {
				strExp.append(pStart);
			}	
			
			//The expressions we require for SAP ABAP program generation are
			//[CX_COL_NAME] TYPE [TABLE_NAME]-[COL_NAME] == for internal structure
			//[TABLE_NAME]~[COL_NAME] == for select statement
			//<internal table name>-[COL_NAME] == for output to file
			
			//for all the mapped columns replace the pPattern passed
			//with [xxx] approriate parameters and use pSeperator to
			//seperate each of the expression generated for the mapped
			//columns
			if(sMappedCols != null) {
				for(int i=0; i < sMappedCols.size(); i++) {
				
					SAPMappedField sMapField = (SAPMappedField)sMappedCols.get(i);			
				
					String parsedPattern = parseAttributes(pPattern);
					//sapLogger.log(sapLogger.INFO, "Removed pattern expression '[' ']' :" + parsedPattern); 
				
				
					//replace [TABLE_NAME] variable
					String rTable = parsedPattern.replaceAll("TABLE_NAME", sMapField.tableName);

					//replace [COL_NAME] variable
					String rColumn = rTable.replaceAll("COL_NAME", sMapField.colName);

					//replace [COL_NAME_TARGET] variable
					String rColumnTarget = rColumn.replaceAll("COL_TARGET", "C"+i+"_"+sMapField.tableName+"_"+sMapField.colName);

					//Adding to HashMoveCol for Final Move
					hsMoveCol.add("C"+i+"_"+sMapField.tableName.trim()+"_"+sMapField.colName.trim());

					//replace [COL_POS] variable
				    	String rPos = rColumnTarget.replaceAll("COL_POS", sMapField.colPos);

					//replace [EXPRESSION] variable
					String colEx = "";
					if((sMapField.exp).indexOf("(") != -1) {
						String aggExp = (sMapField.exp).substring(0, (sMapField.exp).indexOf("(")+1) + " " + (sMapField.exp).substring((sMapField.exp).indexOf("(")+1, (sMapField.exp).indexOf(")")) + " )";
						colEx = aggExp;
					}else {
						colEx = sMapField.exp;
					}
					String eExpr = rPos.replaceAll("EXPRESSION", colEx);	
				
					strExp.append(eExpr);
					if(pEnd.equals("")) {
						strExp.append(pSeparator + "\u000A");
						//strExp.append("\u000A");
					}else{
						if(pSeparator.equals(",") && i ==  sMappedCols.size() -1) {
							//cannot add "," separator at the end of the statement
						}else {
							strExp.append(pSeparator + " \u000A");
							//strExp.append("\u000A");
						}
					}		
				}
				//append the end of the string
				strExp.append(pEnd);
			}
			sapLogger.log(sapLogger.INFO, "OdiSAPRef.getColListForTarget() - ABAP Syntax String : " + strExp.toString());
			return strExp.toString();
		}//end of getColListForTarget method
		
		/**
		 * This method returns list of mapped Columns selected for all the 
		 * tables used in interface design.
		 * Parse the PPattern and generate the expression for each of the
		 * mapped columns the Attributes supported by this method
		 * are [TABLE_NAME], [COL_NAME] and [EXPRESSION]
		 *
		 * @pStart start of the expression which needs to be generated
		 * @pPattern required pattern in which the string needs to generated
		 * @pSeparator seperator character to separate expressions
		 * @pEnd end of line character.
		 */
		public String getSAPFinalMoveColList(String pStart, String pPattern, String pSeparator, String pEnd) {
		
			StringBuffer strExp = new StringBuffer();
			ArrayList hashvalue = new ArrayList();
			//First append the start string to the buffer
			if(pStart != "") {
				strExp.append(pStart);
			}	
			//The expressions we require for SAP ABAP program generation are
			//[COL_NAME] TYPE [TABLE_NAME]-[COL_NAME] == for internal structure
			//[TABLE_NAME]~[COL_NAME] == for select statement
			//<internal table name>-[COL_NAME] == for output to file
			
			//for all the mapped columns replace the pPattern passed
			//with [xxx] approriate parameters and use pSeperator to
			//seperate each of the expression generated for the mapped
			//columns
			if(sMappedCols != null) {
				int i=0;
				for(Iterator itr= hsMoveCol.iterator();itr.hasNext();) {
					
					SAPMappedField sMapField = (SAPMappedField)sMappedCols.get(i);			
				
					String parsedPattern = parseAttributes(pPattern);
					//sapLogger.log(sapLogger.INFO, "Removed pattern expression '[' ']' :" + parsedPattern); 
				
				
					//replace [TABLE_NAME] variable
					String rTable = parsedPattern.replaceAll("TABLE_NAME", sMapField.tableName);

					//replace [COL_NAME] variable
					String ColumnTarget =(String)itr.next() ;
					//sapLogger.log(sapLogger.INFO, "Target Column : " + ColumnTarget);
					
					String ColumnName = ColumnTarget.substring(ColumnTarget.indexOf('_')+1,ColumnTarget.length());
					
					//sapLogger.log(sapLogger.INFO, " Column Name : " + ColumnName);
					
					String rColumn = rTable.replaceAll("COL_NAME", ColumnName.trim());

					//replace [COL_NAME_TARGET] variable
					String rColumnTarget = rColumn.replaceAll("COL_TARGET", ColumnTarget.trim());
					
					//replace [COL_POS] variable
				    	String rPos = rColumnTarget.replaceAll("COL_POS", sMapField.colPos);

					//replace [EXPRESSION] variable
					String colEx = "";
					if((sMapField.exp).indexOf("(") != -1) {
						String aggExp = (sMapField.exp).substring(0, (sMapField.exp).indexOf("(")+1) + " " + (sMapField.exp).substring((sMapField.exp).indexOf("(")+1, (sMapField.exp).indexOf(")")) + " )";
						colEx = aggExp;
					}else {
						colEx = sMapField.exp;
					}
					String eExpr = rPos.replaceAll("EXPRESSION", colEx);	
				
					strExp.append(eExpr);
					if(pEnd.equals("")) {
						strExp.append(pSeparator + " \u000A");
						//strExp.append("\u000A");
					}else{
						if(pSeparator.equals(",") && i ==  hsMoveCol.size() -1) {
							//cannot add "," separator at the end of the statement
						}else {
							strExp.append(pSeparator + " \u000A");
							//strExp.append("\u000A");
						}
					}
					i++;
				}
				//append the end of the string
				strExp.append(pEnd);
			}
			sapLogger.log(sapLogger.INFO, "OdiSAPRef.getSAPFinalMoveColList() - ABAP Syntax String : " + strExp.toString());
			return strExp.toString();
		}//end of getSAPFinalMoveColList method
		
	
		/**
		 * This method returns distinct columns for target table 
		 * @param pStart
		 * @param pPattern
		 * @param pSeparator
		 * @param pEnd
		 * @return String  list of distinct Column
		 */
		public String getColListForFinalTable(String pStart, String pPattern, String pSeparator, String pEnd) {
			
			StringBuffer strExp = new StringBuffer();
			LinkedHashSet hsfinaltable = new LinkedHashSet();
			ArrayList arrNotDuplicate = new ArrayList();
			//First append the start string to the buffer
			if(pStart != "") {
				strExp.append(pStart);
			}	
			//The expressions we require for SAP ABAP program generation are
			//[CX_COL_NAME] TYPE [TABLE_NAME]-[COL_NAME] == for internal structure
			//[TABLE_NAME]~[COL_NAME] == for select statement
			//<internal table name>-[COL_NAME] == for output to file
			
			//for all the mapped columns replace the pPattern passed
			//with [xxx] approriate parameters and use pSeperator to
			//seperate each of the expression generated for the mapped
			//columns
			if(sMappedCols != null) {
				for(int i=0; i < sMappedCols.size(); i++) {
					boolean isDuplicate = false;
					
					SAPMappedField sMapField = (SAPMappedField)sMappedCols.get(i);			
					String parsedPattern = parseAttributes(pPattern);
				
					//replace [TABLE_NAME] variable
					String rTable = parsedPattern.replaceAll("TABLE_NAME", sMapField.tableName.trim());

					//replace [COL_NAME] variable
					String rColumn = rTable.replaceAll("COL_NAME", sMapField.colName.trim());
					if(arrNotDuplicate.contains(sMapField.tableName.trim()+"-"+sMapField.colName.trim())) {						
						//sapLogger.log(sapLogger.INFO, "Is Duplicate "+sMapField.colName.trim()); 
						isDuplicate = true;
					}else {
						arrNotDuplicate.add(sMapField.tableName.trim()+"-"+sMapField.colName.trim());
						//sapLogger.log(sapLogger.INFO, "Not Duplicate "+sMapField.colName.trim()); 
					}
					//replace [COL_POS] variable
				    String rPos = rColumn.replaceAll("COL_POS", sMapField.colPos.trim());

					//replace [EXPRESSION] variable
					String colEx = "";
					if((sMapField.exp).indexOf("(") != -1) {
						String aggExp = (sMapField.exp).substring(0, (sMapField.exp).indexOf("(")+1) + " " + (sMapField.exp).substring((sMapField.exp).indexOf("(")+1, (sMapField.exp).indexOf(")")) + " )";
						colEx = aggExp;
					}else {
						colEx = sMapField.exp;
					}
					String eExpr = rPos.replaceAll("EXPRESSION", colEx.trim());	
				
					//strExp.append(eExpr);
					if(isDuplicate!=true) {
						hsfinaltable.add((eExpr).trim());
					}
				}
				//append the end of the string
				 if((hsfinaltable != null) && (hsfinaltable.size() > 0)) {
			        	Iterator hsItr = hsfinaltable.iterator();
			        	while(hsItr.hasNext()) {
			        		strExp.append(hsItr.next()+" ");
			        		
			        		if(pEnd.equals("")) {
								strExp.append(pSeparator + "\u000A");
								//strExp.append("\u000A");
							}else {
								if(pSeparator.equals(",") && i ==  sMappedCols.size() -1) {
									//cannot add "," separator at the end of the statement
								}else {
									strExp.append(pSeparator + " \u000A");
									//strExp.append("\u000A");
								}//end of inner else
							}//end of outer else
			        	}//end of while(hsItr.hasNext())
				 }//end of if((hsfinaltable != null) && (hsfinaltable.size() > 0))
				 strExp.append(pEnd);
			}
			sapLogger.log(sapLogger.INFO, "OdiSAPRef.getColListForFinalTable() - ABAP Syntax String : " + strExp.toString());
			return strExp.toString();
		}//end of getColListForFinalTable method
	

	/**
	 * This method parses the raw mapped cols expression
	 * and constructs list of SAPMappedField objects
	 */
	public ArrayList parseRawMappedCols(ArrayList mappedRawColsList) {
		ArrayList sMCols = new ArrayList();
		
		String tabName = null;
		String colName = null;
		String expr = null;
		String mColExpr = null;
		SAPMappedField smField = null;
		for(int i=0; i < mappedRawColsList.size(); i++) {
			mColExpr = (String)mappedRawColsList.get(i);
			//sapLogger.log(sapLogger.INFO, "Mapped Column : " + mColExpr);
			String checkExpr = "";
			if(mColExpr.indexOf("(") != -1)
				checkExpr = mColExpr.substring(mColExpr.indexOf("(") + 1, mColExpr.indexOf(")"));
			else
				checkExpr = mColExpr;

		        //sapLogger.log(sapLogger.INFO, "Mapped Column without Expression: " + checkExpr);	
						
			smField = new SAPMappedField();
			
			tabName = checkExpr.substring(0, checkExpr.indexOf("."));

			Iterator itr = getSrcTableIterator();
			SourceTable srcTab;
			while(itr.hasNext()) {
				srcTab = (SourceTable)itr.next();
				if(tabName.equalsIgnoreCase(srcTab.aliasName)) {
					tabName = srcTab.resourceName;
					break;
				}
			}

			colName = checkExpr.substring(checkExpr.indexOf(".") + 1, checkExpr.length());
			expr = mColExpr.replace('.', '~');
			
			smField.tableName = tabName;
			smField.colName = colName;
			smField.exp = expr;
			smField.colPos = "C"+new Integer(i).toString()+"_";			
			//sapLogger.log(sapLogger.INFO, "Mapped Table Name: " + tabName);
			//sapLogger.log(sapLogger.INFO, "Mapped Column Name: " + colName);
			//sapLogger.log(sapLogger.INFO, "Mapped Expression: " + expr);
			sMCols.add(smField);
		}
		return sMCols;
	}//parseRawMappedCols method.


	/**
	 * This method constructs the list of SAPJoin class objects 
	 * for each of the joins defined in the interface design.
	 */
	public ArrayList parseRawJoinsExpr(ArrayList joinsExpr) {
		ArrayList joinedList = new ArrayList();	
		
		SAPJoin sJoin = null;
		String jExp = null;
		String opr = "";
		for(int i = 0; i < joinsExpr.size(); i++) {
			jExp = (String)joinsExpr.get(i);
			sJoin = new SAPJoin();
			sapLogger.log(sapLogger.INFO, "jExp Length : " + jExp.length());
			if(jExp.length() != 0) {
				String pTable = null;
				String jTable = null;
				String joinDef = null;
				ArrayList conds = new ArrayList();
				//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-Operator :1111111 ");
				String [] je = jExp.split(" AND ");
				//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-Operator :2222 "+je[0]);
				opr = getOperator(je[0]);
				//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-Operator : " + opr);
				String [] jTabs = je[0].split(opr);
				
				pTable = jTabs[0].substring(0, jTabs[0].indexOf(".")).replace('(', ' ').trim();
				//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-pTable111 : " + pTable);
				jTable = jTabs[1].substring(0, jTabs[1].indexOf(".")).replace(')', ' ').trim();
				//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-jTable1111 : " + jTable);
				
				Iterator itr = getSrcTableIterator();
				SourceTable srcTab;
				while(itr.hasNext()) {
					srcTab = (SourceTable)itr.next();
					//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-srcTab.aliasName : " + srcTab.aliasName);
					if(pTable.equalsIgnoreCase(srcTab.aliasName)) {
						pTable = srcTab.resourceName;
						//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-pTable2222 : " + pTable);
					}
					if(jTable.equalsIgnoreCase(srcTab.aliasName)) {
						jTable = srcTab.resourceName;
						//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-jTable2222 : " + jTable);
						break;
					}
				}

				for(int j=0; j < je.length; j++) {
					Iterator itr1 = getSrcTableIterator();
					SourceTable srcTab1;
					joinDef = je[j].toString();
					while(itr1.hasNext()) {
						srcTab1 = (SourceTable)itr1.next();
						//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-ALIAS------> : " + srcTab1.aliasName);
						if(je[j].indexOf(srcTab1.aliasName)!=-1){
							joinDef = joinDef.replaceAll(srcTab1.aliasName.trim(),srcTab1.resourceName.trim());
							//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-jTable------> : " + joinDef);
						}
					}
					conds.add(((joinDef.replace('.', '~')).replace('.', '~')).replaceAll(opr, ""+opr+""));
					
				}
				
				sJoin.primaryTable = pTable;
				sJoin.joinedTable = jTable;
				sJoin.conditions = conds;
				//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-pTable : " + pTable);
				//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-jTable : " + jTable);
				//sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-conds : " + conds);
				joinedList.add(sJoin);
				
			}else {
				//sapLogger.log(sapLogger.INFO, "Single table adding : ");
				sJoin.primaryTable = ((SAPTable)sSrcTables.get(0)).name;
				joinedList.add(sJoin);
			}
		}
		return joinedList;
	}//End of parseRawJoinsExpr method.
	
	public String getSapMappedAndJoinCols(String pStart, String pPattern, String pSeparator, String pEnd) {
		
		ArrayList mapJoinColList = new ArrayList();
		ArrayList uniqueColList = new ArrayList();
		StringBuffer sExpr = new StringBuffer();
		//taking mapped column from interface design
		if(sMappedCols != null) {
			Iterator itr = sMappedCols.iterator();
			SAPMappedField sapMappedCol = null;
	
			while(itr.hasNext()) {
				sapMappedCol = new SAPMappedField();
				sapMappedCol = (SAPMappedField) itr.next();
				if(!uniqueColList.contains(sapMappedCol.tableName.trim()+"~"+sapMappedCol.colName.trim())) {
					uniqueColList.add(sapMappedCol.tableName.trim()+"~"+sapMappedCol.colName.trim());
					mapJoinColList.add(sapMappedCol.tableName.trim()+"~"+sapMappedCol.colName.trim());
				}
			}//end of while(itr.hasNext())
			
			if(sSrcTables.size() > 1) {
				//taking column from join condition	
				Iterator joinItr = sJoinsExpr.iterator();
				///StringBuffer tabJoinCondition = new StringBuffer();
				SAPJoin sapJoin = null;
				while(joinItr.hasNext()) {
					sapJoin = new SAPJoin();
					sapJoin = (SAPJoin) joinItr.next();
					String pTable = sapJoin.primaryTable.trim();
					String jTable = sapJoin.joinedTable.trim();
			
					ArrayList condList = sapJoin.conditions;
					Iterator condItr = condList.iterator();
					int x = 0;
					while(condItr.hasNext()) {
						String joinCond = replaceOperator(condItr.next().toString());
						sapLogger.log(sapLogger.INFO, "OdiSAPRef.getSapMappedAndJoinCols()  joinCond ------->: "+joinCond);
						//if more than one join condition - [(MARA~MATNR = MARC~MATNR), MARA~MANDT = MARC~MANDT]
						StringTokenizer sToken = new StringTokenizer(joinCond.replaceAll("~", "-"), "=");
						int counter = 0;
						while(sToken.hasMoreTokens()) {
							String str = sToken.nextToken().trim();
							if(str.indexOf("(") != -1 || str.indexOf(")") != -1) {
								str = str.replaceAll("\(", "").replaceAll("\)","");
							}
							String joinColTab = str.substring(0, str.indexOf("-")).trim();
							String joinColumn = str.substring(str.indexOf("-")+1, str.length()).trim();
							if(!uniqueColList.contains(joinColTab+"~"+joinColumn)) {
								uniqueColList.add(joinColTab+"~"+joinColumn);
								mapJoinColList.add(joinColTab+"~"+joinColumn);
							}
							
							//mapJoinColList.add(str.substring(str.indexOf("-")+1, str.length()));
							
						}//end of inner while
					}//end of sub-outer while
				}//end of outer while
			}//end of if(sSrcTables.size() > 1)
			
			//Create pattern
			
			String parsedPattern = odiSAPRef.parseAttributes(pPattern);
			Iterator pItr = mapJoinColList.iterator();
			
			while(pItr.hasNext()) {
			
				String record = pItr.next().toString();
                String []tabMetadata = record.split("~");
                
                String rTable = parsedPattern.replaceAll("TABLE_NAME", tabMetadata[0].trim());

                //replace [COL_NAME] variable
                String rColumn = rTable.replaceAll("COL_NAME", tabMetadata[1].trim());
			
				sExpr.append(rColumn);
				
				if(pEnd.equals("")) {
					sExpr.append(pSeparator + " \u000A");
					//sExpr.append("\u000A");
				}else{
					if(pSeparator.equals(",") && i ==  sMappedCols.size() -1) {
						//cannot add "," separator at the end of the statement
					}else {
						sExpr.append(pSeparator + " \u000A");
						//sExpr.append("\u000A");
					}
				}	
			}
			sExpr.append(pEnd);
		}//end of if(sMappedCols != null)
		sapLogger.log(sapLogger.INFO, "OdiSAPRef.getSapMappedAndJoinCols()------->:() "+sExpr.toString());
		return sExpr.toString();
	}//end of method getSapMappedAndJoinCols()
	



	//Parse attributes i.e [xxx] Strings
	public String parseAttributes(String s) {
		StringBuffer cb  = new StringBuffer() ;
		int pos ;
		int i = 0;
	  
		while (( pos = s.indexOf("[", i)) != -1){
	  		if (i != pos) {
	  			cb.append(s.substring(i, pos ));
	  		}else {
			}
	  	
  			int pos2 = s.indexOf("]", pos + 1);
  			if (pos2 != -1) {
	  			String t = s.substring(pos + 1, pos2) ;
	  			cb.append(t);
  				i = pos2 + 1 ;
  			}else{
  				i = pos ;
  			}
	  	}

	  	if (i != s.length()) {
	  		cb.append(s.substring(i, s.length())) ;
	  	}

		return cb.toString();
		
	}//end of parseAttributes method 


	//Get Operator for the expression
	public String getOperator(String Exp){
		
			 String opr = "";
		        //System.out.println(Exp.indexOf('>'));
		        if(Exp.indexOf((char)60+""+(char)62)!= -1){
		            opr = ""+(char)60+""+(char)62;
		            return opr;
		        }else if(Exp.indexOf((char)62+""+(char)61)!= -1){
		            opr = ""+(char)62+""+(char)61;
		            return opr;
		        }else if(Exp.indexOf((char)60+""+(char)61)!= -1){
		            opr = ""+(char)60+""+(char)61;
		            return opr;
		        }else if(Exp.indexOf((char)62)!= -1){
		            opr = ""+(char)62;
		            return opr;
		        }else if(Exp.indexOf((char)60)!= -1){
		            opr = ""+(char)60;
		            return opr;
		        }else if(Exp.indexOf((char)33+""+(char)61)!= -1){
		            opr = ""+(char)33+""+(char)61;
		            return opr;
		        }/*else{
		             opr = "=";
		            System.out.println("Contains =");
		        }*/
		        opr = ""+(char)61;
		        return opr;
	    
	} //end of getOperator() method

	//Replace operator
	public String replaceOperator(String reopr){
			sapLogger.log(sapLogger.INFO, ">>>>>> OdiSapRef.replaceOperator: >>>>>"+reopr);
			if(reopr.indexOf((char)60+""+(char)62)!= -1){
				reopr = reopr.replace(""+(char)60+""+(char)62,""+(char)61);
				sapLogger.log(sapLogger.INFO, ">>>>>> OdiSapRef.replaceOperator: <>"+reopr);
			    return reopr;
			}else if(reopr.indexOf((char)62+""+(char)61)!= -1){
				reopr = reopr.replace(""+(char)62+""+(char)61,""+(char)61);
				sapLogger.log(sapLogger.INFO, ">>>>>> OdiSapRef.replaceOperator: >="+reopr);
			    return reopr;
			}else if(reopr.indexOf((char)60+""+(char)61)!= -1){
				reopr = reopr.replace(""+(char)60+""+(char)61,""+(char)61);
				sapLogger.log(sapLogger.INFO, ">>>>>> OdiSapRef.replaceOperator: <="+reopr);
			    return reopr;
			}else if(reopr.indexOf((char)62)!= -1){
			    reopr = reopr.replace(""+(char)62,""+(char)61);
				sapLogger.log(sapLogger.INFO, ">>>>>> OdiSapRef.replaceOperator: >"+reopr);
			    return reopr;
			}else if(reopr.indexOf((char)60)!= -1){
			    reopr = reopr.replace(""+(char)60,""+(char)61);
				sapLogger.log(sapLogger.INFO, ">>>>>> OdiSapRef.replaceOperator: <"+reopr);
			    return reopr;
			}else if(reopr.indexOf((char)33+""+(char)61)!= -1){
				reopr = reopr.replace(""+(char)33+""+(char)61,""+(char)61);
				sapLogger.log(sapLogger.INFO, ">>>>>> OdiSapRef.replaceOperator: !="+reopr);
			    return reopr;
			}/*else{
			     opr = "=";
			    System.out.println("Contains =");
			}*/
			reopr = reopr.replace(""+(char)61,""+(char)61);
			sapLogger.log(sapLogger.INFO, ">>>>>> OdiSapRef.replaceOperator: ="+reopr);
			return reopr; 
	}//end of replaceOperator method

}// End of OdiSAPRef class


class ReverseIterator implements Iterator {

	Stack stack;

	public ReverseIterator(Iterator iterator) {
		stack = new Stack();
		while (iterator.hasNext()) {
			stack.push(iterator.next());
		}
	}
	public boolean hasNext() {
		return !stack.isEmpty();
	}
	public Object next() {
		return stack.pop();
	}
	public void remove() {
		stack.pop();
	}
}//end of class - ReverseIterator

//////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle	         		                            //
// ALL RIGHTS RESERVED.                                                     //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright //
// notice in the COPYRIGHT file in this directory.                        //
///////////////////////////////////////////////////////////////////////////


/**
 * @(#)SapTableDetail.java  1.00 04/10/2009
 *
 * Application : ODI SAP Knowledge Modules
 *
 * Module      : ABAP Program genaration api
 *
 * Author(s)   : Oracle,
 *
 * About       :
 *
 * Dependencies: JDK 1.4.2 API (with standard extensions),
 *
 *
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.HashSet;
import java.util.LinkedHashSet;

public class SapTableDetail {
	
	private OdiSAPLogger sapLogger = null;
	private OdiInterfaceMetadataHelper iHelper = null;
	private OdiSAPRef odiSAPRef = null;
	private static SapTableDetail instance = null;
	
	public String curTableName = "";
	public String prevTableName = "";

	private ArrayList sMappedCols = null;
	private ArrayList sSAPTablesInfoList = null;
	//list of all filter strings
	private ArrayList sFiltersExpr = null;
	//list of all joins conditions -- list of SAPJoin objects.
	private ArrayList sJoinsExpr = null;
	//from expression of the interface desing
	private String sFromExpr = null;

	private LinkedHashSet UniqueRecord = new LinkedHashSet();
	private ArrayList isUnique = new ArrayList();
	public int Counter = 1;

	
	public SapTableDetail(OdiInterfaceMetadataHelper iHelper, OdiSAPLogger sapLogger, OdiSAPRef odiSAPRef) {
		this.iHelper = iHelper;
		this.sapLogger = sapLogger;
		this.odiSAPRef = odiSAPRef;
		
		initializeMetaData();
	}

	public static SapTableDetail getInstance(OdiInterfaceMetadataHelper iHelper, OdiSAPLogger sapLogger, OdiSAPRef odiSAPRef) {				
		if(instance == null) {
			instance = new SapTableDetail(iHelper,sapLogger,odiSAPRef);                  // Added for Singleton
		}
		return instance;
	}
	
	private void initializeMetaData() {

		if(iHelper.sSAPMappedCols != null) {
			sMappedCols = odiSAPRef.parseRawMappedCols(iHelper.sSAPMappedCols);
		}
		//Initialize filters list as passed from odi
       	sFiltersExpr = iHelper.sSAPFilters;

		if(iHelper.sSAPJoins != null) {
			sJoinsExpr = odiSAPRef.parseRawJoinsExpr(iHelper.sSAPJoins);
       	}
		//Initialize from expression
		this.sFromExpr = iHelper.sFromExpr;	
	}
	
	/**
     * Returns a string with 2*n blanks, where n is the number of the 
     * source table in the current interface
     * @tableOrder - order of table in an interface
     */
    public String indent(){
                    
    	Iterator tableItr = odiSAPRef.getSrcTableIterator();
    	StringBuffer space = new StringBuffer();
    	space.append("  ");
		SourceTable sourceTab = null;
		while(tableItr.hasNext()) {
			sourceTab = new SourceTable();
			sourceTab = (SourceTable) tableItr.next();
			if(((sourceTab.resourceName).trim()).equalsIgnoreCase(curTableName)) {
				for(int i = 0;i < new Integer(sourceTab.tableOrderNo).intValue(); i++){
					space.append(" ");
				}
			}
		}
		return space.toString();
    }//end of method indent()
	
	/**
	 * This method retruns order number of the current table
	 * @return  String  - ordernumber
	 */
	public String getTableOrder() {
		
		String tableOrder = "0";
		Iterator tableItr = odiSAPRef.getSrcTableIterator();
		SourceTable sourceTab = null;
		while(tableItr.hasNext()) {
			sourceTab = new SourceTable();
			sourceTab = (SourceTable) tableItr.next();
			if(((sourceTab.resourceName).trim()).equalsIgnoreCase(curTableName)) {
				tableOrder = sourceTab.tableOrderNo;
			}
		}
		return tableOrder;
	}//end of method getTableOrder()

	/**
	 * This method checks whether the currrent table is the last table
	 * @return boolean
	 */
	public boolean isLastTable() {

		boolean flag = false;
		if(curTableName.equalsIgnoreCase(odiSAPRef.lastTable)) {
			flag = true;
		}
		return flag;
	}//end of method - isLastTable()

	/**
	 * This method checks whether the current table is first
	 * @return
	 */
	public boolean isFirstTable() {
		boolean flag = false;
		Iterator tableItr = odiSAPRef.getSrcTableIterator();
		SourceTable sourceTab = null;
		while(tableItr.hasNext()) {
			sourceTab = new SourceTable();
			sourceTab = (SourceTable) tableItr.next();
			if(sourceTab.resourceName.trim().equalsIgnoreCase(curTableName)) {
				if(sourceTab.tableOrderNo.trim().equalsIgnoreCase("1")) {
					flag = true;
				}
			}
		}//end of while
		sapLogger.log(sapLogger.INFO, "SapTableDetail.isFirstTable() - flag: "+flag);
		return flag;
	}//end of isFirstTable() method

	/**
     * This method returns Table name,Descriptive table name,Table Alias
     * @pPattern selected tables pattern string
     */
    public String getInfo(String pPattern) {
                                    
    	// returns the property of current source sap tables	
		// TABLE_NAME => returns (descriptive) name of source table
		// RES_NAME => returns resource name of source table (this corresponds to the SAP table name)
		// POP_TAB_ALIAS => returns the alias of source table in interface
         String resName = "";         
    	if(sSAPTablesInfoList != null || sSAPTablesInfoList.size() != 0) {
    		
    		Iterator tableInfoItr = sSAPTablesInfoList.iterator();
    		SAPTableInfo sTableInfo = null;	
    		while(tableInfoItr.hasNext()) {
    			sTableInfo = new SAPTableInfo();
    			sTableInfo = (SAPTableInfo) tableInfoItr.next();
    			sapLogger.log(sapLogger.INFO, ">>>> SapTableDetail.getInfo() -- sTableInfo.res_name: "+sTableInfo.res_name);
    			sapLogger.log(sapLogger.INFO, ">>>> SapTableDetail.getInfo() -- sTableInfo.pop_tab_alias: "+sTableInfo.pop_tab_alias);
				sapLogger.log(sapLogger.INFO, ">>>> SapTableDetail.getInfo() -- sTableInfo.curTableName: "+curTableName);
    			if((sTableInfo.res_name.trim()).equalsIgnoreCase(curTableName)) {
    				if(pPattern.equalsIgnoreCase("RES_NAME")) {
    					resName = sTableInfo.res_name.trim();
    				} else if(pPattern.equalsIgnoreCase("TABLE_NAME")) {
    					resName = sTableInfo.table_name.trim();
    				} else if(pPattern.equalsIgnoreCase("TABLE_NAME")) {
    					resName = sTableInfo.res_name.trim();
    				}
    			}
    		}
    	}
		sapLogger.log(sapLogger.INFO, "SapTableDetail.getInfo(RES_NAME)"+ resName);
    	return resName;
    }//end getInfo method

    /**
     * 
     * @param pPattern
     */
    public void setInfo(String pPattern) {
		sapLogger.log(sapLogger.INFO, "SapTableDetail.setTableInfo() -- Selected tables pattern :" + pPattern);
		//String tableInfo = odiRef.getSrcTablesList("", "[TABLE_NAME]#[RES_NAME]#[POP_TAB_ALIAS]", "~~", "");
		sSAPTablesInfoList = new ArrayList();
		// sets property of all source sap tables	
		// TABLE_NAME => returns (descriptive) name of source table
		// RES_NAME => returns resource name of source table (this corresponds to the SAP table name)
		// POP_TAB_ALIAS => returns the alias of source table in interface
		if(pPattern != "") {
			StringTokenizer sTabsTokens = new StringTokenizer(pPattern, "~~");
			String tabExpr = null;
			SAPTableInfo sTableInfo = null;	
			while(sTabsTokens.hasMoreTokens()) {
				tabExpr = sTabsTokens.nextToken();
				String[] tabProps = tabExpr.split("#");
				String[] resource_name = tabProps[1].trim().split(",");
				String tableName = resource_name[1].replaceAll(""+(char)34,"");
				sapLogger.log(sapLogger.INFO, "SapTableDetail.SetInfo.tableName<<<<<>>>>>>>" + tableName);
				sTableInfo = new SAPTableInfo(tabProps[0].trim(),tableName.trim(),tabProps[2].trim());
				sSAPTablesInfoList.add(sTableInfo);
			}
		}
	}//end of setTableInfo() method


	/**
	 * This method returns the mapped columns of current table
	 * @param pStart
	 * @param pPattern
	 * @param pSeparator
	 * @param pEnd
	 * @return
	 */
	public String getColList(String pStart, String pPattern, String pSeparator, String pEnd) {
		
		StringBuffer strExp = new StringBuffer();
		Counter++;
		//First append the start string to the buffer
		if(pStart != "") {
			strExp.append(pStart);
		}	
		
		//The expressions we require for SAP ABAP program generation are
		//[COL_NAME] TYPE [TABLE_NAME]-[COL_NAME] == for internal structure
		//[TABLE_NAME]~[COL_NAME] == for select statement
		//<internal table name>-[COL_NAME] == for output to file
		
		//for all the mapped columns replace the pPattern passed
		//with [xxx] approriate parameters and use pSeperator to
		//seperate each of the expression generated for the mapped columns
		if(sMappedCols != null) {
			int count = 0;
			for(int i=0; i < sMappedCols.size(); i++) {
			
				SAPMappedField sMapField = (SAPMappedField)sMappedCols.get(i);			
			
				String parsedPattern = odiSAPRef.parseAttributes(pPattern);
				//sapLogger.log(sapLogger.INFO, "Removed pattern expression '[' ']' :" + parsedPattern); 

				if(curTableName.equalsIgnoreCase("") || curTableName == null) {
					//sapLogger.log(sapLogger.INFO, "curTableName is blank: "+curTableName);
					throw new Exception("curTableName is blank");;
				}
			
				if(sMapField.tableName.trim().equalsIgnoreCase(curTableName)) {
									
					//replace [TABLE_NAME] variable
					String rTable = parsedPattern.replaceAll("TABLE_NAME", sMapField.tableName);

					//replace [COL_NAME] variable
					String rColumn = rTable.replaceAll("COL_NAME", sMapField.colName);

					//replace [COL_POS] variable
				    String rPos = rColumn.replaceAll("VAL", Counter);

					//replace [EXPRESSION] variable
					String colEx = "";
					if((sMapField.exp).indexOf("(") != -1) {
						String aggExp = (sMapField.exp).substring(0, (sMapField.exp).indexOf("(")+1) + " " + (sMapField.exp).substring((sMapField.exp).indexOf("(")+1, (sMapField.exp).indexOf(")")) + " )";
						colEx = aggExp;
					}else {
						colEx = sMapField.exp;
					}
					String eExpr = rPos.replaceAll("EXPRESSION", colEx);
					
					if(count > 0) {
						strExp.append(pSeparator + " \u000A");
						strExp.append("\u000A");
					}
					strExp.append(eExpr);
					count++;
				}//end of if(curTable.equalsIgnoreCase(sMapField.tableName))
				
			}//end of for loop
						
			//append the end of the string
			strExp.append(pEnd);
		}
		sapLogger.log(sapLogger.INFO, "SapTableDetail.getColList() - ABAP Syntax String : " + strExp.toString());
		return strExp.toString();
	}//end of getColList method


/**
	 * This method returns the sap mapped column 
	 * and join column list
	 *
	 */
	public String getSortJoinCols() {
		
		LinkedHashSet mapJoinColList = new LinkedHashSet(); 
		StringBuffer sExpr = new StringBuffer();
		//taking mapped column from interface design
		
			//taking column from join condition	
			if(odiSAPRef.sSrcTables.size() > 1) {
				
				Iterator joinItr = sJoinsExpr.iterator();
				///StringBuffer tabJoinCondition = new StringBuffer();
				SAPJoin sapJoin = null;
				while(joinItr.hasNext()) {
					sapJoin = new SAPJoin();
					sapJoin = (SAPJoin) joinItr.next();
					String pTable = sapJoin.primaryTable.trim();
					String jTable = sapJoin.joinedTable.trim();
		
					if(pTable.equalsIgnoreCase(curTableName) || jTable.equalsIgnoreCase(curTableName)) { 
						ArrayList condList = sapJoin.conditions;
						Iterator condItr = condList.iterator();
						int x = 0;
						while(condItr.hasNext()) {
							String joinCond = odiSAPRef.replaceOperator(condItr.next().toString());
							//if more than one join condition - [(MARA~MATNR = MARC~MATNR), MARA~MANDT = MARC~MANDT]
							StringTokenizer sToken = new StringTokenizer(joinCond.replaceAll("~", "-"), "=");
							int counter = 0;
							while(sToken.hasMoreTokens()) {
								String str = sToken.nextToken().trim();
								if(str.indexOf("(") != -1 || str.indexOf(")") != -1) {
									str = str.replaceAll("\(", "").replaceAll("\)","");
								}
								String joinColTab = str.substring(0, str.indexOf("-")).trim();
								
								if(joinColTab.equalsIgnoreCase(curTableName)) {//MARA-MATNR = MARC-MATNR/// T161U.SPRAS=DD02T.DDLANGUAGE
									mapJoinColList.add(str.substring(str.indexOf("-")+1, str.length()));
									
								} /*else if(joinColTab.equalsIgnoreCase(curTableName)) {
									mapJoinColList.add(str.substring(str.indexOf("-")+1, str.length()));
								}*/
							}//end of inner while
						}//end of sub-outer while
					}//end of if(pTable.equalsIgnoreCase(curTableName))
				}//end of outer while
			}//end of if(odiSAPRef.sSrcTables.size() > 1)
			
			//Create pattern
			
			String parsedPattern = odiSAPRef.parseAttributes(pPattern);
			Iterator pItr = mapJoinColList.iterator();
			
			while(pItr.hasNext()) {
			
				String fieldName = pItr.next().toString();
				
				String rTable = parsedPattern.replaceAll("TABLE_NAME", curTableName);
	
				//replace [COL_NAME] variable
				String rColumn = rTable.replaceAll("COL_NAME", fieldName);
			
				sExpr.append(rColumn);
				
				if(pEnd.equals("")) {
					sExpr.append(pSeparator + " \u000A");
					sExpr.append("\u000A");
				}else{
					if(pSeparator.equals(",") && i ==  sMappedCols.size() -1) {
						//cannot add "," separator at the end of the statement
					}else {
						sExpr.append(pSeparator + " \u000A");
						sExpr.append("\u000A");
					}
				}	
			}
			sExpr.append(pEnd);
		
		sapLogger.log(sapLogger.INFO, "getSortJoinCols()------->:strExp.toString() "+sExpr.toString());
		return sExpr.toString();
	}//end of method getSortJoinCols()

	/**
	 * This method returns the current table join condition
	 * @return string - join condition
	 */
	public String getJoin() {
		
		if(sJoinsExpr == null) {
			return "";
		}
		Iterator joinItr = sJoinsExpr.iterator();
		StringBuffer tabJoinCondition = new StringBuffer();
		SAPJoin sapJoin = null;
		
		while(joinItr.hasNext()) {
			sapJoin = new SAPJoin();
			sapJoin = (SAPJoin) joinItr.next();
			String pTable = sapJoin.primaryTable.trim();
			String jTable = sapJoin.joinedTable.trim();
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - pTable: "+pTable);
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - jTable: "+jTable);
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - prevTableName: "+prevTableName);
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - curTableName: "+curTableName);
			if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) {
			//if(pTable.equalsIgnoreCase(curTableName)) { 
				ArrayList condList = sapJoin.conditions;
				Iterator condItr = condList.iterator();
				int x = 0;
				
				while(condItr.hasNext()) {
					String joinCond = odiSAPRef.replaceOperator(condItr.next().toString());
					joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
					sapLogger.log(sapLogger.INFO, "###### joinCond: "+joinCond);
					String []splitJoinCond = joinCond.replaceAll("~", "-").split("=");
					
					if( x == 0)
						tabJoinCondition.append(" "+splitJoinCond[1].substring(splitJoinCond[1].indexOf("-")+1, splitJoinCond[1].length()).trim());
					else
						tabJoinCondition.append("\u000A"+"    AND "+splitJoinCond[1].substring(splitJoinCond[1].indexOf("-")+1, splitJoinCond[1].length()).trim());
					
					int tableOrder = Integer.parseInt(getTableOrder());
					if(tableOrder > 2) {
						tabJoinCondition.append(" = wa_final-"+(splitJoinCond[0].replace("-","_").trim()));
					} else {
						tabJoinCondition.append(" = wa_"+splitJoinCond[0].trim());
					}
						x++;
				}//end of while(condItr.hasNext())
			}//end of if(pTable.equalsIgnoreCase(curTableName))
		}//while(joinItr.hasNext())
		sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoin: "+tabJoinCondition.toString().trim());
		return tabJoinCondition.toString().trim();
	}//end of method getJoin

	public String getOptimizedInnerJoin() {
	
	if(sJoinsExpr == null) {
		return "";
	}
	Iterator joinItr = sJoinsExpr.iterator();
	StringBuffer tabJoinCondition = new StringBuffer();
	SAPJoin sapJoin = null;
	
	while(joinItr.hasNext()) {
		sapJoin = new SAPJoin();
		sapJoin = (SAPJoin) joinItr.next();
		String pTable = sapJoin.primaryTable.trim();
		String jTable = sapJoin.joinedTable.trim();
		sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getOptimizedInnerJoin - pTable: "+pTable);
		sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getOptimizedInnerJoin - jTable: "+jTable);
		sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getOptimizedInnerJoin - prevTableName: "+prevTableName);
		sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getOptimizedInnerJoin - curTableName: "+curTableName);
		if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) {
		//if(pTable.equalsIgnoreCase(curTableName)) { 
			ArrayList condList = sapJoin.conditions;
			Iterator condItr = condList.iterator();
			int x = 0;
			
			while(condItr.hasNext()) {
				String joinCond = odiSAPRef.replaceOperator(condItr.next().toString());
				joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
				sapLogger.log(sapLogger.INFO, "###### joinCond: "+joinCond);
				String []splitJoinCond = joinCond.replaceAll("~", "-").split("=");
				
				int tableOrder = Integer.parseInt(getTableOrder());

				if(x > 0) {
    					tabJoinCondition.append("\u000A AND ");
    				}

				if(tableOrder > 2) {
					tabJoinCondition.append(" wa_final"+(tableOrder-2)+"-"+(splitJoinCond[0].substring(splitJoinCond[0].indexOf("-")+1, splitJoinCond[0].length())));
				} else {
					tabJoinCondition.append(" wa_"+splitJoinCond[0].trim());
				}
				
				if( x == 0)
					tabJoinCondition.append("\u000A = wa_"+splitJoinCond[1].trim());
				else
					tabJoinCondition.append("\u000A = wa_"+splitJoinCond[1].trim());
				
					x++;
			}//end of while(condItr.hasNext())
		}//end of if(pTable.equalsIgnoreCase(curTableName))
	}//while(joinItr.hasNext())
	sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getOptimizedInnerJoin: "+tabJoinCondition.toString().trim());
	return tabJoinCondition.toString().trim();
}//end of method getOptimizedInnerJoin


	public String getOptimizedInnerJoinFinal() {
	
	if(sJoinsExpr == null) {
		return "";
	}
	Iterator joinItr = sJoinsExpr.iterator();
	StringBuffer tabJoinCondition = new StringBuffer();
	SAPJoin sapJoin = null;
	
	while(joinItr.hasNext()) {
		sapJoin = new SAPJoin();
		sapJoin = (SAPJoin) joinItr.next();
		String pTable = sapJoin.primaryTable.trim();
		String jTable = sapJoin.joinedTable.trim();
		sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getOptimizedInnerJoin - pTable: "+pTable);
		sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getOptimizedInnerJoin - jTable: "+jTable);
		sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getOptimizedInnerJoin - prevTableName: "+prevTableName);
		sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getOptimizedInnerJoin - curTableName: "+curTableName);
		if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) {
		//if(pTable.equalsIgnoreCase(curTableName)) { 
			ArrayList condList = sapJoin.conditions;
			Iterator condItr = condList.iterator();
			int x = 0;
			
			while(condItr.hasNext()) {
				String joinCond = odiSAPRef.replaceOperator(condItr.next().toString());
				joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
				sapLogger.log(sapLogger.INFO, "###### joinCond: "+joinCond);
				String []splitJoinCond = joinCond.replaceAll("~", "-").split("=");
				
				int tableOrder = Integer.parseInt(getTableOrder());

				if(x > 0) {
    					tabJoinCondition.append("\u000A AND ");
    				}

				if(tableOrder > 2) {
					tabJoinCondition.append(" wa_final-"+(splitJoinCond[0].replace("-","_").trim()));
				} else {
					tabJoinCondition.append(" wa_"+splitJoinCond[0].trim());
				}
				
				if( x == 0)
					tabJoinCondition.append("\u000A = wa_"+splitJoinCond[1].trim());
				else
					tabJoinCondition.append("\u000A = wa_"+splitJoinCond[1].trim());
				
					x++;
				}//end of while(condItr.hasNext())
			}//end of if(pTable.equalsIgnoreCase(curTableName))
		}//while(joinItr.hasNext())
	sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getOptimizedInnerJoinFinal: "+tabJoinCondition.toString().trim());
	return tabJoinCondition.toString().trim();
	}//end of method getOptimizedInnerJoinFinal

	/**
	 * This method returns the current table join condition
	 * @return string - join condition
	 */
	public String getWithKeyFinal() {
		
		if(sJoinsExpr == null) {
			return "";
		}
		Iterator joinItr = sJoinsExpr.iterator();
		StringBuffer tabJoinCondition = new StringBuffer();
		SAPJoin sapJoin = null;
		
		while(joinItr.hasNext()) {
			sapJoin = new SAPJoin();
			sapJoin = (SAPJoin) joinItr.next();
			String pTable = sapJoin.primaryTable.trim();
			String jTable = sapJoin.joinedTable.trim();
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - pTable: "+pTable);
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - jTable: "+jTable);
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - prevTableName: "+prevTableName);
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - curTableName: "+curTableName);
			if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) {
			//if(pTable.equalsIgnoreCase(curTableName)) { 
				ArrayList condList = sapJoin.conditions;
				Iterator condItr = condList.iterator();
				int x = 0;
				
				while(condItr.hasNext()) {
					String joinCond = odiSAPRef.replaceOperator(condItr.next().toString());
					joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
					sapLogger.log(sapLogger.INFO, "###### joinCond: "+joinCond);
					String []splitJoinCond = joinCond.replaceAll("~", "-").split("=");
					
					if( x == 0)
						tabJoinCondition.append(" "+splitJoinCond[1].substring(splitJoinCond[1].indexOf("-")+1, splitJoinCond[1].length()));
					else
						tabJoinCondition.append("\u000A"+"   "+splitJoinCond[1].substring(splitJoinCond[1].indexOf("-")+1, splitJoinCond[1].length()));
					
					int tableOrder = Integer.parseInt(getTableOrder());
					if(tableOrder > 2) {
						tabJoinCondition.append(" = wa_final-"+splitJoinCond[0].replace("-","_").trim());
					} else {
						tabJoinCondition.append(" = wa_"+splitJoinCond[0].trim());
					}
						x++;
				}//end of while(condItr.hasNext())
			}//end of if(pTable.equalsIgnoreCase(curTableName))
		}//while(joinItr.hasNext())
		sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoin: "+tabJoinCondition.toString().trim());
		return tabJoinCondition.toString().trim();
	}//end of method getWithKeyFinal
	
	public String getWithKey() {
		
		if(sJoinsExpr == null) {
			return "";
		}
		Iterator joinItr = sJoinsExpr.iterator();
		StringBuffer tabJoinCondition = new StringBuffer();
		SAPJoin sapJoin = null;
		
		while(joinItr.hasNext()) {
			sapJoin = new SAPJoin();
			sapJoin = (SAPJoin) joinItr.next();
			String pTable = sapJoin.primaryTable.trim();
			String jTable = sapJoin.joinedTable.trim();
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - pTable: "+pTable);
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - jTable: "+jTable);
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - prevTableName: "+prevTableName);
			sapLogger.log(sapLogger.INFO, ">>SapTableDetail.getJoin - curTableName: "+curTableName);
			if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) {
			//if(pTable.equalsIgnoreCase(curTableName)) { 
				ArrayList condList = sapJoin.conditions;
				Iterator condItr = condList.iterator();
				int x = 0;
				
				while(condItr.hasNext()) {
					String joinCond = odiSAPRef.replaceOperator(condItr.next().toString());
					joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
					sapLogger.log(sapLogger.INFO, "###### joinCond: "+joinCond);
					String []splitJoinCond = joinCond.replaceAll("~", "-").split("=");
					
					if( x == 0)
						tabJoinCondition.append(" "+splitJoinCond[1].substring(splitJoinCond[1].indexOf("-")+1, splitJoinCond[1].length()));
					else
						tabJoinCondition.append("\u000A"+"   "+splitJoinCond[1].substring(splitJoinCond[1].indexOf("-")+1, splitJoinCond[1].length()));
					
					int tableOrder = Integer.parseInt(getTableOrder());
					if(tableOrder > 2) {
						tabJoinCondition.append(" = wa_final"+(tableOrder-2)+"-"+(splitJoinCond[0].substring(splitJoinCond[0].indexOf("-")+1, splitJoinCond[0].length())));
					} else {
						tabJoinCondition.append(" = wa_"+splitJoinCond[0]);
					}
						x++;
				}//end of while(condItr.hasNext())
			}//end of if(pTable.equalsIgnoreCase(curTableName))
		}//while(joinItr.hasNext())
		sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoin: "+tabJoinCondition.toString().trim());
		return tabJoinCondition.toString().trim();
	}//end of method getWithKey

	/**
	 * This table returns the name of primary table
	 * in case of more than one table is there
	 * @return String - as primary table name
	 */
	public String getParentTable() throws Exception{
		//String childTable = "";
		ODISAPERPResourceBundle odiSapERPResourceBundle = new ODISAPERPResourceBundle(sapLogger);
		odiSapERPResourceBundle.initializeResource();
		String parentTable = "";
		ArrayList joinTableList = sJoinsExpr;
		Iterator joinItr = joinTableList.iterator();
		SAPJoin sapJoin = new SAPJoin();
		while(joinItr.hasNext()) {
			sapJoin = new SAPJoin();
			sapJoin = (SAPJoin) joinItr.next();
			String primaryTable = sapJoin.primaryTable.trim();
			sapLogger.log(sapLogger.INFO, ">>>>> primaryTable: "+primaryTable);
			String joinTable = sapJoin.joinedTable.trim();
			sapLogger.log(sapLogger.INFO, ">>>>> joinTable: "+joinTable);
			sapLogger.log(sapLogger.INFO, ">>>>> curTableName: "+curTableName);
			ArrayList joinCond = sapJoin.conditions;
					
			if(curTableName.equalsIgnoreCase(joinTable)) {
				parentTable = primaryTable;
				sapLogger.log(sapLogger.INFO, ">>>>> parentTable: "+parentTable);
			}
									
		}//end of while(joinItr.hasNext())
		sapLogger.log(sapLogger.INFO, ">>>>> SapTableDetail.getParentTable(): "+parentTable);
			
				if(parentTable.equals("") || parentTable.equals(null)){
					sapLogger.log(sapLogger.INFO, ">>>>>parentTable is empty: "+parentTable);
					sapLogger.log(sapLogger.INFO,odiSapERPResourceBundle.getResourceString("SAP_LKM_ERP_Join_Condition_Error"));
					throw new Exception(odiSapERPResourceBundle.getResourceString("SAP_LKM_ERP_Join_Condition_Error"));
				}
		
		return parentTable;
	}//end of method getParentTable()
	
	/**
	 * This methods returns true, if condition is Left outer join
	 * @return boolean
	 */
	public boolean isLeftOuterJoin() {
		boolean flag = false;
		sapLogger.log(sapLogger.INFO, ">>>>>> SapTableDetail.isLeftOuterJoin: "+sFromExpr);
		StringTokenizer tokenFromExp = new StringTokenizer(sFromExpr.replaceAll(" AS ", " AS ||"), "||");
		int x = 0;
		while(tokenFromExp.hasMoreTokens()) {
			
			String token = tokenFromExp.nextToken().trim();
			if(x != 0) {
				sapLogger.log(sapLogger.INFO, "isLeftOuterJoin - token: "+token);
				sapLogger.log(sapLogger.INFO, "isLeftOuterJoin - prevTableName: "+prevTableName);
				sapLogger.log(sapLogger.INFO, "isLeftOuterJoin - curTableName: "+curTableName+(char)34);
				
				if(token.indexOf(curTableName+(char)34) != -1) {
					//sapLogger.log(sapLogger.INFO, "isLeftOuterJoin - 333333333: "+curTableName);
					if(token.indexOf("LEFT OUTER JOIN") != -1) {
						//sapLogger.log(sapLogger.INFO, "isLeftOuterJoin - 44444444: ");
						flag = true;
					}
				}
			}//end of if(x != 0) 
			x++;
		}//end of while(tokenFromExp.hasMoreTokens())
		sapLogger.log(sapLogger.INFO, "isLeftOuterJoin - flag: "+flag);
		return flag;
	}//end of method isLeftOuterJoin()

	/**
	 * This method returns the join columns for letf outer join
	 * @return String - join condition for Left outer join
	 */
	public String getJoinForLeftOuter() {
        
		if(sJoinsExpr == null) {
			return "";
        }
        Iterator joinItr = sJoinsExpr.iterator();
        StringBuffer tabJoinCondition = new StringBuffer();
        SAPJoin sapJoin = null;

        while(joinItr.hasNext()) {
        	sapJoin = new SAPJoin();
        	sapJoin = (SAPJoin) joinItr.next();
        	String pTable = sapJoin.primaryTable.trim();
        	String jTable = sapJoin.joinedTable.trim();
        	sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - pTable: "+pTable);
        	sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - jTable: "+jTable);
        	sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - prevTableName: "+prevTableName);
        	sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - curTableName: "+curTableName);
                        
        	if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) { 
        		ArrayList condList = sapJoin.conditions;
        		Iterator condItr = condList.iterator();
        		int counter = 0;
        		while(condItr.hasNext()) {
        			String joinCond = condItr.next().toString();
        			if(joinCond.indexOf("(") != -1 || joinCond.indexOf(")") != -1) {
        				joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
        			}

        			joinCond = odiSAPRef.replaceOperator(joinCond.replaceAll("~", "-"));
        			String []joinSplit =  joinCond.split("=");
        			if(counter > 0) {
    					tabJoinCondition.append("\u000A AND ");
    				}
					sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter for sort: "+joinSplit[1]);
        			tabJoinCondition.append(joinSplit[1].substring(joinSplit[1].indexOf("-")+1, joinSplit[1].length()));
                                                        
        			int tableOrder = Integer.parseInt(getTableOrder());
        			if(tableOrder > 1) {
        				
        				if(tableOrder == 2) {
        					tabJoinCondition.append(" = wa_final-"+(joinSplit[0].replace("-","_")));
        				} else
        					tabJoinCondition.append(" = wa_final-"+(joinSplit[0].replace("-","_")));
        			} else {
        				tabJoinCondition.append(" = wa_"+joinSplit[0]);
        				tabJoinCondition.append("\u000A");
        			}
        			counter++;
        		}//end of while
        	}//end of if(pTable.equalsIgnoreCase(curTableName))
        }//while(joinItr.hasNext())
        sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter: "+tabJoinCondition.toString().trim());
        return tabJoinCondition.toString().trim();
	}//end of method getJoinForLeftOuter

	/**
	 * This method returns the join columns for letf outer join
	 * @return String - join condition for Left outer join
	 */
	public String getOptimizedJoinForLeftOuter() {
    
	if(sJoinsExpr == null) {
		return "";
    }
    Iterator joinItr = sJoinsExpr.iterator();
    StringBuffer tabJoinCondition = new StringBuffer();
    SAPJoin sapJoin = null;

    while(joinItr.hasNext()) {
    	sapJoin = new SAPJoin();
    	sapJoin = (SAPJoin) joinItr.next();
    	String pTable = sapJoin.primaryTable.trim();
    	String jTable = sapJoin.joinedTable.trim();
    	sapLogger.log(sapLogger.INFO, "SapTableDetail.getOptimizedJoinForLeftOuter - pTable: "+pTable);
    	sapLogger.log(sapLogger.INFO, "SapTableDetail.getOptimizedJoinForLeftOuter - jTable: "+jTable);
    	sapLogger.log(sapLogger.INFO, "SapTableDetail.getOptimizedJoinForLeftOuter - prevTableName: "+prevTableName);
    	sapLogger.log(sapLogger.INFO, "SapTableDetail.getOptimizedJoinForLeftOuter - curTableName: "+curTableName);
                    
    	if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) { 
    		ArrayList condList = sapJoin.conditions;
    		Iterator condItr = condList.iterator();
    		int counter = 0;
    		while(condItr.hasNext()) {
    			String joinCond = condItr.next().toString();
    			if(joinCond.indexOf("(") != -1 || joinCond.indexOf(")") != -1) {
    				joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
    			}

    			joinCond = odiSAPRef.replaceOperator(joinCond.replaceAll("~", "-"));
				String []joinSplit =  joinCond.split("=");
    			if(counter > 0) {
					tabJoinCondition.append("\u000A AND ");
				}
				sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter for sort: "+joinSplit[1]);
    			                                                   
    			int tableOrder = Integer.parseInt(getTableOrder());
    			if(tableOrder > 1) {
    				
    				if(tableOrder == 2) {
    					tabJoinCondition.append(" wa_final"+"-"+(joinSplit[0].replace("-","_")));
    				} else
    					tabJoinCondition.append(" wa_final-"+(joinSplit[0].replace("-","_")));
    			} else {
    				tabJoinCondition.append(" wa_"+joinSplit[0]);
    				tabJoinCondition.append("\u000A");
    			}
    			
    			tabJoinCondition.append("\u000A = wa_"+joinSplit[1].trim());
    			counter++;
    		}//end of while
    	}//end of if(pTable.equalsIgnoreCase(curTableName))
    }//while(joinItr.hasNext())
    sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getOptimizedJoinForLeftOuter: "+tabJoinCondition.toString().trim());
    return tabJoinCondition.toString().trim();
}//end of method getOptimizedJoinForLeftOuter
	
/**
	 * This method returns the join columns for letf outer join
	 * @return String - join condition for Left outer join
	 */
	public String getWithKeyForLeftOuter() {
        
		if(sJoinsExpr == null) {
			return "";
        }
        Iterator joinItr = sJoinsExpr.iterator();
        StringBuffer tabJoinCondition = new StringBuffer();
        SAPJoin sapJoin = null;

        while(joinItr.hasNext()) {
        	sapJoin = new SAPJoin();
        	sapJoin = (SAPJoin) joinItr.next();
        	String pTable = sapJoin.primaryTable.trim();
        	String jTable = sapJoin.joinedTable.trim();
        	sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - pTable: "+pTable);
        	sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - jTable: "+jTable);
        	sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - prevTableName: "+prevTableName);
        	sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - curTableName: "+curTableName);
                        
        	if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) { 
        		ArrayList condList = sapJoin.conditions;
        		Iterator condItr = condList.iterator();
        		int counter = 0;
        		while(condItr.hasNext()) {
        			String joinCond = condItr.next().toString();
        			if(joinCond.indexOf("(") != -1 || joinCond.indexOf(")") != -1) {
        				joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
        			}

        			joinCond = joinCond.replaceAll("~", "-");
					joinCond = odiSAPRef.replaceOperator(joinCond);
        			String []joinSplit =  joinCond.split("=");
        			if(counter > 0) {
    					tabJoinCondition.append("\u000A ");
    				}
        			tabJoinCondition.append(joinSplit[1].substring(joinSplit[1].indexOf("-")+1, joinSplit[1].length()));
                                                        
        			int tableOrder = Integer.parseInt(getTableOrder());
        			if(tableOrder > 1) {
        				
        				if(tableOrder == 2) {
        					tabJoinCondition.append(" = wa_final"+"-"+(joinSplit[0].replace("-","_")));
        				} else
        					tabJoinCondition.append(" = wa_final-"+(joinSplit[0].replace("-","_")));
        			} else {
        				tabJoinCondition.append(" = wa_"+joinSplit[0]);
        				tabJoinCondition.append("\u000A");
        			}
        			counter++;
        		}//end of while
        	}//end of if(pTable.equalsIgnoreCase(curTableName))
        }//while(joinItr.hasNext())
        sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter: "+tabJoinCondition.toString().trim());
        return tabJoinCondition.toString().trim();
	}//end of method getWithKeyForLeftOuter


	/**
	 * This method returns the join columns for letf outer join
	 * @return
	 */
	public String getJoinForLeftOuter(String FinalValue) {
				
				if(sJoinsExpr == null) {
					return "";
				}
				Iterator joinItr = sJoinsExpr.iterator();
				StringBuffer tabJoinCondition = new StringBuffer();
				
				SAPJoin sapJoin = null;
						
				while(joinItr.hasNext()) {
					sapJoin = new SAPJoin();
					sapJoin = (SAPJoin) joinItr.next();
					String pTable = sapJoin.primaryTable.trim();
					String jTable = sapJoin.joinedTable.trim();
					//sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - pTable: "+pTable);
					//sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - jTable: "+jTable);
					//sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - prevTableName: "+prevTableName);
					//sapLogger.log(sapLogger.INFO, "SapTableDetail.getJoinForLeftOuter - curTableName: "+curTableName);
					if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) { 
						ArrayList condList = sapJoin.conditions;
						Iterator condItr = condList.iterator();
						while(condItr.hasNext()) {
							String joinCond = condItr.next().toString();
							if(joinCond.indexOf("(") != -1 || joinCond.indexOf(")") != -1) {
		                        joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
							}
							joinCond = odiSAPRef.replaceOperator(joinCond.replaceAll("~", "-"));
							String []joinSplit =  joinCond.split("=");
							if(!isUnique.contains(joinSplit[1].substring(joinSplit[1].indexOf("-")+1, joinSplit[1].length())))
							{
								StringBuffer tabJoinConditionInternal = new StringBuffer();
								isUnique.add(joinSplit[1].substring(joinSplit[1].indexOf("-")+1, joinSplit[1].length()));
								tabJoinConditionInternal.append(joinSplit[1].substring(joinSplit[1].indexOf("-")+1, joinSplit[1].length()).trim());
								tabJoinConditionInternal.append(" = wa_"+FinalValue.trim()+"-"+joinSplit[1].substring(joinSplit[1].indexOf("-")+1, joinSplit[1].length()).trim());
								tabJoinConditionInternal.append("\u000A");
								String genrateCode = tabJoinConditionInternal.toString();
								sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter: genrateCode "+genrateCode);
								UniqueRecord.add(genrateCode);
							}
						}//end of while
					}//end of if(pTable.equalsIgnoreCase(curTableName))
				}//while(joinItr.hasNext())
				Iterator itrwithkey = UniqueRecord.iterator();
				if(FinalValue.trim().indexOf("final")!=-1){
					sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter: Final "+FinalValue);
					while(itrwithkey.hasNext()){
						String finalval = itrwithkey.next().toString();
						sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.finalval.indexOf()"+finalval.indexOf("_"));
						sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.finalval.indexOf()"+finalval.lastIndexOf("-"));
						sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter: Final Value"+finalval);
						String sub = finalval.substring(finalval.indexOf("_")+1,finalval.lastIndexOf("-"));
						sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter: Substring "+sub);
						String modval = finalval.replaceFirst(sub,FinalValue);
						sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter: Modified "+modval);
						tabJoinCondition.append(modval);
					}
					
				} else {
					while(itrwithkey.hasNext()){
						tabJoinCondition.append(itrwithkey.next());
					}
				}
				sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getJoinForLeftOuter: "+tabJoinCondition.toString().trim());
				return tabJoinCondition.toString().trim();
			}//end of method getJoinForLeftOuter


	/**
	*
	*/
	public String getPrevJoin() {
		
		if(sJoinsExpr == null)
			return "";
		Iterator joinItr = sJoinsExpr.iterator();
		StringBuffer tabJoinCondition = new StringBuffer();
		SAPJoin sapJoin = null;
		String Opr = "";

		while(joinItr.hasNext()) {
			sapJoin = new SAPJoin();
			sapJoin = (SAPJoin) joinItr.next();
			String pTable = sapJoin.primaryTable.trim();
			String jTable = sapJoin.joinedTable.trim();
			//sapLogger.log(sapLogger.INFO, ">>getPrevJoin - pTable: "+pTable);
			//sapLogger.log(sapLogger.INFO, ">>getPrevJoin - jTable: "+jTable);
			//sapLogger.log(sapLogger.INFO, ">>getPrevJoin - prevTableName: "+prevTableName);
			//sapLogger.log(sapLogger.INFO, ">>getPrevJoin - curTableName: "+curTableName);
			if((pTable.equalsIgnoreCase(prevTableName)) && (jTable.equalsIgnoreCase(curTableName))) { 
				ArrayList condList = sapJoin.conditions;;
				Iterator condItr = condList.iterator();
				int count = 0;
				while(condItr.hasNext()) {
					String joinCond = condItr.next().toString();
					sapLogger.log(sapLogger.INFO, "@@@@@prevjoinCond: "+joinCond);
					//if more than one join condition - [(MARA~MATNR = MARC~MACNR), MARA~MANDT = MARC~MANDT]
					if(joinCond.indexOf(",") != -1) {
						String [] jSplit = joinCond.split(",");
						for(int i = 0; i < jSplit.length; i++) {
							String splitStr = jSplit[i];
							if((splitStr.indexOf("(") != -1) || (splitStr.indexOf(")") != -1)) {
								splitStr = splitStr.replaceAll("\\(", "").replaceAll("\\)","");
							}
							splitStr = splitStr.replaceAll("~", "-");
							Opr = odiSAPRef.getOperator(splitStr);
							String []jSplit0 = splitStr.split(Opr);
							if(i == 0) {
								tabJoinCondition.append(jSplit0[1].substring(jSplit0[1].indexOf("-")+1, jSplit0[1].length()));
								tabJoinCondition.append(" "+Opr+" tt_"+jSplit0[0].trim());
							} else {
								tabJoinCondition.append(""+(char)10+"                  "+jSplit0[1].substring(jSplit0[1].indexOf("-")+1, jSplit0[1].length()).trim());
								tabJoinCondition.append(" "+Opr+" tt_"+jSplit0[0].trim);
							}
							
							
						}//end of for loop
						
					} else { //if only one join condition - [MARC~WERKS = MARD~WERKS]
						//sapLogger.log(sapLogger.INFO, "1111111111111111111111111111111111111111111");
						if((joinCond.indexOf("(") != -1) || (joinCond.indexOf(")") != -1)) {
								joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
						}
						joinCond = joinCond.replaceAll("~", "-");
						Opr = odiSAPRef.getOperator(joinCond);
						String [] jSplit1 = joinCond.split(Opr);
						if(count == 0) {
							tabJoinCondition.append(jSplit1[1].substring(jSplit1[1].indexOf("-")+1, jSplit1[1].length()).trim());
							tabJoinCondition.append(" "+Opr+" tt_"+jSplit1[0].trim());
						} else {
							tabJoinCondition.append(""+(char)10+"     AND "+jSplit1[1].substring(jSplit1[1].indexOf("-")+1, jSplit1[1].length()).trim());
							tabJoinCondition.append(" "+Opr+" tt_"+jSplit1[0].trim());
						}
						count++;
					}//end of main else
				}//end of while(condItr.hasNext())
			}//end of if(pTable.equalsIgnoreCase(prevTableName))
		}//while(joinItr.hasNext())
		sapLogger.log(sapLogger.INFO, ">>>>>> curTableDetail.getPrevJoin: "+tabJoinCondition.toString().trim());
		return tabJoinCondition.toString().trim();
	}//end of method getPrevJoin


	/**
	 * This method returns all the filter conditions expression
     * defined in the interface design for CURRENT table.
	 * @return String  - filter condition
	 */
	public String getFilter() {
        
        StringBuffer filtrExpSubStr = new StringBuffer();
        String bsNewLine = ""+ (char)10;// \n
        String tableName = "";
        if(sFiltersExpr != null) {

        	Iterator filterItr = sFiltersExpr.iterator();
        	int condCount = 0;
        	int fieldFilterCount = 0;
        	while(filterItr.hasNext()) {
        		String filterStr = filterItr.next().toString().replaceAll(bsNewLine," ").trim().toUpperCase();//MARD.PSTAT = 'XYZ', MARA.ERNAM = 'XYZ' AND MARA.VPSTA = 'ABC', MARC.PSTAT = 'YYYY'
				sapLogger.log(sapLogger.INFO, "filterStr^^^^^^^^^^^^^^^^^^^------> : " + filterStr);
        		filterStr = filterStr.replaceAll("#","IV_");
				Iterator itr = odiSAPRef.getSrcTableIterator();
				SourceTable srcTab;
				while(itr.hasNext()) {
					srcTab = (SourceTable)itr.next();
					sapLogger.log(sapLogger.INFO, "parseRawJoinsExpr-ALIAS------> : " + srcTab.resourceName);
					if(filterStr.indexOf(srcTab.aliasName)!= -1)
					{
						filterStr = filterStr.replaceAll(srcTab.aliasName,srcTab.resourceName);
					}
				}

				sapLogger.log(sapLogger.INFO, "+++++ SapTableDetail.getFilter() - Filter String: " + filterStr); 
        		if(filterStr.indexOf(""+(char)40) != -1) {//if left bracket "(" is there in string
        			tableName = filterStr.substring(filterStr.indexOf(""+(char)40)+1, filterStr.indexOf(".")).trim();//(char)40 is ASCII code of "("
        			//sapLogger.log(sapLogger.INFO, "Contains Bracket - tableName: "+tableName);
        		}else {	
        			tableName = filterStr.substring(0, filterStr.indexOf(".")).trim();
        			//sapLogger.log(sapLogger.INFO, "Does not Contains Bracket - tableName: "+tableName);
        		}

				if(curTableName.equalsIgnoreCase(tableName.trim())) {
        			if(filterStr.indexOf(" AND ") != -1) {//FAGL_011QT-SPRAS = 'EN' AND FAGL_011QT-TXTYP = 'A' AND FAGL_011QT-ZEILE = '1'
        				String []fSplit = filterStr.split(" AND ");
        				for(int j = 0; j < fSplit.length; j++) {
        					if(j > 0 || fieldFilterCount> 0) {
        						filtrExpSubStr.append(""+(char)10);
        						filtrExpSubStr.append(" AND ");
        					}
        					if(fSplit[j].indexOf(" OR ")!= -1){               
        						String []ORSplit = fSplit[j].split(" OR ");
        						for(int m = 0; m < ORSplit.length; m++) {
        							if(m > 0) {
        								filtrExpSubStr.append(""+(char)10);
        								filtrExpSubStr.append(" OR ");
        							}
        							if(ORSplit[m].indexOf(""+(char)40) != -1) { //Left "(" is present in string
        								//sapLogger.log(sapLogger.INFO, "left Bracket is there:");
        								filtrExpSubStr.append(""+(char)40);
        							}
        							filtrExpSubStr.append(ORSplit[m].substring(ORSplit[m].indexOf(".")+1, ORSplit[m].length()));
        						}
        					} else {
        						if(fSplit[j].indexOf(""+(char)40) != -1) {
        							filtrExpSubStr.append(""+(char)40);
        						}
        						filtrExpSubStr.append(fSplit[j].substring(fSplit[j].indexOf(".")+1, fSplit[j].length()));
        					}
        				}//end of inner for loop
        			} else {//end of -- if(filterExpr.indexOf("AND"))
        				if(condCount > 0 || fieldFilterCount > 0) {
        					filtrExpSubStr.append(""+(char)10);
        					filtrExpSubStr.append(" AND ");
        				}
        				if(filterStr.indexOf(" OR ")!= -1){               
        					String []ORSplit = filterStr.split(" OR ");
        					for(int m = 0; m < ORSplit.length; m++) {
        						if(m > 0) {
        							filtrExpSubStr.append(""+(char)10);
        							filtrExpSubStr.append(" OR ");
        						}
        						if(ORSplit[m].indexOf(""+(char)40) != -1) {
        							filtrExpSubStr.append(""+(char)40);
        						}
        						filtrExpSubStr.append(ORSplit[m].substring(ORSplit[m].indexOf(".")+1, ORSplit[m].length()));
        					}
        				} else {
        					if(filterStr.indexOf(""+(char)40)!= -1) { //left bracket is present in string
        						filtrExpSubStr.append(""+(char)40);
        					}
        					filtrExpSubStr.append(filterStr.substring(filterStr.indexOf(".")+1, filterStr.length()));
        				}
        				condCount++;
        			}//end of else
        			fieldFilterCount++;
        		}//end of -- if(curTableName.equalsIgnoreCase(tableName))
        	}//end of -- while(filterItr.hasNext())
        }//end of -- if(sFiltersExpr != null)
        //append the End character
        if(filtrExpSubStr.toString().length() != 0)
        	filtrExpSubStr.append("." + ""+(char)10);
        else
        	filtrExpSubStr.append("");
        String filterString = filtrExpSubStr.toString();
        if(filterString.indexOf(""+(char)40) != -1) {
        	filterString = filterString.replaceAll("\"+(char)40, "\"+(char)40+" ");
        	filterString = filterString.replaceAll("\"+(char)41, " \"+(char)41);
        }
        sapLogger.log(sapLogger.INFO, "----curTableDetail.getFilter() - Interface Filters are: "+filterString);
        return filterString;
	}//end of getFilter method.


	/**
	 * This method returns the join columns name
	 * @return  String
	 */
	public String getJoinColumn(String strValue) {
        
        if(sJoinsExpr == null) {
        	return "";
        }
		int count = 0;
		//String value=Val.trim();
        Iterator joinItr = sJoinsExpr.iterator();
        StringBuffer tabJoinCondition = new StringBuffer();
        SAPJoin sapJoin = null;
        ArrayList hs = null;
        while(joinItr.hasNext()) {
        	sapJoin = new SAPJoin();
        	sapJoin = (SAPJoin) joinItr.next();
        	String pTable = sapJoin.primaryTable.trim();
        	String jTable = sapJoin.joinedTable.trim();
        	hs = new ArrayList();
        	if(pTable.equalsIgnoreCase(prevTableName) && jTable.equalsIgnoreCase(curTableName)) { 
        		ArrayList condList = sapJoin.conditions;
        		//sapLogger.log(sapLogger.INFO, "EEEEEEEEEEEEEE condList.size: "+condList.size());
        		Iterator condItr = condList.iterator();
        		while(condItr.hasNext()) {
        			String joinCond = condItr.next().toString();

        			if(joinCond.indexOf("(") != -1 || joinCond.indexOf(")") != -1){
        				joinCond = joinCond.replaceAll("\(", "").replaceAll("\)","");
        			}
        			joinCond = odiSAPRef.replaceOperator(joinCond);
        			String []splitStr = joinCond.split("=");
        			//****************************** New Changes ******************************//

					if(count>0){
        				tabJoinCondition.append("\u000A");
        			}

        			if(strValue.equals("1")) {//MARA~MATNR = MARC~MATNR
        				//sapLogger.log(sapLogger.INFO, ">>getJoinColumn- splitStr If111111111: "+splitStr[0]);
        				//hs.add((splitStr[0].substring(splitStr[0].indexOf("~")+1, splitStr[0].length())).trim());
        				tabJoinCondition.append(splitStr[0].substring(splitStr[0].indexOf("~")+1, splitStr[0].length()).trim()+" ");
        				//tabJoinCondition.append(splitStr[0].substring(splitStr[0].indexOf("~")+1, splitStr[0].lenght()));
							
        			} else if(strValue.equals("2")) {
        				//sapLogger.log(sapLogger.INFO, ">>getJoinColumn- splitStr Else222222222: "+splitStr[1]);
        				//hs.add((splitStr[1].substring(splitStr[1].indexOf("~")+1, splitStr[1].length())).trim());
        				tabJoinCondition.append(splitStr[1].substring(splitStr[1].indexOf("~")+1, splitStr[1].length()).trim()+" ");
        				//tabJoinCondition.append(splitStr[1].substring(splitStr[1].indexOf("~")+1, splitStr[1].length()));
        			}else if(strValue.equals("3")) {//MARA~MATNR = MARC~MATNR
        				//sapLogger.log(sapLogger.INFO, ">>getJoinColumn- splitStr If111111111: "+splitStr[0]);
        				//hs.add((splitStr[0].substring(splitStr[0].indexOf("~")+1, splitStr[0].length())).trim());
        				tabJoinCondition.append(splitStr[0].replace("~","_")+" ");
        				//tabJoinCondition.append(splitStr[0].substring(splitStr[0].indexOf("~")+1, splitStr[0].lenght()));
							
        			} 
        		count++;	
        		}//end of while(condItr.hasNext())
        	}//end of if(pTable.equalsIgnoreCase(curTableName))
        	
        }//while(joinItr.hasNext())
        sapLogger.log(sapLogger.INFO, ">>getJoinColumn- : "+tabJoinCondition);
        return tabJoinCondition.toString().trim();
	}//end of method getJoinColumn()

	/**
	 * This method returns the sap mapped column 
	 * and join column list
	 * @param pStart
	 * @param pPattern
	 * @param pSeparator
	 * @param pEnd
	 */
	public String getSapMappedAndJoinCols(String pStart, String pPattern, String pSeparator, String pEnd) {
		
		LinkedHashSet mapJoinColList = new LinkedHashSet(); 
		StringBuffer sExpr = new StringBuffer();
		//taking mapped column from interface design
		if(sMappedCols != null) {
			Iterator itr = sMappedCols.iterator();
			SAPMappedField sapMappedCol = null;
	
			while(itr.hasNext()) {
				sapMappedCol = new SAPMappedField();
				sapMappedCol = (SAPMappedField) itr.next();
				
				if(sapMappedCol.tableName.trim().equalsIgnoreCase(curTableName)) {
				
						mapJoinColList.add(sapMappedCol.colName);
				}
			}//end of while(itr.hasNext())
			
			//taking column from join condition	
			if(odiSAPRef.sSrcTables.size() > 1) {
				
				Iterator joinItr = sJoinsExpr.iterator();
				///StringBuffer tabJoinCondition = new StringBuffer();
				SAPJoin sapJoin = null;
				while(joinItr.hasNext()) {
					sapJoin = new SAPJoin();
					sapJoin = (SAPJoin) joinItr.next();
					String pTable = sapJoin.primaryTable.trim();
					String jTable = sapJoin.joinedTable.trim();
		
					if(pTable.equalsIgnoreCase(curTableName) || jTable.equalsIgnoreCase(curTableName)) { 
						ArrayList condList = sapJoin.conditions;
						Iterator condItr = condList.iterator();
						int x = 0;
						while(condItr.hasNext()) {
							String joinCond = odiSAPRef.replaceOperator(condItr.next().toString());
							//if more than one join condition - [(MARA~MATNR = MARC~MATNR), MARA~MANDT = MARC~MANDT]
							StringTokenizer sToken = new StringTokenizer(joinCond.replaceAll("~", "-"), "=");
							int counter = 0;
							while(sToken.hasMoreTokens()) {
								String str = sToken.nextToken().trim();
								if(str.indexOf("(") != -1 || str.indexOf(")") != -1) {
									str = str.replaceAll("\(", "").replaceAll("\)","");
								}
								String joinColTab = str.substring(0, str.indexOf("-")).trim();
								
								if(joinColTab.equalsIgnoreCase(curTableName)) {//MARA-MATNR = MARC-MATNR/// T161U.SPRAS=DD02T.DDLANGUAGE
									mapJoinColList.add(str.substring(str.indexOf("-")+1, str.length()));
									
								} /*else if(joinColTab.equalsIgnoreCase(curTableName)) {
									mapJoinColList.add(str.substring(str.indexOf("-")+1, str.length()));
								}*/
							}//end of inner while
						}//end of sub-outer while
					}//end of if(pTable.equalsIgnoreCase(curTableName))
				}//end of outer while
			}//end of if(odiSAPRef.sSrcTables.size() > 1)
			
			//Create pattern
			
			String parsedPattern = odiSAPRef.parseAttributes(pPattern);
			Iterator pItr = mapJoinColList.iterator();
			
			while(pItr.hasNext()) {
			
				String fieldName = pItr.next().toString();
				
				String rTable = parsedPattern.replaceAll("TABLE_NAME", curTableName);
	
				//replace [COL_NAME] variable
				String rColumn = rTable.replaceAll("COL_NAME", fieldName);
			
				sExpr.append(rColumn);
				
				if(pEnd.equals("")) {
					sExpr.append(pSeparator + " \u000A");
					//sExpr.append("\u000A");
				}else{
					if(pSeparator.equals(",") && i ==  sMappedCols.size() -1) {
						//cannot add "," separator at the end of the statement
					}else {
						sExpr.append(pSeparator + " \u000A");
						//sExpr.append("\u000A");
					}
				}	
			}
			sExpr.append(pEnd);
		}//end of if(sMappedCols != null)
		sapLogger.log(sapLogger.INFO, "getSapMappedAndJoinCols()------->:strExp.toString() "+sExpr.toString());
		return sExpr.toString();
	}//end of method getSapMappedAndJoinCols()

	/**
	 * This method returns the sap mapped and Join columns for the Parent Table 
	 * and join column list
	 * @param pStart
	 * @param pPattern
	 * @param pSeparator
	 * @param pEnd
	 */
	public String getSapMappedAndJoinColsPrev(String pStart, String pPattern, String pSeparator, String pEnd) {
		
		LinkedHashSet mapJoinColList = new LinkedHashSet(); 
		StringBuffer sExpr = new StringBuffer();
		//taking mapped column from interface design
		if(sMappedCols != null) {
			Iterator itr = sMappedCols.iterator();
			SAPMappedField sapMappedCol = null;
	
			while(itr.hasNext()) {
				sapMappedCol = new SAPMappedField();
				sapMappedCol = (SAPMappedField) itr.next();
				
				if(sapMappedCol.tableName.trim().equalsIgnoreCase(prevTableName)) {
				
						mapJoinColList.add(sapMappedCol.colName);
				}
			}//end of while(itr.hasNext())
			
			//taking column from join condition	
			if(odiSAPRef.sSrcTables.size() > 1) {
				
				Iterator joinItr = sJoinsExpr.iterator();
				///StringBuffer tabJoinCondition = new StringBuffer();
				SAPJoin sapJoin = null;
				while(joinItr.hasNext()) {
					sapJoin = new SAPJoin();
					sapJoin = (SAPJoin) joinItr.next();
					String pTable = sapJoin.primaryTable.trim();
					String jTable = sapJoin.joinedTable.trim();
		
					if(pTable.equalsIgnoreCase(prevTableName) ) { 
						ArrayList condList = sapJoin.conditions;
						Iterator condItr = condList.iterator();
						int x = 0;
						while(condItr.hasNext()) {
							String joinCond = odiSAPRef.replaceOperator(condItr.next().toString());
							//if more than one join condition - [(MARA~MATNR = MARC~MATNR), MARA~MANDT = MARC~MANDT]
							StringTokenizer sToken = new StringTokenizer(joinCond.replaceAll("~", "-"), "=");
							int counter = 0;
							while(sToken.hasMoreTokens()) {
								String str = sToken.nextToken().trim();
								if(str.indexOf("(") != -1 || str.indexOf(")") != -1) {
									str = str.replaceAll("\(", "").replaceAll("\)","");
								}
								String joinColTab = str.substring(0, str.indexOf("-")).trim();
								sapLogger.log(sapLogger.INFO, "getSapMappedAndJoinColsPrev()------->: joinColTab "+joinColTab);
								if(pTable.equalsIgnoreCase(prevTableName) && joinColTab.equalsIgnoreCase(prevTableName)) {//MARA-MATNR = MARC-MATNR/// T161U.SPRAS=DD02T.DDLANGUAGE
									mapJoinColList.add(str.substring(str.indexOf("-")+1, str.length()));
																		
								} /*else if(joinColTab.equalsIgnoreCase(curTableName)) {
									mapJoinColList.add(str.substring(str.indexOf("-")+1, str.length()));
								}*/
							}//end of inner while
						}//end of sub-outer while
					}//end of if(pTable.equalsIgnoreCase(curTableName))
				}//end of outer while
			}//end of if(odiSAPRef.sSrcTables.size() > 1)
			
			//Create pattern
			
			String parsedPattern = odiSAPRef.parseAttributes(pPattern);
			Iterator pItr = mapJoinColList.iterator();
			
			while(pItr.hasNext()) {
			
				String fieldName = pItr.next().toString();
				
				String rTable = parsedPattern.replaceAll("TABLE_NAME", prevTableName);
	
				//replace [COL_NAME] variable
				String rColumn = rTable.replaceAll("COL_NAME", fieldName);
			
				sExpr.append(rColumn);
				
				if(pEnd.equals("")) {
					sExpr.append(pSeparator + " \u000A");
					//sExpr.append("\u000A");
				}else{
					if(pSeparator.equals(",") && i ==  sMappedCols.size() -1) {
						//cannot add "," separator at the end of the statement
					}else {
						sExpr.append(pSeparator + " \u000A");
						//sExpr.append("\u000A");
					}
				}	
			}
			sExpr.append(pEnd);
		}//end of if(sMappedCols != null)
		sapLogger.log(sapLogger.INFO, "getSapMappedAndJoinColsPrev()------->:strExp.toString() "+sExpr.toString());
		return sExpr.toString();
	}//end of method getSapMappedAndJoinColsPrev()

	/**
	 * Retrun Number of Mapped Columns
	 * @return
	 */
	public int getColumnSize(){
		if(sMappedCols!=null){
			return sMappedCols.size();
		}
		return 0;
	}


}//end of class SAPTableDetail

////////////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle	         		                   			     //
// ALL RIGHTS RESERVED.                                                         //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright     //
// notice in the COPYRIGHT file in this directory.                            //
///////////////////////////////////////////////////////////////////////////////


/**
 * @(#)SAPJoinOutput.java  1.00 04/13/2009
 *
 * Application : ODI SAP Knowledge Modules
 *
 * Module      : ABAP Program genaration api
 *
 * Author(s)   : Oracle,
 *
 * About       :
 *
 * Dependencies: JDK 1.4.2 API (with standard extensions),
 *
 *
 * Update History (Please make entries here in case you make a change.)
 * ____________________________________________________________________
 * Date       Author                       Comments about the change
 * ____________________________________________________________________
 *
 *
 **/

import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;

public class SAPJoinOutput {

	
	private OdiSAPLogger sapLogger = null;
	private OdiInterfaceMetadataHelper iHelper = null;
	public OdiSAPRef odiSAPRef = null;
	private static SAPJoinOutput instance = null;// For Singleton
	
	public String curTableName = "";
	public String prevTableName = "";
	
	private ArrayList sMappedCols = null;
	private ArrayList sSAPTablesInfoList = null;
	
	private ArrayList joinTableList = new ArrayList();
	//list of all filter strings
	private ArrayList sFiltersExpr = null;
	
	public SAPJoinOutput(OdiInterfaceMetadataHelper iHelper, OdiSAPLogger sapLogger, OdiSAPRef odiSAPRef) {
		this.iHelper = iHelper;
		this.sapLogger = sapLogger;
		this.odiSAPRef = odiSAPRef;
		
		initializeMetaData();
	}

	public static SAPJoinOutput getInstance(OdiInterfaceMetadataHelper iHelper, OdiSAPLogger sapLogger, OdiSAPRef odiSAPRef) {
		if(instance == null) {
			instance = new SAPJoinOutput(iHelper,sapLogger,odiSAPRef);// Added for Singleton
		}
		return instance;
	}
	
	private void initializeMetaData() {

		if(iHelper.sSAPMappedCols != null) {
			sMappedCols = odiSAPRef.parseRawMappedCols(iHelper.sSAPMappedCols);
		}
		//Initialize filters list as passed from odi
       	sFiltersExpr = iHelper.sSAPFilters;

		if(iHelper.sSAPJoins != null) {
			sJoinsExpr = odiSAPRef.parseRawJoinsExpr(iHelper.sSAPJoins);
       	}
	}//end of initializeMetaData();
	
	
	/**
	 * This method appends prevTable to the end of the JoinOutput. 
	 * This happens, when a new table has been successfully been added.
	 * @param prevTable
	 */
	public void append(SourceTable prevTable) {
		
		if(prevTable != null) {
			joinTableList.add(prevTable);
		}
		
	}//end of append() method
	
	/**
	 * This method returns the no. of table in the JoinOutput
	 * @return int  - number of table
	 */
	public int size() {
		if(joinTableList != null) {
			return joinTableList.size();
		} else {
			return 0;
		}
	}
	/**
     * This method returns Table name,Descriptive table name,Table Alias
     * @pPattern selected tables pattern string
     */
    public String getInfo(String pPattern) {
    	//- returns "final<no>", if SAPJoinOutput holds more than one table; <no> is the number of tables in SAPJoinOutput
    	//- returns table.getInfo("RES_NAME"), if SAPJoinOutput holds just one table
    	String info = "";
    	int noOftable = size();
		sapLogger.log(sapLogger.INFO, ">>>>>>>>>> SAPJoinOutput getInfo - noOftable: "+noOftable);
    	Iterator itr = joinTableList.iterator();
    	SourceTable sourceTable = null;
    	while(itr.hasNext()){
    		sourceTable = new SourceTable();
    		sourceTable = (SourceTable) itr.next();
    		if(pPattern.equalsIgnoreCase("RES_NAME") && noOftable == 1) {
    			info = sourceTable.resourceName;
    		} else if(pPattern.equalsIgnoreCase("RES_NAME") && noOftable > 1) {
    			info = "final"+(noOftable-1);
    		} else if(pPattern.equalsIgnoreCase("FINAL_TABLE")) {
    			info = "final"+noOftable;
    		}
    	}
    	sapLogger.log(sapLogger.INFO, ">>>>>>>>>> SAPJoinOutput getInfo: "+info);
    	return info;
    }//end getInfo method

	 public String getPreviousTable() {
    	
    	String prevTabName = "";
    	if(joinTableList != null) {
    		Iterator itr = joinTableList.iterator();
    		SourceTable sourceTable = null;
    		while(itr.hasNext()) {
    			sourceTable = new SourceTable();
    			sourceTable = (SourceTable)itr.next();
    			prevTabName = sourceTable.resourceName.trim();
    		}
    	}
		sapLogger.log(sapLogger.INFO, "*********************** SAPJoinOutput.prevTabName: "+prevTabName);
		return prevTabName;
    }//end of method getPreviousTable()

    /**
     * 
     * @param pStart
     * @param pPattern
     * @param pSeparator
     * @param pEnd
     * @return
     */
public String getColList(String pStart, String pPattern, String pSeparator, String pEnd) {
		//sapLogger.log(sapLogger.INFO, "@@@@@@@ SAPJoinOutput.getColList called");
		StringBuffer strExp = new StringBuffer();
		ArrayList mappedColList = new ArrayList();
		//First append the start string to the buffer
		if(pStart != "") {
			strExp.append(pStart);
		}	
		
		//The expressions we require for SAP ABAP program generation are
		//[COL_NAME] TYPE [TABLE_NAME]-[COL_NAME] == for internal structure
		//[TABLE_NAME]~[COL_NAME] == for select statement
		//<internal table name>-[COL_NAME] == for output to file
		
		//for all the mapped columns replace the pPattern passed
		//with [xxx] approriate parameters and use pSeperator to
		//seperate each of the expression generated for the mapped columns
		if(sMappedCols != null) {
			int counter = 0;
			for(int i=0; i < sMappedCols.size(); i++) {
			
				SAPMappedField sMapField = (SAPMappedField)sMappedCols.get(i);			
			
				String parsedPattern = odiSAPRef.parseAttributes(pPattern);
				sapLogger.log(sapLogger.INFO, "Removed pattern expression '[' ']' :" + parsedPattern); 
				
				//String prevTabName = getPreviousTable().trim();
				sapLogger.log(sapLogger.INFO, "JoinOutput >>>>>>: curTableName ----: "+curTableName);
				if(curTableName.equalsIgnoreCase("") || curTableName == null) {
					sapLogger.log(sapLogger.INFO, "curTableName is blank: "+curTableName);
					//throw new Exception("curTableName is blank");;
				}
				
				sapLogger.log(sapLogger.INFO, "JoinOutput >>>>>>: prevTableName ----: "+prevTableName);
				if(prevTableName.equalsIgnoreCase("") || prevTableName == null) {
					sapLogger.log(sapLogger.INFO, "prevTableName is blank: "+prevTableName);
					//throw new Exception("prevTableName is blank");;
				}
				
				if(curTableName.equalsIgnoreCase(sMapField.tableName.trim()) || prevTableName.equalsIgnoreCase(sMapField.tableName.trim())) {
					//replace [TABLE_NAME] variable
					boolean flag = false;
					String rTable = "";
					int joinTableNo = size();
					
					if(joinTableNo == 1 && (parsedPattern.indexOf("FINAL_TABLE") != -1)) {
						rTable = parsedPattern.replaceAll("FINAL_TABLE", "final");
						sapLogger.log(sapLogger.INFO, "SAPJoinOutput.getColList() - ABAP Syntax String : 111111" + rTable);
					} 
					
					else if(joinTableNo > 1 && (parsedPattern.indexOf("FINAL_TABLE") != -1)) {
						rTable = parsedPattern.replaceAll("FINAL_TABLE", "final");
						sapLogger.log(sapLogger.INFO, "SAPJoinOutput.getColList() - ABAP Syntax String : 22222222" + rTable);
					}else if(joinTableNo == 1) {
						rTable = parsedPattern.replaceAll("TABLE_NAME", sMapField.tableName);
					}else {
						rTable = parsedPattern.replaceAll("TABLE_NAME", "final");
					}
					if(!mappedColList.contains(sMapField.colName.trim())) {
						mappedColList.add(sMapField.colName.trim());
					} else {
						flag = true;
					}
					
					String rTable1 = rTable.replaceAll("TABLE_NAME", sMapField.tableName);
					//replace [COL_NAME] variable
					String rColumn = rTable1.replaceAll("COL_NAME", sMapField.colName);
					//replace [COL_POS] variable
				    String rPos = rColumn.replaceAll("COL_POS", sMapField.colPos);
					//replace [EXPRESSION] variable
					String colEx = "";
					if((sMapField.exp).indexOf("(") != -1) {
						String aggExp = (sMapField.exp).substring(0, (sMapField.exp).indexOf("(")+1) + " " + (sMapField.exp).substring((sMapField.exp).indexOf("(")+1, (sMapField.exp).indexOf(")")) + " )";
						colEx = aggExp;
					}else {
						colEx = sMapField.exp;
					}
					String eExpr = rPos.replaceAll("EXPRESSION", colEx);		
					if((counter > 0) && (!flag)) {
						strExp.append(pSeparator + " \u000A");
						strExp.append("\u000A");
					}
					if(!flag) {
						strExp.append(eExpr);
						counter++;
					}
				}//end of if(curTable.equalsIgnoreCase(sMapField.tableName))
			}//end of for loop
							
			//append the end of the string
			strExp.append(pEnd);
		}
		sapLogger.log(sapLogger.INFO, "SAPJoinOutput.getColList() - ABAP Syntax String : " + strExp.toString());
		return strExp.toString();
	}//end of getColList method
	
	
	
	
	/**
	 * This method parses the raw mapped cols expression
	 * and constructs list of SAPMappedField objects
	 */
	public ArrayList parseRawMappedCols(ArrayList mappedRawColsList) {
		ArrayList sMCols = new ArrayList();
		
		String tabName = null;
		String colName = null;
		String expr = null;
		String mColExpr = null;
		SAPMappedField smField = null;
		for(int i=0; i < mappedRawColsList.size(); i++) {
			mColExpr = (String)mappedRawColsList.get(i);
			sapLogger.log(sapLogger.INFO, "Mapped Column : " + mColExpr);
			String checkExpr = "";
			if(mColExpr.indexOf("(") != -1)
				checkExpr = mColExpr.substring(mColExpr.indexOf("(") + 1, mColExpr.indexOf(")"));
			else
				checkExpr = mColExpr;

		        sapLogger.log(sapLogger.INFO, "Mapped Column without Expression: " + checkExpr);	
						
			smField = new SAPMappedField();
			
			tabName = checkExpr.substring(0, checkExpr.indexOf("."));
			colName = checkExpr.substring(checkExpr.indexOf(".") + 1, checkExpr.length());
			expr = mColExpr.replace('.', '~');
			
			smField.tableName = tabName;
			smField.colName = colName;
			smField.exp = expr;
			smField.colPos = "C"+new Integer(i).toString()+"_";			

			//sapLogger.log(sapLogger.INFO, "Mapped Table Name: " + tabName);
			//sapLogger.log(sapLogger.INFO, "Mapped Column Name: " + colName);
			//sapLogger.log(sapLogger.INFO, "Mapped Expression: " + expr);
			
			
			sMCols.add(smField);
		}
		return sMCols;
	
	}//parseRawMappedCols method.


}//end of class SAPJoinOutput

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// (c) Copyright 2008, Oracle	         		                                                               //
// ALL RIGHTS RESERVED.                                                                                       //
// This UNPUBLISHED PROPRIETARY software is  subject to the full copyright                                   //
// notice in the COPYRIGHT file in this directory.                                                          //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Resource Bundle class
import java.util.Locale;
import java.util.ResourceBundle;

/**
 * <b>ODISAPERPResourceBundle</b> class handles loading of language resource
 * properties and providing strings as ui lables.
 * On fail, it sets the custome messages for each key
 */
public class ODISAPERPResourceBundle {


	private OdiSAPLogger sapLogger = null;
	private String resourceMessage = "";
	private String baseResourceName = null;
	private ResourceBundle messages = null;


	/**
	 * Constructor
	 * @param odiSAPLogger
	 */
	public ODISAPERPResourceBundle(OdiSAPLogger odiSAPLogger) {
		this.sapLogger = odiSAPLogger;
	}

	/**
	 * This method is responsible to load the resource properties file. On getting
	 * error in loading, it sets the custome message
	 * @param pBundleName
	 * @return
	 */
	public void initializeResource() {
		try {
			baseResourceName = "sap_lkm_erp";
			messages = ResourceBundle.getBundle("oracle/odi/sap/km/"+baseResourceName, Locale.getDefault(), this.getClass().getClassLoader());

		} catch (Exception e) {
			sapLogger.log(sapLogger.ERROR, "initializeResource() -- e: "+e);
			setMessages("!!! BUNDLE " + baseResourceName + " !!!"); //$NON-NLS-1$//$NON-NLS-2$
		}
	}//end of initializeResource()


	/**
	 * This method is responsible to get the string key value
	 * @param pKeyName
	 * @return
	 */
	public String getResourceString(String pKeyName) {
		sapLogger.log(sapLogger.INFO, ">>>>> getResourceString() -  resourceMessage: "+resourceMessage);
		if (resourceMessage.equalsIgnoreCase("!!! BUNDLE " + baseResourceName + " !!!")) {
			return resourceMessage;
		} else {
			try {
				return messages.getString(pKeyName);
			} catch (Exception e) {
				sapLogger.log(sapLogger.INFO, "Exception in getResourceString() -----: "+e);
				return "### KEY " + baseResourceName + " / " + pKeyName + "###"; //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$
			}
		}
	}//end of getResourceString() method

	private void setMessages(String resourceMsg) {
		this.resourceMessage = resourceMsg;
	}
}//end of ODISAPERPResourceBundle class

%>
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:16.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:16.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Source Technology]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[COL_I_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_LINE_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36396000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[5]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[50]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Initialize]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36396000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[<%
//Command Name: Initialize
import java.util.*;

//Initializing logger

//OdiSAPLogger sapLogger = new OdiSAPLogger();

sapLogger = OdiSAPLogger.getInstance();
System.out.println("object is created for sapLogger");

//Initiaze Interface design metadata with all the selected tables, columns, joins, filter conditions and transformations

//OdiInterfaceMetadataHelper iHelper = new OdiInterfaceMetadataHelper(sapLogger);

iHelper = OdiInterfaceMetadataHelper.getInstance(sapLogger);


iHelper.setSelectedTables(odiRef.getSrcTablesList("", "[I_TABLE]#[RES_NAME]#[POP_TAB_ALIAS]#EMPTY", "~~", "") );

iHelper.setMappedColumns(odiRef.getColList("", "[EXPRESSION]", "~~", "") );

iHelper.setJoinConditions(odiRef.getJoinList("","[EXPRESSION]","~~", ""));

iHelper.setFilterConditions(odiRef.getFilterList("", "[EXPRESSION]", "~~", ""));

iHelper.setFromCondition(odiRef.getFrom());

iHelper.setGroupByList(odiRef.getGrpByList("", "[EXPRESSION]","~~",""));

//set Flex Fields of the selected tables
ArrayList sTabs = iHelper.sSAPTables;
ArrayList rTabs = new ArrayList();
for(int i =0; i < sTabs.size(); i++) {
	SAPTable sT = (SAPTable)sTabs.get(i);
	String tabType = odiRef.getFlexFieldValue(sT.id, "2400", "SAP_TABLE_TYPE");
	sapLogger.log(sapLogger.INFO, "Show me the table type : " + tabType);
	sT.type  = tabType;
	rTabs.add(sT);
}

iHelper.sSAPTables = rTabs; 

//Initialize odiSAPRef api class
//OdiSAPRef odiSAPRef = new OdiSAPRef(iHelper, sapLogger);
odiSAPRef = OdiSAPRef.getInstance(iHelper, sapLogger);

// SapTableDetail curTableDetail = new SapTableDetail(iHelper, sapLogger, odiSAPRef);
curTableDetail = SapTableDetail.getInstance(iHelper, sapLogger, odiSAPRef);			// Added for Singleton

// SapTableDetail prevTableDetail = new SapTableDetail(iHelper, sapLogger, odiSAPRef);
prevTableDetail = SapTableDetail.getInstance(iHelper, sapLogger, odiSAPRef);			// Added for Singleton

curTableDetail.setInfo(odiRef.getSrcTablesList("", "[TABLE_NAME]#[RES_NAME]#[POP_TAB_ALIAS]", "~~", ""));

String prevTable = "";

String prevTablejoin = "";

//SAPJoinOutput sapJointOutput = new SAPJoinOutput(iHelper, sapLogger, odiSAPRef);
//SAPJoinOutput prevJoinOutput;

prevJoinOutput = SAPJoinOutput.getInstance(iHelper, sapLogger, odiSAPRef);

//SAPJoinOutput curJoinOutput;
curJoinOutput = SAPJoinOutput.getInstance(iHelper, sapLogger, odiSAPRef);

//SAPJoinOutput firstJoinOutput;
firstJoinOutput = SAPJoinOutput.getInstance(iHelper, sapLogger, odiSAPRef);

int counterNew;
int leftJoinCounter;
int keyCounter;

//SourceTable curTable, prevTableName;
curTable = SourceTable.getInstance();

prevTableName = SourceTable.getInstance();

int num;//counter for final table in Extract Data

Iterator abapGenItr;

getOdiVariableName = odiSAPRef.getOdiName();

getOdiVariableValue = odiSAPRef.getOdiValue();

%>]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36397000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[ORACLE]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[5]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[60]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Drop Work Table]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36397000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[drop table <%=odiRef.getTable("L", "COLL_NAME", "W")%>]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Target Technology]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[DEF_I_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_LINE_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36398000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[ORACLE]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[5]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[90]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Create Work Table]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36398000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[create table <%=odiRef.getTable("L", "COLL_NAME", "W")%>
(
	<%=odiRef.getColList("", "[CX_COL_NAME]\t[DEST_WRI_DT] " + odiRef.getInfo("DEST_DDL_NULL"), ",\n\t", "","")%>
)
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[FILE]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36399000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[JYTHON]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[4]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[160]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Load Data to Staging]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36399000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[import os
import re

outfile = r"""<%=(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getInfo("SRC_WORK_SCHEMA") : odiRef.getOption("TEMP_DIR") %><%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.out"""
logfile = r"""<%=(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getInfo("SRC_WORK_SCHEMA") : odiRef.getOption("TEMP_DIR") %><%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.log"""
ctlfile = r"""<%=(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getInfo("SRC_WORK_SCHEMA") : odiRef.getOption("TEMP_DIR") %><%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.ctl"""

loadcmd = r"""sqlldr <%=odiRef.getInfo("DEST_USER_NAME")%>/<%=odiRef.getInfo("DEST_PASS")%>@<%=odiRef.getInfo("DEST_DSERV_NAME")%> control="%s" log="%s" > "%s" """ % (ctlfile, logfile, outfile)

rc = os.system(loadcmd)

if rc <> 0 and rc <> 2:
	raise "Load Error", "See %s for details" % logfile

# Init Vars
nbIns = 0
nbRej = 0
nbNull = 0
strprt = ""
maxAllowedError = r"""<%=odiRef.getOption("MAX_ALLOWED_ERRORS")%>"""
c = 0
flag = 0

# Open log file
f = open(logfile, "r")
try:
	lines = f.readlines()
	for line in lines:
		if line.rstrip().endswith(r"""<%=odiRef.getTable("L", "COLL_NAME", "W")%>:"""):
			flag = 1
			c = 0
		if flag == 1:
			if c > 0 and c <= 4:
				if c == 1 :
					nbIns = int(re.findall("\d+", line)[0])
				elif c == 2:
					nbRej = int(re.findall("\d+", line)[0])
				elif c == 4:
					nbNull = int(re.findall("\d+", line)[0])
					break
		c+=1
	strprt = "\n\tIns:\t%s\n\tReject:\t%s\n\tNullField:\t%s" % (nbIns, nbRej, nbNull)
finally:
	f.close()

# if some rows has been rejected due to invalide data, check KM option MAX_ALLOWED_ERROR
if rc == 2:
	if nbRej > int(maxAllowedError):
		raise "\nThe rejected rows processed by SQLLDR are more than Maximum Allowed Error"
		break
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String">null</Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36400000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[JYTHON]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[4]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[170]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Report number of rows]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36400000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[#setting number of Rows in the Operator
odiRef.setNbRows(nbIns);]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36401000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[4]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Extract Data]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36401000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[_OdiSAPAbapExecute "-UPLOAD=<?=(odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_ALLOW_ABAP_UPLOAD" ).equals("1"))?<%=odiRef.getOption("UPLOAD_ABAP_CODE")%>:0?>" "-EXECUTE=<%=odiRef.getOption("EXECUTE_ABAP_CODE")%>" "-EXECUTE_BASE_RKM=0" "-ZRFC_RUN_INSTALL=1" "-ABAP_PROGRAM_NAME=<%=odiRef.getOption("ABAP_PROGRAM_NAME")%>" "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>" "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>" "-PASSWORD=<%=odiRef.getInfo("SRC_PASS")%>" "-SAP_CLIENT=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_CLIENT" )?>" "-SAP_LANGUAGE=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_LANGUAGE" )?>" "-SAP_SYSTEM_NUMBER=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_SYSTEM_NUMBER" )?>" "-SAP_FUNCTION_GROUP_NAME=<%=odiRef.getOption("SAP_FUNCTION_GROUP_NAME")%>" "-CONNECTION_POOL_NAME=<%=odiRef.getOption("SAP_CONNECTION_POOL")%>" "-CONNECTION_POOL_SIZE=<%=odiRef.getOption("SAP_CONNECTION_POOL_SIZE")%>" "-FILE_DELIMITER=<%=odiRef.getOption("FIELD_SEPARATOR")%>" "-FILE_NAME=<%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.txt" "-FTP_HOST=<?=sFtpServerName?>" "-FTP_USER=<?=sFtpUsername?>" "-FTP_PASSWORD=<@=sFtpPassword@>"  "-FTP_PASSIVE_MODE=<%=odiRef.getOption("FTP_PASSIVE_MODE")%>" "-FTP_TRANSFER_TIMEOUT=<%=odiRef.getOption("FILE_TRANSFER_TIMEOUT")%>" "-ODI_VARIABLE_NAMES=<%=getOdiVariableName%>" "-ODI_VARIABLE_VALUES=<%=getOdiVariableValue%>" "-USER_ABAP_PARAMETER_NAMES=IV_DELIMITER,CHAR1;IV_FILENAME,CHAR255;IV_USER,CHAR35;IV_PWD,CHAR35;IV_HOST,CHAR35;IV_HASHVALUE,CHAR35;IV_PATH,CHAR35;IV_MAX_ROW_CNT,SYTABIX" "-USER_ABAP_PARAMETER_VALUES=<Value>" "-USER_ABAP_PARAMETER_SEPARATOR=<Value>" "-ABAP_TABLE_PARAMETERS=RETURN,BAPIRETURN;ET_FILE_RETURN,BAPIRET2" "-ABAP_EXPORT_PARAMETERS=ERRORMESSAGE;SY-MSGV1" "-LOG_FILE_NAME=<%=odiRef.getOption("LOG_FILE_NAME")%>" "-FTP_PATH=<%=(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getOption("TEMP_DIR") : "<?=sFtpPath?>" %>" "-DEV_CLASS=ZODI_DEVCLASS" "-MAX_ROW_COUNT=<%=odiRef.getOption("MAX_ROW_COUNT")%>" "-HASH_VALUE_MARKER=HVM" "-ABAP_PROGRAM_BODY=
*Type declarations
TYPES : BEGIN OF ty_final,
<%=odiSAPRef.getSapMappedAndJoinCols("", " [TABLE_NAME]_[COL_NAME] TYPE\u000A [TABLE_NAME]-[COL_NAME] ", ",", "")%>
END OF ty_final.
TYPES : BEGIN OF ty_final_tmp,
<%=odiSAPRef.getColListForFinalTable("", "[TABLE_NAME]_[COL_NAME] TYPE\u000A [TABLE_NAME]-[COL_NAME] ", ",", "")%>
END OF ty_final_tmp.
Data: wa_final_tmp type ty_final_tmp.
TYPES : BEGIN OF ty_final_target,
<%=odiSAPRef.getColListForTarget("", "[COL_TARGET] TYPE\u000A [TABLE_NAME]-[COL_NAME] ", ",", "")%>
END OF ty_final_target.
<%  abapGenItr = odiSAPRef.getSrcTableIterator();
	while(abapGenItr.hasNext()) {
	curTable = new SourceTable();
	curTable = (SourceTable)abapGenItr.next();
	curTableDetail.curTableName = curTable.resourceName.trim(); %>
*Table type for <%=curTable.resourceName%>
TYPES : BEGIN OF ty_<%=curTable.resourceName%>,
<%=curTableDetail.getSapMappedAndJoinCols("", "[COL_NAME] TYPE\u000A [TABLE_NAME]-[COL_NAME]", ",", "")%>
END OF ty_<%=curTable.resourceName%>.
<% } %>

TYPES: BEGIN OF gs_text,
line(500) TYPE c,
END OF gs_text.

TYPES: BEGIN OF ls_blob, 
line(300) TYPE c, 
END OF ls_blob. 
TYPES: BEGIN OF ls_text, 
line(300) TYPE c, 
END OF ls_text.

*Structure Declarations
DATA: wa_final_string TYPE string,
      wa_final TYPE ty_final,
      wa_final_target TYPE ty_final_target,
      t_vers TYPE cvers,
      
*Table Declarations
gt_result TYPE TABLE OF gs_text,
tt_final TYPE STANDARD TABLE OF ty_final,
tt_final_target TYPE STANDARD 
TABLE OF ty_final_target,
tt_final_tmp TYPE STANDARD 
TABLE OF ty_final_tmp,
tt_final_tmp1 TYPE STANDARD 
TABLE OF ty_final,
lt_txtdata TYPE STANDARD 
TABLE OF ls_text,
wa_txtdata LIKE LINE  OF lt_txtdata,
lt_result  TYPE STANDARD TABLE OF ls_text,

*Variable Declarations
lv_tabix_frm TYPE SY-TABIX,
lv_tabix_to TYPE SY-TABIX,
path type char35,
lv_hdl TYPE i,
lv_cmd(120) TYPE c, 
lv_slen TYPE i, 
lv_line TYPE i,
lv_FLAG TYPE CHAR1 VALUE ''.
 
*Constants Declarations
CONSTANTS: gc_error VALUE 'E',
	   gc_success VALUE 'S',
           gc_information VALUE 'I',
	   lc_dest TYPE rfcdes-rfcdest 
	   VALUE 'SAPFTPA',
           lc_key TYPE i VALUE 26101957, 
           lc_pasv VALUE 'X', 
           lc_cmd1(20) TYPE c VALUE 'set passive on', 
           lc_cmd2(5) TYPE c VALUE 'put'. 

<%=odiSAPRef.getColListForTarget("", "DATA:[COL_TARGET] TYPE string", ".", "")%>
<%  abapGenItr = odiSAPRef.getSrcTableIterator();
	while(abapGenItr.hasNext()) {
	curTable = new SourceTable();
	curTable = (SourceTable)abapGenItr.next();
	curTableDetail.curTableName = curTable.resourceName.trim();
	if (!curTableDetail.isLastTable()) { %>
*Intermediate Output Internal table for join no <%=curTableDetail.getTableOrder()%>
DATA: tt_final<%=curTableDetail.getTableOrder()%> 
TYPE STANDARD TABLE OF ty_final.
<% } }
	abapGenItr = odiSAPRef.getSrcTableIterator();
	while(abapGenItr.hasNext()) {
	curTable = new SourceTable();
	curTable = (SourceTable)abapGenItr.next();
	curTableDetail.curTableName = curTable.resourceName.trim(); %>
*Internal table <%=curTableDetail.getInfo("RES_NAME")%>
DATA: tt_<%=curTableDetail.getInfo("RES_NAME")%> 
TYPE STANDARD TABLE OF ty_<%=curTableDetail.getInfo("RES_NAME")%>,
wa_<%=curTableDetail.getInfo("RES_NAME")%> 
TYPE ty_<%=curTableDetail.getInfo("RES_NAME")%>.
<% } %>
IF  iv_hashvalue = 'HVM' .
*Selecting data from tables
<% abapGenItr = odiSAPRef.getSrcTableIterator();
   while(abapGenItr.hasNext()) {
   curTable = new SourceTable();
   curTable = (SourceTable)abapGenItr.next();
   curTableDetail.curTableName = curTable.resourceName.trim(); 
   if (curTableDetail.isFirstTable()) { 
   // Code template for first table select
%>*Selecting data from <%=curTableDetail.getInfo("RES_NAME")%>
SELECT <%=curTableDetail.getSapMappedAndJoinCols(" ", "[COL_NAME] ", "  ", "")%>
INTO CORRESPONDING FIELDS OF TABLE 
tt_<%=curTableDetail.getInfo("RES_NAME")%><% prevTablejoin =  curTableDetail.getInfo("RES_NAME"); %>
FROM  <%=curTableDetail.getInfo("RES_NAME")%><% if(curTableDetail.getFilter().length() > 1) { %>
WHERE <%=curTableDetail.getFilter()%><% } else { %>.<% }}else { // Code template for every sub-sequent table select	
curTableDetail.prevTableName = curTableDetail.getParentTable();
prevTable = "tt_"+curTableDetail.getParentTable(); %>
*Selecting data from <%=curTableDetail.getInfo("RES_NAME")%>
IF NOT <%=prevTable%> IS  INITIAL.
SELECT <%=curTableDetail.getSapMappedAndJoinCols(" ", "[COL_NAME] ", "  ", "")%>
INTO CORRESPONDING FIELDS OF TABLE 
tt_<%=curTableDetail.getInfo("RES_NAME")%>
FROM   <%=curTableDetail.getInfo("RES_NAME")%>
FOR ALL ENTRIES IN <%=prevTable%>
WHERE <%=curTableDetail.getPrevJoin()%>
<% if(curTableDetail.getFilter().length() > 1) { %>
AND  <%=curTableDetail.getFilter()%>.
<% } %>. <% } } 
 if(odiSAPRef.sSrcTables.size() > 1) { 
   abapGenItr = odiSAPRef.getSrcTableIterator();
   while(abapGenItr.hasNext()) {
   curTable = new SourceTable();
   curTable = (SourceTable)abapGenItr.next();
   curTableDetail.curTableName = curTable.resourceName.trim();
   //for every table except for the very first one, insert an ENDIF
   if (!curTableDetail.isFirstTable()) { %>
	<%=curTableDetail.indent()%>ENDIF.
<% } }
   abapGenItr = odiSAPRef.getSrcTableIterator();
	num = 1;
	counterNew = 0;
	curJoinOutput = new SAPJoinOutput(iHelper, sapLogger, odiSAPRef);
   while(abapGenItr.hasNext()) {
	prevTableName = curTable;
	curTable = new SourceTable();
	curTable = (SourceTable)abapGenItr.next();
	curTableDetail.curTableName = curTable.resourceName.trim(); 
	prevTableDetail.curTableName = curTable.resourceName.trim();

	if (curTableDetail.isFirstTable()) {
		curTableDetail.prevTableName = curTable.resourceName.trim();
		prevTableName = curTable;
		curJoinOutput.append(prevTableName);
	} else {

if(curTableDetail.isLeftOuterJoin()) { //*** IF LEFT OUTER JOIN
if(counterNew == 0) { %>
*First Order: LEFT OUTER JOIN
*1st & 2nd table
LOOP AT tt_<%=curTableDetail.prevTableName%> 
INTO wa_<%=curJoinOutput.getInfo("RES_NAME")%>.
<%=curTableDetail.getSapMappedAndJoinColsPrev("", "MOVE  wa_[TABLE_NAME]-[COL_NAME]\u000A TO wa_final-[TABLE_NAME]_[COL_NAME]", ".", ".")%>
APPEND wa_final TO tt_final_tmp1.
CLEAR : wa_<%=curTableDetail.prevTableName%>.
ENDLOOP.
free : tt_<%=curTableDetail.prevTableName%>.
sort tt_final_tmp1 \u000A by <%=curTableDetail.getJoinColumn("3")%>.
sort tt_<%=curTableDetail.getInfo("RES_NAME")%> \u000A by <%=curTableDetail.getJoinColumn("2")%>.
<%curTableDetail.prevTableName = curTableDetail.getParentTable();%>
LOOP AT tt_final_tmp1 INTO wa_final.
lv_FLAG = ''.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%> 
WITH KEY <%=curTableDetail.getWithKeyForLeftOuter()%>
TRANSPORTING NO FIELDS
BINARY SEARCH.
if sy-subrc = 0.
lv_tabix_frm = sy-tabix.
lv_tabix_to = sy-tabix + 500.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedJoinForLeftOuter()%>.
lv_tabix_to = sy-tabix + 1000.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedJoinForLeftOuter()%>.
lv_tabix_to = sy-tabix + 5000.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedJoinForLeftOuter()%>.
lv_tabix_to = sy-tabix + 10000.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedJoinForLeftOuter()%>.
lv_tabix_to = sy-tabix + 100000.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
LOOP AT tt_<%=curTableDetail.getInfo("RES_NAME")%> 
from lv_tabix_frm to lv_tabix_to
INTO wa_<%=curTableDetail.getInfo("RES_NAME")%>
WHERE <%=curTableDetail.getJoinForLeftOuter()%>.
<%=curTableDetail.getSapMappedAndJoinCols("", "MOVE  wa_[TABLE_NAME]-[COL_NAME]\u000A TO wa_final-[TABLE_NAME]_[COL_NAME]", ".", ".")%>
APPEND wa_final 
TO tt_<%=curJoinOutput.getInfo("FINAL_TABLE")%>.
CLEAR wa_<%=curTableDetail.getInfo("RES_NAME")%>.
lv_FLAG = 'X'.
ENDLOOP.
ENDIF.
IF lv_FLAG NE 'X'.
APPEND wa_final 
TO tt_<%=curJoinOutput.getInfo("FINAL_TABLE")%>.
ENDIF.
ENDLOOP.
free : tt_final_tmp1, tt_<%=curTableDetail.getInfo("RES_NAME")%>.
<%curJoinOutput.append(prevTableName);
}//end of if(counterNew == 0) LEFT OUTER JOIN
} else { //else ************* INNER JOIN ******************
if(counterNew == 0) { //For 1st & 2nd Table join
	curTableDetail.prevTableName = curTableDetail.getParentTable(); %>
*First Order: INNER JOIN
*1st & 2nd table
sort  tt_<%=curTableDetail.prevTableName%> \u000A by <%=curTableDetail.getJoinColumn("1")%>.
sort tt_<%=curTableDetail.getInfo("RES_NAME")%>\u000A by <%=curTableDetail.getJoinColumn("2")%>.
CLEAR wa_<%=curJoinOutput.getInfo("RES_NAME")%>.
LOOP AT tt_<%=curTableDetail.prevTableName%> 
INTO wa_<%=curJoinOutput.getInfo("RES_NAME")%>.
<%curTableDetail.prevTableName = curTableDetail.getParentTable();%>
CLEAR : wa_<%=curTableDetail.getInfo("RES_NAME")%>.
READ TABLE tt_<%=curTableDetail.getInfo("RES_NAME")%> 
WITH KEY <%=curTableDetail.getWithKey()%>
TRANSPORTING NO FIELDS
BINARY SEARCH.
if sy-subrc = 0.
lv_tabix_frm = sy-tabix.
lv_tabix_to = sy-tabix + 500.
READ TABLE tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedInnerJoin()%>.
lv_tabix_to = sy-tabix + 1000.
READ TABLE tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedInnerJoin()%>.
lv_tabix_to = sy-tabix + 5000.
READ TABLE tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedInnerJoin()%>.
lv_tabix_to = sy-tabix + 10000.
READ TABLE tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedInnerJoin()%>.
lv_tabix_to = sy-tabix + 100000.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
LOOP AT tt_<%=curTableDetail.getInfo("RES_NAME")%> 
from lv_tabix_frm to lv_tabix_to
INTO wa_<%=curTableDetail.getInfo("RES_NAME")%>
WHERE <%=curTableDetail.getJoin()%>.
<%=curTableDetail.getSapMappedAndJoinCols("", "MOVE  wa_[TABLE_NAME]-[COL_NAME]\u000A TO wa_final-[TABLE_NAME]_[COL_NAME]", ".", ".")%>
<%=curTableDetail.getSapMappedAndJoinColsPrev("", "MOVE  wa_[TABLE_NAME]-[COL_NAME]\u000A TO wa_final-[TABLE_NAME]_[COL_NAME]", ".", ".")%>
APPEND wa_final 
TO tt_<%=curJoinOutput.getInfo("FINAL_TABLE")%>.
CLEAR : wa_<%=curTableDetail.getInfo("RES_NAME")%>.
ENDLOOP.
ENDIF.
CLEAR wa_<%=curJoinOutput.getInfo("RES_NAME")%>.
ENDLOOP.
free : tt_<%=curTableDetail.prevTableName%>, tt_<%=curTableDetail.getInfo("RES_NAME")%>.
<% curJoinOutput.append(prevTableName);
}//end of if(counterNew == 0)
// ***************** END OF FIRST TWO TABLE INNER JOIN ********************
}//end of else INNER JOIN
// AFTER 2ND Table i.e. 3 or 4 or 5 tables
if(curTableDetail.isLeftOuterJoin()) { //*** IF LEFT OUTER JOIN
if(counterNew > 0) { 
curTableDetail.prevTableName = curTableDetail.getParentTable();%>
*Order <%=counterNew+1%> : LEFT OUTER JOIN counterNew = <%=counterNew%>
sort  tt_<%=curJoinOutput.getInfo("RES_NAME")%>\u000A by <%=curTableDetail.getJoinColumn("3")%>.
sort tt_<%=curTableDetail.getInfo("RES_NAME")%>\u000A by <%=curTableDetail.getJoinColumn("2")%>.
LOOP AT tt_<%=curJoinOutput.getInfo("RES_NAME")%> 
INTO wa_final.
lv_FLAG = ''.
*MOVE-CORRESPONDING wa_<%=curJoinOutput.getInfo("RES_NAME")%>
*TO wa_<%=curJoinOutput.getInfo("FINAL_TABLE")%>.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%> 
WITH KEY <%=curTableDetail.getWithKeyForLeftOuter()%>
TRANSPORTING NO FIELDS
BINARY SEARCH.
if sy-subrc = 0.
lv_tabix_frm = sy-tabix.
lv_tabix_to = sy-tabix + 500.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedJoinForLeftOuter()%>.
lv_tabix_to = sy-tabix + 1000.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedJoinForLeftOuter()%>.
lv_tabix_to = sy-tabix + 5000.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedJoinForLeftOuter()%>.
lv_tabix_to = sy-tabix + 10000.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedJoinForLeftOuter()%>.
lv_tabix_to = sy-tabix + 100000.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
LOOP AT tt_<%=curTableDetail.getInfo("RES_NAME")%> 
from lv_tabix_frm to lv_tabix_to
INTO wa_<%=curTableDetail.getInfo("RES_NAME")%>
WHERE <%=curTableDetail.getJoinForLeftOuter()%>.
<%=curTableDetail.getSapMappedAndJoinCols("", "MOVE  wa_[TABLE_NAME]-[COL_NAME]\u000A TO wa_final-[TABLE_NAME]_[COL_NAME]", ".", ".")%>
APPEND wa_final 
TO tt_<%=curJoinOutput.getInfo("FINAL_TABLE")%>.
CLEAR wa_<%=curTableDetail.getInfo("RES_NAME")%>.
lv_FLAG = 'X'.
ENDLOOP.
ENDIF.
IF lv_FLAG NE 'X'.
APPEND wa_final 
TO tt_<%=curJoinOutput.getInfo("FINAL_TABLE")%>.
ENDIF.
CLEAR wa_final.
ENDLOOP.
free : tt_<%=curJoinOutput.getInfo("RES_NAME")%>, tt_<%=curTableDetail.getInfo("RES_NAME")%>.
<% prevJoinOutput = curJoinOutput;
curJoinOutput.append(prevTableName);
}//end of if(counterNew > 0) condition
} else { //***** ELSE INNER JOIN
if(counterNew > 0) { 
	curTableDetail.prevTableName = curTableDetail.getParentTable();%>
*Order <%=counterNew+1%> : INNER JOIN counterNew = <%=counterNew%>
sort  tt_<%=curJoinOutput.getInfo("RES_NAME")%>\u000A by <%=curTableDetail.getJoinColumn("3")%>.
sort tt_<%=curTableDetail.getInfo("RES_NAME")%>\u000A by <%=curTableDetail.getJoinColumn("2")%>.
CLEAR wa_final.
LOOP AT tt_<%=curJoinOutput.getInfo("RES_NAME")%> 
INTO wa_final.
CLEAR : wa_<%=curTableDetail.getInfo("RES_NAME")%>.
read table tt_<%=curTableDetail.getInfo("RES_NAME")%> 
WITH KEY <%=curTableDetail.getWithKeyFinal()%>
TRANSPORTING NO FIELDS
BINARY SEARCH.
if sy-subrc = 0.
lv_tabix_frm = sy-tabix.
lv_tabix_to = sy-tabix + 500.
READ TABLE tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedInnerJoinFinal()%>.
lv_tabix_to = sy-tabix + 1000.
READ TABLE tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedInnerJoinFinal()%>.
lv_tabix_to = sy-tabix + 5000.
READ TABLE tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedInnerJoinFinal()%>.
lv_tabix_to = sy-tabix + 10000.
READ TABLE tt_<%=curTableDetail.getInfo("RES_NAME")%>
into wa_<%=curTableDetail.getInfo("RES_NAME")%> index lv_tabix_to.
if <%=curTableDetail.getOptimizedInnerJoinFinal()%>.
lv_tabix_to = sy-tabix + 100000.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
LOOP AT tt_<%=curTableDetail.getInfo("RES_NAME")%> 
from lv_tabix_frm to lv_tabix_to
INTO wa_<%=curTableDetail.getInfo("RES_NAME")%>
WHERE <%=curTableDetail.getJoin()%>.
*<%curJoinOutput.curTableName = curTableDetail.getInfo("RES_NAME");%>
<%=curTableDetail.getSapMappedAndJoinCols("", "MOVE  wa_[TABLE_NAME]-[COL_NAME]\u000A TO wa_final-[TABLE_NAME]_[COL_NAME]", ".", ".")%>
APPEND wa_final 
TO tt_<%=curJoinOutput.getInfo("FINAL_TABLE")%>.
CLEAR : wa_<%=curTableDetail.getInfo("RES_NAME")%>. 
ENDLOOP.
ENDIF.
ENDLOOP.
free : tt_<%=curJoinOutput.getInfo("RES_NAME")%>, tt_<%=curTableDetail.getInfo("RES_NAME")%>.
<% prevJoinOutput = curJoinOutput;
curJoinOutput.append(prevTableName);
}//end of if(counterNew > 0) condition
}//end of else { //***** ELSE INNER JOIN
counterNew++;
}//end of else - if not first table
}//end of while for looping table
}//end of -- if(odiSAPRef.sSrcTables.size() > 1)
if(odiSAPRef.sSrcTables.size() > 1) { %>
*tt_final[] = tt_<%=curJoinOutput.getInfo("RES_NAME")%>.
*free : tt_<%=curJoinOutput.getInfo("RES_NAME")%>.
LOOP AT tt_<%=curJoinOutput.getInfo("RES_NAME")%> INTO wa_final.
MOVE-CORRESPONDING wa_final TO wa_final_tmp.
APPEND wa_final_tmp TO tt_final_tmp.
*CLEAR wa_final.
ENDLOOP.
free : tt_<%=curJoinOutput.getInfo("RES_NAME")%>.
<%} else { %>
LOOP AT tt_<%=curTableDetail.getInfo("RES_NAME")%> INTO wa_<%=curTableDetail.getInfo("RES_NAME")%>.
<%=curTableDetail.getSapMappedAndJoinCols("", "MOVE  wa_[TABLE_NAME]-[COL_NAME]\u000A TO wa_final_tmp-[TABLE_NAME]_[COL_NAME]", ".", ".")%>
APPEND wa_final_tmp TO tt_final_tmp.
ENDLOOP.
free :  tt_<%=curTableDetail.getInfo("RES_NAME")%>.
<% } %>
LOOP AT tt_final_tmp INTO wa_final_tmp.
<%=odiSAPRef.getSAPFinalMoveColList("", "MOVE  wa_final_tmp-[COL_NAME]\u000A TO wa_final_target-[COL_TARGET]", ".", "")%>
Append wa_final_target to tt_final_target.
ENDLOOP.
free : tt_final_tmp.
Clear wa_final_target.

IF iv_max_row_cnt IS NOT INITIAL.

Loop at tt_final_target into wa_final_target TO iv_max_row_cnt.
<%=odiSAPRef.getSAPFinalMoveColList("", "MOVE  wa_final_target-[COL_TARGET]\u000A TO [COL_TARGET]", ".", "")%>
<%if(curTableDetail.getColumnSize() == 1 ) { %>
wa_final_string = <%=odiSAPRef.getSAPFinalMoveColList("", "[COL_TARGET] ", " ", "")%>.
<%}else{%>
CONCATENATE 
<%=odiSAPRef.getSAPFinalMoveColList("", "[COL_TARGET] ", " ", "")%>
INTO wa_final_string
SEPARATED BY iv_delimiter.
<%}%>

CONCATENATE wa_final_string\u000A iv_delimiter INTO wa_final_string.

APPEND wa_final_string TO gt_result.
<%=odiSAPRef.getSAPFinalMoveColList("CLEAR : ", "[COL_TARGET] ", ",", ".")%>
ENDLOOP.

ELSE.

Loop at tt_final_target into wa_final_target.
<%=odiSAPRef.getSAPFinalMoveColList("", "MOVE  wa_final_target-[COL_TARGET]\u000A TO [COL_TARGET]", ".", "")%>
<%if(curTableDetail.getColumnSize() == 1 ) { %>
wa_final_string = <%=odiSAPRef.getSAPFinalMoveColList("", "[COL_TARGET] ", " ", "")%>.
<%}else{%>
CONCATENATE 
<%=odiSAPRef.getSAPFinalMoveColList("", "[COL_TARGET] ", " ", "")%>
INTO wa_final_string
SEPARATED BY iv_delimiter.
<%}%>

CONCATENATE wa_final_string\u000A iv_delimiter INTO wa_final_string.

APPEND wa_final_string TO gt_result.
<%=odiSAPRef.getSAPFinalMoveColList("CLEAR : ", "[COL_TARGET] ", ",", ".")%>
ENDLOOP.

ENDIF.

free : tt_final_target.

*Calling FTP program 
SELECT SINGLE * FROM cvers INTO t_vers 
WHERE component = 'SAP_ABA'.
lv_slen = strlen( iv_pwd ). 
IF t_vers-release = '46C'.
*To Scrammble password for 4.6C
CALL 'AB_RFC_X_SCRAMBLE_STRING'
ID 'SOURCE' FIELD iv_pwd ID 'KEY' FIELD lc_key
ID 'SCR' FIELD 'X' ID'DESTINATION' FIELD iv_pwd
ID 'DSTLEN' FIELD lv_slen.
ELSE.
*To Scrammble password for ECC 6.0
CALL FUNCTION 'HTTP_SCRAMBLE'
EXPORTING
SOURCE    = iv_pwd
sourcelen = lv_slen
key       = lc_key
IMPORTING
destination = iv_pwd.
ENDIF.
CALL FUNCTION 'FTP_CONNECT' 
EXPORTING 
user  = iv_user 
password  = iv_pwd 
host = iv_host 
rfc_destination = lc_dest 
IMPORTING 
handle = lv_hdl 
EXCEPTIONS 
not_connected   = 1 
OTHERS          = 2. 
IF sy-subrc <> 0. 
clear et_file_return. 
et_file_return-TYPE = gc_error. 
et_file_return-message = 'Unable to connect FTP.'. 
Append et_file_return. 
ELSE. 
IF NOT lc_pasv IS INITIAL. 
REFRESH lt_result. 
lv_cmd  = lc_cmd1. 
CALL FUNCTION 'FTP_COMMAND' 
EXPORTING 
handle = lv_hdl 
command = lv_cmd 
TABLES 
data  = lt_result 
EXCEPTIONS 
tcpip_error   = 1 
command_error = 2 
data_error    = 3. 
IF sy-subrc <> 0. 
clear et_file_return. 
et_file_return-TYPE = gc_error. 
et_file_return-message = 'Error in passing FTP .'. 
Append et_file_return. 
ENDIF. 
CALL FUNCTION 'FTP_R3_TO_CLIENT' 
EXPORTING 
fname  = iv_filename 
rfc_destination = lc_dest 
character_mode  = lc_pasv 
TABLES 
text  = gt_result 
EXCEPTIONS 
command_error   = 1 
data_error = 2 
OTHERS     = 3. 
IF sy-subrc <> 0. 
clear et_file_return. 
et_file_return-TYPE = gc_error. 
et_file_return-message = 'Error passing data to FTP .'. 
Append et_file_return. 
ENDIF. 
free : gt_result.
CONCATENATE lc_cmd2 iv_filename 
INTO lv_cmd SEPARATED BY ' '. 
REFRESH lt_result. 
CONCATENATE 'cd' iv_path into path SEPARATED BY SPACE.
CALL FUNCTION 'FTP_COMMAND'
EXPORTING
handle  = lv_hdl
command  = PATH
TABLES
data  = lt_result
EXCEPTIONS
tcpip_error   = 1
command_error = 2
data_error    = 3.
IF sy-subrc NE 0.
clear et_file_return.
et_file_return-TYPE = gc_error.
et_file_return-message = 'Error in passing FTP .'.
Append et_file_return.
EXIT.
ELSE.
clear et_file_return.
et_file_return-TYPE = gc_success.
et_file_return-message = 'Data Transfer Successful'.
Append et_file_return.
ENDIF.
CALL FUNCTION 'FTP_COMMAND' 
EXPORTING 
handle  = lv_hdl 
command  = lv_cmd 
TABLES 
data  = lt_result 
EXCEPTIONS 
tcpip_error   = 1 
command_error = 2 
data_error    = 3. 
IF sy-subrc NE 0. 
clear et_file_return. 
et_file_return-TYPE = gc_error. 
et_file_return-message = 'Error in passing FTP .'. 
Append et_file_return. 
EXIT. 
ELSE. 
clear et_file_return. 
et_file_return-TYPE = gc_success. 
et_file_return-message = 'Data Transfer Successful'. 
Append et_file_return. 
ENDIF. 
ELSE. 
clear et_file_return. 
et_file_return-TYPE = gc_error. 
et_file_return-message = 'No data Available.'. 
Append et_file_return. 
CALL FUNCTION 'FTP_DISCONNECT' 
EXPORTING 
handle = lv_hdl. 
CALL FUNCTION 'RFC_CONNECTION_CLOSE' 
EXPORTING 
destination = lc_dest 
EXCEPTIONS 
OTHERS = 1. 
IF sy-subrc <> 0. 
clear et_file_return. 
et_file_return-TYPE = gc_error. 
et_file_return-message = 'Error in RFC connection.'.  
Append et_file_return. 
ENDIF. 
ENDIF.
ENDIF.
ELSE.
clear et_file_return.
et_file_return-TYPE = gc_error.
et_file_return-message = \u000A'Installed ABAP program does not match interface definition'.
Append et_file_return.
ENDIF."]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String"><![CDATA[File Server for SAP ABAP]]></Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[FILE]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36402000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[4]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[140]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Download Data from FTP Server]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36402000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[<%if(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("FTP")) {%>

OdiFtpGet  "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>"  "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>"  "-PASSWORD=<@=sFtpPasswordEnc@>" "-REMOTE_DIR=<?=sFtpPath?>"  "-REMOTE_FILE=<%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.txt"  "-LOCAL_DIR=<%=odiRef.getOption("TEMP_DIR")%>" "-LOCAL_FILE=<%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.txt"  "-PASSIVE_MODE=<%=odiRef.getOption("FTP_PASSIVE_MODE")%>"  "-TIMEOUT=<%=odiRef.getOption("FILE_TRANSFER_TIMEOUT")%>"

<% } else if(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("SFTP")) { %> 

OdiSftpGet  "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>"  "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>"  "-PASSWORD=<@=sFtpPasswordEnc@>" "-REMOTE_DIR=<?=sFtpPath?>"  "-REMOTE_FILE=<%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.txt"  "-LOCAL_DIR=<%=odiRef.getOption("TEMP_DIR")%>" "-LOCAL_FILE=<%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.txt"  "-PASSIVE_MODE=<%=odiRef.getOption("FTP_PASSIVE_MODE")%>" "-IDENTITY_FILE=<%=odiRef.getOption("SSH_IDENTITY_FILE")%>"  "-TIMEOUT=<%=odiRef.getOption("FILE_TRANSFER_TIMEOUT")%>"


<% } else if(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("SCP")) { %>

OdiScpGet  "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>"  "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>"  "-PASSWORD=<@=sFtpPasswordEnc@>" "-REMOTE_DIR=<?=sFtpPath?>"  "-REMOTE_FILE=<%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.txt"  "-LOCAL_DIR=<%=odiRef.getOption("TEMP_DIR")%>" "-LOCAL_FILE=<%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.txt"  "-PASSIVE_MODE=<%=odiRef.getOption("FTP_PASSIVE_MODE")%>" "-IDENTITY_FILE=<%=odiRef.getOption("SSH_IDENTITY_FILE")%>"  "-TIMEOUT=<%=odiRef.getOption("FILE_TRANSFER_TIMEOUT")%>"


<% } else { /* FTP_TRANSFER_METHOD is NONE */ %>

OdiSleep "-DELAY=1"

<% } %>
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:14.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String"><![CDATA[File Server for SAP ABAP]]></Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[FILE]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36403000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[4]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[150]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Generate Loader Script]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36403000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[<%
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class sqlldrColFormat {
    // This HashMap contains search key: <alias>.<col_name> and value: <source data type>
    static HashMap srcColDataTypes = new HashMap();

    public static String quoteReplacement(String s) {
    // quoteReplacement like in Java 1.6
    // This is needed, as BSh version only supports Java 1.5
        if ((s.indexOf((char)92) == -1) && (s.indexOf('$') == -1))
            return s;
        StringBuffer sb = new StringBuffer();
        for (int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            if (c == (char)92) {
                sb.append((char)92); sb.append((char)92);
            } else if (c == '$') {
                sb.append((char)92); sb.append('$');
            } else {
                sb.append(c);
            }
        }
        return sb.toString();
    }

    public static String getPartiallyQuotedString( String in )  
    // Searches for "<Start Quoted>...<End Quoted>" in order to replace these strings
    // by odiRef.getQuotedString(...) of the string. This is required to pass [METADATA] 
    // from first % iteration to second % iteration. Otherwise invalid Java code is generated.
    { 
        // Compile regular expression
        Pattern pattern = Pattern.compile("<Start Quoted>(?:.)*?<End Quoted>", Pattern.DOTALL);
        Matcher matcher = pattern.matcher(in);

        // Replace all occurrences of pattern in input
        StringBuffer buf = new StringBuffer();
        boolean found = false;
        while ((found = matcher.find())) {
            // Get the match result
            String replaceStr = matcher.group();
            // Remove <?=odiRef.getObjectName ....?>
            replaceStr = replaceStr.replaceAll("<?(?:.)*?\?>","");
            // Insert replacement
            // Don't use appendReplacement, we do not want specail chars to be replaced
            matcher.appendReplacement(buf, "");
            buf.append( odiRef.getQuotedString ( replaceStr  ));
        }
        matcher.appendTail(buf);

        // Get result
        return buf.toString();
    }

    public static void addSrcTableMetadata( String popTabAlias, metadata )  
    // Extract column names and their datatype from metadata
    {
        String[] a = metadata.split("SNP"+(char)92+"$CRDWG_COL");
        int i;
        for (i=0;i<a.length;i++) { 
	String[] colInfo = a[i].split("SNP"+(char)92+"$CR"); 
	if (colInfo.length > 2 && colInfo[1].startsWith("COL_NAME")) { 
	  String colName = colInfo[1].substring(9);
	  String dataType = colInfo[2].substring(10);
	  srcColDataTypes.put( popTabAlias+"."+colName, dataType );
	}; 
        };
    }

    public static String ABAPDataType( String expr) 
    // Returns the ABAP data type of the column used in expr.
    // expr may only contain reference to a source single column
    // If no column is refereenced, an empty string will be returned.
    {
        // Go over all source columns
        Iterator iter = srcColDataTypes.keySet().iterator();
        while (iter.hasNext()) {
          String curCol = (String)iter.next();
          Pattern pattern = Pattern.compile((char)92+"b"+(char)92+"Q"+curCol+(char)92+"E"+(char)92+"b");
          Matcher matcher = pattern.matcher(expr);
          if (matcher.find()) { return srcColDataTypes.get(curCol); };
        };
        return "";
    }

    public static String get( String colName, srcDataType, destDataType, scale, expr) 
    // Returns format description for sqlldr
    {
        if (destDataType.startsWith("TIMESTAMP")) { 
            return  " TIMESTAMP(8)  " + (char)34 + "YYYYMMDD" + (char)34 + " NULLIF " + colName + " = " +(char)34 + "00000000" + (char)34;
        } else if ("DATE".equals(destDataType)) { 
            return  " DATE  "  + (char)34 + "YYYYMMDD" + (char)34 + " NULLIF " + colName + " = " +(char)34 + "00000000" + (char)34;            
        } else if ("NUMBER".equals(destDataType)||"FLOAT".equals(destDataType)||"REAL".equals(destDataType)||"BINARY_DOUBLE".equals(destDataType)||"BINARY_FLOAT".equals(destDataType)) { 
            String fractionFormat = "";
            if (!scale.equals("0") && !scale.equals("")) fractionFormat = "D999999999999999999999999";
            String signFormat = "MI";
            if (ABAPDataType( expr ).equals("NUMC")) signFormat = "";
            if (ABAPDataType( expr ).equals("FLTP")) {
                return  "  " + (char)34 + "TO_NUMBER(:" + colName + ", '9D99999999999999999999999999999999999999EEEE', 'NLS_NUMERIC_CHARACTERS=''.,''') " + (char)34;
            } else {
                return  "  " + (char)34 + "TO_NUMBER(:" + colName + ", '99999999999999999999999999999999999999" + fractionFormat + signFormat + "', 'NLS_NUMERIC_CHARACTERS=''.,''') " + (char)34;
            };
        } else {
            return "";
        }  
    }

}
%><%=sqlldrColFormat.getPartiallyQuotedString(
    odiRef.getSrcTablesList("<"+"%", " sqlldrColFormat.addSrcTableMetadata(\u0022[POP_TAB_ALIAS]\u0022, <Start Quoted>[METADATA]<End Quoted>); ", "", "%"+">")
) %>OdiOutFile "-File=<%=(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getInfo("SRC_WORK_SCHEMA") : odiRef.getOption("TEMP_DIR")  %><%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.ctl"
OPTIONS (
	ERRORS=<%=odiRef.getUserExit("MAX_ALLOWED_ERRORS")%>
)
LOAD DATA
CHARACTERSET UTF8
INFILE '<%=(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getInfo("SRC_WORK_SCHEMA") : odiRef.getOption("TEMP_DIR") %><%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.txt' "str '<?=""+(char)92+"n"?>'"
BADFILE  '<%=(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getInfo("SRC_WORK_SCHEMA") : odiRef.getOption("TEMP_DIR") %><%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.bad' 
DISCARDFILE '<%=(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getInfo("SRC_WORK_SCHEMA") : odiRef.getOption("TEMP_DIR") %><%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.dsc' 
INTO TABLE <%=odiRef.getTable("L", "COLL_NAME", "W")%>
FIELDS TERMINATED BY "<%=odiRef.getOption("FIELD_SEPARATOR")%>"
TRAILING NULLCOLS
(
	<%=odiRef.getColList("", "[CX_COL_NAME]\t" + "<"+"%=sqlldrColFormat.get(\u0022[CX_COL_NAME]\u0022, \u0022[SOURCE_DT]\u0022, \u0022[DEST_DT]\u0022, \u0022[SCALE]\u0022, \u0022[EXPRESSION]\u0022 ) %"+">" , ",\n\t", "","")%>
)]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36404000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[5]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[30]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Validate]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36404000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[<%

if(odiRef.getOption("VALIDATE").equals("1")) {
	String ftpTransferMethod=odiRef.getOption("FTP_TRANSFER_METHOD");

	if(!(ftpTransferMethod.equalsIgnoreCase("SCP") || ftpTransferMethod.equalsIgnoreCase("FTP") || ftpTransferMethod.equalsIgnoreCase("NONE") || 	ftpTransferMethod.equalsIgnoreCase("SFTP"))) {

		sapLogger.log(sapLogger.ERROR, "Invalid FTP_TRANSFER_METHOD Option value, Supported values are NONE, FTP, SFTP and SCP");
		throw new Exception("Invalid FTP_TRANSFER_METHOD Option value, Supported values are NONE, FTP, SFTP and SCP : " + ftpTransferMethod);
	}
}

%>]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36405000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[JYTHON]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[180]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Report number of rows (details)]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36405000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[#Report number of rows in details
# Output summary to log
raise "\nThis message is not an error. It lists the number of rows processed by SQLLoader Utility\nNb Rows Report", strprt]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36406000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[4]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[190]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Delete FTP Files]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36406000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[_OdiSAPAbapExecute "-UPLOAD=0" "-EXECUTE=<%=odiRef.getOption("EXECUTE_ABAP_CODE")%>" "-EXECUTE_BASE_RKM=0" "-ZRFC_RUN_INSTALL=1" "-ABAP_PROGRAM_NAME=ZODI_RFC_DELETE_FTP_FILE" "-HOST=<%=odiRef.getInfo("SRC_DSERV_NAME")%>" "-USER=<%=odiRef.getInfo("SRC_USER_NAME")%>" "-PASSWORD=<%=odiRef.getInfo("SRC_PASS")%>" "-SAP_CLIENT=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_CLIENT" )?>" "-SAP_LANGUAGE=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_LANGUAGE" )?>" "-SAP_SYSTEM_NUMBER=<?=odiRef.getFlexFieldValue( odiRef.getInfo("SRC_I_CONNECT"), "1400", "SAP_SYSTEM_NUMBER" )?>" "-SAP_FUNCTION_GROUP_NAME=<%=odiRef.getOption("SAP_FUNCTION_GROUP_NAME")%>" "-CONNECTION_POOL_NAME=<%=odiRef.getOption("SAP_CONNECTION_POOL")%>" "-CONNECTION_POOL_SIZE=<%=odiRef.getOption("SAP_CONNECTION_POOL_SIZE")%>" "-FILE_DELIMITER=<%=odiRef.getOption("FIELD_SEPARATOR")%>" "-FILE_NAME=<%=odiRef.getOption("ABAP_PROGRAM_NAME")%>_<%=odiRef.getContext("CTX_CODE")%>.txt" "-FTP_HOST=<?=sFtpServerName?>" "-FTP_USER=<?=sFtpUsername?>" "-FTP_PASSWORD=<@=sFtpPassword@>" "-FTP_PASSIVE_MODE=<%=odiRef.getOption("FTP_PASSIVE_MODE")%>" "-FTP_TRANSFER_TIMEOUT=<%=odiRef.getOption("FILE_TRANSFER_TIMEOUT")%>" "-USER_ABAP_PARAMETER_NAMES=<Value>" "-USER_ABAP_PARAMETER_VALUES=<Value>" "-USER_ABAP_PARAMETER_SEPARATOR=<Value>" "-ABAP_TABLE_PARAMETERS=ET_FILE_RETURN,BAPIRET2;" "-LOG_FILE_NAME=<%=odiRef.getOption("LOG_FILE_NAME")%>" "-FTP_PATH=<%=(odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getOption("TEMP_DIR") : "<?=sFtpPath?>" %>" "-DEV_CLASS=ZODI_DEVCLASS" "-MAX_ROW_COUNT=<Value>" "-HASH_VALUE_MARKER=HVM" "-ABAP_PROGRAM_BODY=<Value>"
]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36407000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[5]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[200]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Delete Temporary Files]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36407000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[import java.io.*;
<%if(odiRef.getOption("DELETE_TEMPORARY_OBJECTS").equals("1")) { %>
try {
		
	String f = (odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getInfo("SRC_SCHEMA") : odiRef.getOption("TEMP_DIR") + <%=odiRef.getOption("ABAP_PROGRAM_NAME")%> + "_" + <%=odiRef.getContext("CTX_CODE")%> + ".ctl";


	File fi = new File(f);
	if(fi.exists()) {
	     fi.delete();
	}	 

	String f2 = new File((odiRef.getOption("FTP_TRANSFER_METHOD").equalsIgnoreCase("NONE")) ? odiRef.getInfo("SRC_SCHEMA") : odiRef.getOption("TEMP_DIR") + odiRef.getOption("ABAP_PROGRAM_NAME") + "_" + odiRef.getContext("CTX_CODE") + ".txt");
	if(f2.exists()) {
	     f2.delete();
	}
	
}catch(Exception e ) {
}finally {
	fi = null;
	f2 = null;

}

<%}%>]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36408000]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[5]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[210]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Release Resources]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36408000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[//de-allocate collection object & other global variables

//logger class
sapLogger = null;

//Interface Metadata Helper
iHelper = null;

//flex field tables
rTabs = null;

//SAP api class 
odiSAPRef = null;

]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[5000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[SAP_ABAP]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36409000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[ORACLE]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[5]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[220]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Drop Work Table]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36409000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[drop table <%=odiRef.getTable("L", "COLL_NAME", "W")%>]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLschemaName" type="java.lang.String"><![CDATA[File Server for SAP ABAP]]></Field>
	<Field name="ColPlanComp" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[FILE]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36410000]]></Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefPlanComp" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogMethod" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KxmUsed" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[4]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[100]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Get FTP Details]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxt">
		<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[36410000]]></Field>
	<Field name="TxtOrd" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="Txt" type="java.lang.String"><![CDATA[
//get FTP server details
<?
String sFtpServerName = odiRef.getInfo("SRC_DSERV_NAME");
String sFtpPath = odiRef.getInfo("SRC_SCHEMA");
String sFtpLocalPath = odiRef.getInfo("SRC_WORK_SCHEMA");
String sFtpUsername = odiRef.getInfo("SRC_USER_NAME");

?>

<@ String sFtpPasswordEnc = odiRef.getInfo("SRC_ENCODED_PASS"); @> 
<@ String sFtpPassword = odiRef.getInfo("SRC_PASS"); @> ]]></Field>
	<Field name="LangName" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[3000]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IndChange" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2010-01-22 14:25:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[CKURZ]]></Field>
	<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2046000]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[30]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2047000]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[200]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[360000]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[2047000]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[220]]></Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[5]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[40]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[38]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
</Object>
</SunopsisExport>
