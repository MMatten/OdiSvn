<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>SQL Syntax</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="common_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='common.css'>");}
//-->
</script>
<style>
<!--
code {  }
-->
</style><style type="text/css">
<!--
p.whs1 { margin-left:40px; }
p.whs2 { font-weight:bold; }
ul.whs3 { list-style:disc; }
p.whs4 { margin-left:0px; }
p.whs5 { x-text-underline:off; text-decoration:none; }
p.whs6 { margin-left:0px; x-text-underline:off; text-decoration:none; }
table.whs7 { width:100%; }
th.whs8 { width:100%; }
td.whs9 { width:16%; }
td.whs10 { width:84%; }
td.whs11 { width:10%; }
td.whs12 { width:90%; }
-->
</style><script type="text/javascript" language="JavaScript">
<!--
if ((navigator.appName == "Netscape") && (parseInt(navigator.appVersion) == 4))
{
  var strNSS = "<style type='text/css'>";
  strNSS += "p.whs4 {margin-left:1pt; }";
  strNSS += "p.whs6 {margin-left:1pt; }";
  strNSS +="</style>";
  document.write(strNSS);
}
//-->
</script>
<script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='../wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("Oracle Data Integrator Driver for XML\nSQL Syntax");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("../index.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h1>SQL Syntax</h1>

<p>The following statements are available when using the built-in engine 
 to store the XML schema. They enable the management of the data and data 
 structure in the schema through Standard SQL Syntax. </p>

<p class=Remarque><span class=AlertTitre>Important note</span>: If you 
 are using an External Database, you may use the database engine querying 
 syntax instead of this one.</p>

<h2>SQL Statements</h2>

<p>Any number of commands may be combined. ';' may be used to separate 
 each command but is not necessary.&nbsp;</p>

<h3><a name=COMMIT>COMMIT</a></h3>

<p><span class=Code>COMMIT [WORK]</span>&nbsp;</p>

<p>Ends a transaction on the schema and makes the changes permanent.</p>

<h3><a name=CREATETABLE>CREATE TABLE</a></h3>

<p><span class=Code>CREATE TABLE &lt;table_name&gt;&nbsp;( </span><span 
 class=Code
	style="font-weight: bold;"><B>&lt;columnDefinition&gt;</B></span><span class=Code> 
 [, ...] [, </span><span class=Code
						style="font-weight: bold;"><B>&lt;constraintDefinition&gt;</B></span><span 
 class=Code>...])</span>&nbsp;<span class=Code
									style="font-weight: bold;"><B><br>
<br>
&lt;columnDefinition&gt;&nbsp;::=</B></span></p>

<p class="whs1"><span class=Code>&lt;column_name&gt; &lt;datatype&gt; 
 [(anything)] [[NOT] NULL] [IDENTITY] [PRIMARY KEY]&nbsp;</span></p>

<p class="whs2"><span class=Code><B>&lt;constraintDefinition&gt; 
 ::=</B></span></p>

<p class="whs1"><span class=Code>[ CONSTRAINT &lt;constraint_name&gt; 
 ]&nbsp;</span></p>

<p class="whs1"><span class=Code>UNIQUE ( &lt;column_name&gt; 
 [,&lt;column&gt;...] ) |&nbsp;</span></p>

<p class="whs1"><span class=Code>PRIMARY KEY ( &lt;column_name&gt; 
 [,&lt;column_name&gt;...] ) |&nbsp;</span></p>

<p class="whs1"><span class=Code>FOREIGN KEY ( &lt;column_name&gt; 
 [,&lt;column_name&gt;...] ) REFERENCES &lt;referenced_table&gt; ( &lt;column_name&gt; 
 [,&lt;column_name&gt;...] )</span> </p>

<p>Create a tables and its constraints in the relational schema.</p>

<h4>Remarks</h4>

<ul type="disc" class="whs3">
	
	<li class=kadov-p><p>IDENTITY columns are automatically incremented 
 integer columns. The last inserted value into an identity column for a 
 connection is available using the <span class=Code>IDENTITY()</span> function.&nbsp;</p></li>
	
	<li class=kadov-p><p>Valid datatypes are: BIT, TINYINT, BIGINT, LONGVARBINARY, 
 VARBINARY, BINARY, LONGVARCHAR, CHAR, NUMERIC, DECIMAL, INTEGER, SMALLINT, 
 FLOAT, REAL, DOUBLE, VARCHAR, DATE, TIME, TIMESTAMP, OBJECT</p></li>
</ul>

<h3><a name=DELETE>DELETE</a> </h3>

<p><span class=Code>DELETE FROM &lt;table_name&gt; [ WHERE </span><span 
 class=Code
	style="font-weight: bold;"><B>&lt;<a href="#Expression:"
										style="font-weight: bold;">expression</a>&gt;</B></span><span 
 class=Code> ]</span>&nbsp;</p>

<p>Remove rows in a table in the relational schema. This function uses 
 a standard SQL Syntax.</p>

<h3><a name="DISCONNECT&nbsp;">DISCONNECT&nbsp;</a> </h3>

<p>Closes this connection. </p>

<h4>Remarks</h4>

<ul type="disc" class="whs3">
	
	<li class=kadov-p><p>It is not required to call this command when using 
 the JDBC interface: it is called automatically when the connection is 
 closed. </p></li>
	
	<li class=kadov-p><p>After disconnecting, it is not possible to execute 
 other queries with this connection.&nbsp; </p></li>
</ul>

<h3><a name=DROPTABLE>DROP TABLE</a> </h3>

<p><span class=Code>DROP TABLE &lt;table_name&gt;</span></p>

<p>Remove a table, the data and indexes from the relational schema.&nbsp;</p>

<h3><a name=INSERTINTO>INSERT INTO</a> </h3>

<p><span class=Code>INSERT INTO &lt;table_name&gt; [ ( &lt;column_name&gt; 
 [,...] ) ]&nbsp; { VALUES (&lt;<a href="#Expression:">expression</a>&gt; 
 [,...]) | </span><span class=Code
						style="font-weight: bold;"><B>&lt;SELECT Statement&gt;</B></span><span 
 class=Code> }</span>&nbsp;</p>

<p>Insert one or more new rows of data into a table.&nbsp; </p>

<h3><a name=ROLLBACK>ROLLBACK</a> </h3>

<p>Undo the changes made since the last COMMIT or ROLLBACK.</p>

<h3><a name=SELECT>SELECT</a> </h3>

<p><span class=Code>SELECT [DISTINCT]&nbsp;</span><span class=Code
														style="margin-left: 40px;">{ 
 &lt;<a href="#selectExpression:">select_expression</a>&gt; | &lt;table_name&gt;.* 
 | * } [, ... ]&nbsp;</span></p>

<p class="whs4"><span class=Code>[ INTO &lt;new_table&gt; 
 ]&nbsp;</span></p>

<p><span class=Code>FROM &lt;table_list&gt;&nbsp;</span></p>

<p class="whs4"><span class=Code>[ WHERE &lt;<a href="#Expression:">expression</a>&gt; 
 ]&nbsp;</span></p>

<p class="whs4"><span class=Code>[ GROUP BY &lt;<a href="#Expression:">expression</a>&gt; 
 [, ...] ]&nbsp;</span></p>

<p class="whs4"><span class=Code>[ ORDER BY &lt;<a href="#orderExpression">order_expression</a>&gt; 
 [, ...] ]&nbsp;</span></p>

<p class="whs4"><span class=Code>[ { UNION [ALL] | {MINUS|EXCEPT} 
 | INTERSECT } &lt;select_statement&gt; ]&nbsp;</span></p>

<p><a name="tableList:"><span class=Code>&nbsp;</span><span class=Code
															style="font-weight: bold;"><B><br>
&lt;table_list&gt;</a> ::=</B></span></p>

<p class="whs1"><span class=Code
									style="margin-left: 40px;">&lt;table_name&gt; 
 [ { INNER | LEFT [OUTER] } JOIN &lt;table_name&gt; ON &lt;<a href="#Expression:">expression</a>&gt; 
 ] [, ...]&nbsp;</span></p>

<p class="whs2"><span class=Code><B>&lt;<a name="selectExpression:"
														style="font-weight: bold;">select_expression</a>&gt; 
 ::=</B></span></p>

<p class="whs1"><span class=Code>{ &lt;<a href="#Expression:">expression</a>&gt; 
 | COUNT(*) | {COUNT | MIN | MAX | SUM | AVG} (&lt;<a href="#Expression:">expression</a>&gt;) 
 &nbsp;&lt;column_alias&gt;}&nbsp;</span></p>

<p class="whs2"><span class=Code><B>&lt;<a name=orderExpression
														style="font-weight: bold;">order_expression</a>&gt; 
 ::=</B></span></p>

<p class="whs1"><span class=Code>{ &lt;column_number&gt; 
 | &lt;column_alias&gt; | &lt;select_expression&gt; } [ ASC | DESC ]&nbsp; 
 </span></p>

<p>Retrieves information from one or more tables in the schema.</p>

<h3><a name=UPDATE>UPDATE</a> </h3>

<p><span class=Code>UPDATE table SET column = &lt;<a href="#Expression:">expression</a>&gt; 
 [, ...]&nbsp;[WHERE &lt;<a href="#Expression:">expression</a>&gt;]&nbsp;</span></p>

<p>Modifies data of a table in the database.&nbsp;</p>

<h3><a name=SETAUTOCOMMIT>SET AUTOCOMMIT</a> </h3>

<p><span class=Code>SET AUTOCOMMIT { TRUE | FALSE }&nbsp;</span></p>

<p>Switches on or off the connection's auto-commit mode. If switched on, 
 then all statements will be committed as individual transactions. Otherwise, 
 the statements are grouped into transactions that are terminated by either 
 COMMIT or ROLLBACK. By default, new connections are in auto-commit mode.&nbsp; 
 </p>

<h3>Expressions, Condition &amp; values</h3>

<p class="whs5"><u 
 style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><b 
 style="font-weight: bold;"><a name="Expression:"><span class=Code
														style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ ">&lt;expression</a>&gt; 
 ::=</span></b></u></p>

<p class="whs1"><span class=Code>[NOT] &lt;<a href="#condition:">condition</a>&gt; 
 [ { OR | AND } &lt;<a href="#condition:">condition</a>&gt; ]&nbsp;</span></p>

<p class="whs2"><span class=Code><B>&lt;<a name="condition:"
														style="font-weight: bold;">condition</a>&gt; 
 ::=</B></span></p>

<p class="whs1"><span class=Code>{ &lt;<a href="#value:">value</a>&gt; 
 [ || &lt;<a href="#value:">value</a>&gt; ]&nbsp;</span></p>

<p class="whs1"><span class=Code>| &lt;<a href="#value:">value</a>&gt; 
 { = | &lt; | &lt;= | &gt; | &gt;= | &lt;&gt; | != | IS [NOT] } &lt;<a 
 href="#value:">value</a>&gt;</span></p>

<p class="whs1"><span class=Code>| EXISTS(&lt;select_statement&gt;)&nbsp;</span></p>

<p class="whs1"><span class=Code>| &lt;<a href="#value:">value</a>&gt; 
 BETWEEN &lt;<a href="#value:">value</a>&gt; AND &lt;<a href="#value:">value</a>&gt;</span></p>

<p class="whs1"><span class=Code>| &lt;<a href="#value:">value</a>&gt; 
 [NOT] IN ( {&lt;<a href="#value:">value</a>&gt; [, ...] | selectStatement 
 } )&nbsp;</span></p>

<p class="whs1"><span class=Code>| &lt;<a href="#value:">value</a>&gt; 
 [NOT] LIKE &lt;<a href="#value:">value</a>&gt; [ESCAPE] value }&nbsp;</span></p>

<p class="whs6"><b 
 style="font-weight: bold;"><u style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><span 
 class=Code
	style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ ">&lt;<a 
 name="value:"
	style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ ">value</a>&gt; 
 ::=</span></u></b></p>

<p class="whs1"><span class=Code>[ + | - ] { <a href="#term:">term</a> 
 [ { + | - | * | / } <a href="#term:">term</a> ]&nbsp;</span></p>

<p class="whs1"><span class=Code>| ( <a href="#condition:">condition</a> 
 )&nbsp;</span></p>

<p class="whs1"><span class=Code>| function ( [parameter] 
 [,...] )&nbsp;</span></p>

<p class="whs1"><span class=Code>| selectStatement giving 
 one value</span>&nbsp;</p>

<p class="whs6"><b 
 style="font-weight: bold;"><u style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><a 
 name="term:"
	style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ "><span 
 class=Code
	style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ ">&lt;term&gt; 
 ::=</span></u></b><span style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ ">&nbsp;</span></a></p>

<p class="whs1"><span class=Code>{ 'string' | number | floatingpoint&nbsp;| 
 [table.]column | TRUE | FALSE | NULL }</span>&nbsp;</p>

<p class="whs5"><b 
 style="font-weight: bold;"><u style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><a 
 name="string:"
	style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ "><span 
 class=Code
	style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ ">&lt;string&gt; 
 ::=</span></u></b><span style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ ">&nbsp;</span></a></p>

<ul type="disc" class="whs3">
	
	<li class=kadov-p><p>Starts and ends with a single '. In a string started 
 with ' use '' to create a '.&nbsp;</p></li>
	
	<li class=kadov-p><p>LIKE uses '%' to match any (including 0) number 
 of characters, and '_' to match exactly one character. To search for '%' 
 itself, '\%' must be used, for '_' use '\_'; or any other escaping character 
 may be set using the ESCAPE clause.&nbsp;</p></li>
</ul>

<p class="whs5"><b 
 style="font-weight: bold;"><u style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><a 
 name="name:"><span class=Code
					style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ ">&lt;name&gt; 
 :</a>:=</span></u></b></p>

<ul type="disc" class="whs3">
	
	<li class=kadov-p><p>A name starts with a letter and is followed by 
 any number of letters or digits. Lowercase is changed to uppercase except 
 for strings and quoted identifiers. Names are not case-sensitive. </p></li>
	
	<li class=kadov-p><p>Quoted identifiers can be used as names (for example 
 for tables or columns). Quoted identifiers start and end with &quot;. 
 In a quoted identifier use &quot;&quot; to create a &quot;. With quoted 
 identifiers it is possible to create mixed case table and column names. 
 <br>
	Example: CREATE TABLE &quot;Address&quot; (&quot;Nr&quot; INTEGER,&quot;Name&quot; 
 VARCHAR); SELECT * FROM &quot;Address&quot;. Quoted identifiers are not 
 strings.&nbsp;</p></li>
</ul>

<p class="whs5"><b 
 style="font-weight: bold;"><u style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><a 
 name="values:"><span class=Code
						style="x-text-underline: off; /*begin!kadov{{*/ text-decoration: none; /*}}end!kadov*/ ">&lt;values&gt; 
 :</a>:=</span></u></b></p>

<ul type="disc" class="whs3">
	
	<li class=kadov-p><p>A 'date' value starts and ends with ', the format 
 is yyyy-mm-dd (see java.sql.Date).&nbsp;</p></li>
	
	<li class=kadov-p><p>A 'time' value starts and ends with ', the format 
 is hh:mm:ss (see java.sql.Time).&nbsp;</p></li>
	
	<li class=kadov-p><p>Binary data starts and ends with ', the format 
 is hexadecimal. '0004ff' for example is 3 bytes, first 0, second 4 and 
 last 255 (0xff).&nbsp;</p></li>
</ul>

<h2>SQL FUNCTIONS</h2>

<table x-use-null-cells width="100%" class="whs7">

<tr>
<th width="100%" class="whs8">
<p class=TitreTableau>NUMERICAL FUNCTIONS</th></tr>
</table>

<table x-use-null-cells width="100%" class="whs7">

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>ABS(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the absolute value of a double value</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>ACOS(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the arc cosine of an angle</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>ASIN(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the arc sine of an angle</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>ATAN(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the arc tangent of an angle</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>ATAN2(a,b)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the tangent of a/b</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>CEILING(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the smallest integer that is not less than 
 d</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>COS(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the cosine of an angle</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>COT(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the cotangent of an angle</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>DEGREES(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>converts radians to degrees</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>EXP(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns e (2.718...) raised to the power of d</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>FLOOR(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the largest integer that is not greater than 
 d</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>LOG(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the natural logarithm (base e)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>LOG10(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the logarithm (base 10)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>MOD(a,b)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns a modulo b</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>PI()</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns pi (3.1415...)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>POWER(a,b)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns a raised to the power of b</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>RADIANS(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>converts degrees to radians</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>RAND()</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns a random number x bigger or equal to 0.0 
 and smaller than 1.0</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>ROUND(a,b)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>rounds a to b digits after the decimal point</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>SIGN(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns -1 if d is smaller than 0, 0 if d==0 and 
 1 if d is bigger than 0</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>SIN(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the sine of an angle</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>SQRT(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the square root</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>TAN(d)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the trigonometric tangent of an angle</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>TRUNCATE(a,b)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>truncates a to b digits after the decimal point</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>BITAND(a,b)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>return a &amp; b</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>BITOR(a,b)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns a | b</td></tr>
</table>

<p>&nbsp; </p>

<table x-use-null-cells width="100%" class="whs7">

<tr>
<th width="100%" class="whs8">
<p class=TitreTableau>STRING FUNCTIONS</th></tr>
</table>

<table x-use-null-cells width="100%" class="whs7">

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>ASCII(s)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns the ASCII code of the leftmost character 
 of s</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>CHAR(c)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns a character that has the ASCII code c</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>CONCAT(str1,str2)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns str1 + str2</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>DIFFERENCE(s1,s2)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns the difference between the sound of s1 and 
 s2</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>INSERT(s,start,len,s2)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns a string where len number of characters beginning 
 at start has been replaced by s2</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>LCASE(s)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>converts s to lower case</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>LEFT(s,count)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns the leftmost count of characters of s</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>LENGTH(s)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns the number of characters in s</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>LOCATE(search,s,[start])</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns the first index (1=left, 0=not found) where 
 search is found in s, starting at start</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>LTRIM(s)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>removes all leading blanks in s</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>REPEAT(s,count)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns s repeated count times</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>REPLACE(s,replace,s2)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>replaces all occurrences of replace in s with s2</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>RIGHT(s,count)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns the rightmost count of characters of s</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>RTRIM(s)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>removes all trailing blanks</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>SOUNDEX(s)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns a four character code representing the sound 
 of s</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>SPACE(count)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns a string consisting of count spaces</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>SUBSTRING(s,start[,len])</td>
<td width="90%" class="whs12">
<p class=TexteTableau>returns the substring starting at start (1=left) 
 with length len</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>UCASE(s)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>converts s to upper case</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>LOWER(s)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>converts s to lower case</td></tr>

<tr>
<td width="10%" class="whs11">
<p class=TexteTableau>UPPER(s)</td>
<td width="90%" class="whs12">
<p class=TexteTableau>converts s to upper case</td></tr>
</table>

<table x-use-null-cells width="100%" class="whs7">

<tr>
<th width="100%" class="whs8">
<p class=TitreTableau>DATE / TIME&nbsp; FUNCTIONS</th></tr>
</table>

<table x-use-null-cells width="100%" class="whs7">

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>CURDATE()</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the current date</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>CURTIME()</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the current time</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>DAYNAME(date)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the name of the day</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>DAYOFMONTH(date)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the day of the month (1-31)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>DAYOFWEEK(date)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the day of the week (1 means Sunday)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>DAYOFYEAR(date)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the day of the year (1-366)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>HOUR(time)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>return the hour (0-23)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>MINUTE(time)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the minute (0-59)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>MONTH(date)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the month (1-12)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>MONTHNAME(date)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the name of the month</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>NOW()</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the current date and time as a timestamp</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>QUARTER(date)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the quarter (1-4)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>SECOND(time)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the second (0-59)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>WEEK(date)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the week of this year (1-53)</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>YEAR(date)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>returns the year</td></tr>
</table>

<p>&nbsp;</p>

<table x-use-null-cells width="100%" class="whs7">

<tr>
<th width="100%" class="whs8">
<p class=TitreTableau>SYSTEM FUNCTIONS</th></tr>
</table>

<table x-use-null-cells width="100%" class="whs7">

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>IFNULL(exp,value)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>if exp is null, value is returned else exp</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>CASEWHEN(exp,v2,v2)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>if exp is true, v1 is returned, else v2</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>CONVERT(term,type)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>converts exp to another data type</td></tr>

<tr>
<td width="16%" class="whs9">
<p class=TexteTableau>CAST(term AS type)</td>
<td width="84%" class="whs10">
<p class=TexteTableau>converts exp to another data type</td></tr>
</table>

&nbsp; 

<p class=Remarque><span class=RemarqueTitre>Note</span>: A 'date' value 
 starts and ends with ', the format is yyyy-mm-dd (see java.sql.Date).&nbsp; 
 A 'time' value starts and ends with ', the format is hh:mm:ss (see java.sql.Time).&nbsp;</p>

</body>
</html>
