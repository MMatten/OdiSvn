<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>How does it work?</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="common_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='common.css'>");}
//-->
</script>
<style type="text/css">
<!--
ol.whs1 { list-style:decimal; }
ul.whs2 { list-style:disc; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='../wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("Oracle Data Integrator Driver for XML\nHow does it work?");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("../index.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h1><a name=TOP></a>How does it work?</h1>

<p>The OracleDI Driver for XML works in the following way:</p>

<ol type="1" class="whs1">
	
	<li class=kadov-p><p>The driver loads (upon connection or user request) 
 &nbsp;the XML 
 structure and data into a relational <span style="font-weight: bold;"><B>schema</B></span>, 
 using a <span style="font-weight: bold;"><B>XML to SQL mapping</B></span>.</p></li>
	
	<li class=kadov-p><p>The user works on the relational <span style="font-weight: bold;"><B>schema</B></span>, 
 manipulating data through regular <span style="font-weight: bold;"><B>SQL</B></span> 
 statements or specific <span class=ElementGUI>Driver Commands</span> for 
 driver operations.</p></li>
	
	<li class=kadov-p><p>Upon disconnection or user request, the XML driver 
 is able to synchronize the data and structure stored in the schema back 
 to the XML file.</p></li>
</ol>

<h2><a name=XML_TO_SQL></a>XML to SQL Mapping</h2>

<p>The XML to SQL Mapping is a complex process that is used to map a hierarchical 
 structure (XML) into a relational structure (schema). <span style="font-weight: bold; x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><U><B><br>
This mapping is automatic.</B></U></span></p>

<p>OracleDI Driver for XML maps XML elements and attributes, most of the 
 time in a straightforward way, that is:</p>

<ul type="disc" class="whs2">
	
	<li class=kadov-p><p><span class=ElementGUI>Elements</span> are mapped 
 as <span class=ElementGUI>tables </span>with the same name.</p></li>
	
	<li class=kadov-p><p><span class=ElementGUI>Attributes</span> are mapped 
 as <span class=ElementGUI>columns</span> named like the attributes. Each 
 column is created in the table representing the attribute's element.</p></li>
</ul>

<p>Extra data may appear in the relational structure, following the rules 
 below:</p>

<ul type="disc" class="whs2">
	
	<li class=kadov-p><p>In order to map the hierarchy of XML tags, or 
 a one-to-many relation between elements, the XML driver generates:</p></li>
	
	<ul type="disc" class="whs2">
		
		<li class=kadov-p><p>a <span class=Code
									style="font-weight: bold;"><B>&lt;parent_tag_name&gt;PK</B></span> 
 columns in the table representing the parent element.</p></li>
		
		<li class=kadov-p><p>a <span class=Code
									style="font-weight: bold;"><B>&lt;parent_tag_name&gt;FK</B></span> 
 column in the table representing the child element, containing values 
 corresponding to the PK values of the parent tag records.</p></li>
	</ul>
	
	<li class=kadov-p><p>Records in a table, unlike lines in an XML file, 
 are not ordered, unless a specific row is used to define the order.<br>
	The driver generates columns called <span class=Code
												style="font-weight: bold;"><B>&lt;tag_name&gt;ORDER</B></span> 
 to store and restitute XML data with a proper order. If adding new rows 
 in a table of the XML schema, make sure that the ORDER column is correctly 
 set to have the elements correctly ordered under the parent element.</p></li>
</ul>

<p>Some specific situations are exceptions to the rules above:</p>

<ul type="disc" class="whs2">
	
	<li class=kadov-p><p>Elements containing only <span class=Code>#PCDATA</span> 
 are not mapped as tables, but as columns of the table representing their 
 &nbsp;parent 
 element. These columns are named <span class=Code
										style="font-weight: bold;"><B>&lt;tag_name&gt;DATA</B></span>.</p></li>
	
	<li class=kadov-p><p>List Attributes are mapped as a new table with 
 a link (PK, FK) to the table representing the element containing the list</p></li>
</ul>

<p>This extra data is used to keep the XML file consistency. These records 
 must be loaded when loading data that will be written to an XML file.</p>

<p><a href="#TOP">Back to Top</a></p>

<h2><a name=NAMESPACES></a>XML Namespaces</h2>

<p>The OracleDI Driver for XML supports XML namespaces (&quot;<span class=Code>xmlns:</span>&quot;) 
 specified for XML attributes and elements. </p>

<p>Elements or attributes specified with a namespace (using the <span class=Code>&lt;namespace&gt;:&lt;element 
 or attribute name&gt;</span> syntax) are mapped as tables or columns prefixed 
 with the namespace using the syntax : <span class=Code>&lt;namespace&gt;_&lt;element 
 or attribute name&gt;</span>. When synchronizing the XML data back to 
 the file, the namespace information is automatically generated.</p>

<p><a href="how_does_it_work.htm#TOP">Back to Top</a></p>

<h2><a name=MANAGING_SCHEMA></a>Managing Schemas</h2>

<p>Each schema corresponds to one and only one XML File, and one XML file 
 corresponds to one description file (DTD or XSD).</p>

<h4>Schema Storage</h4>

<p>The schema may be stored either in a <span style="font-weight: bold;"><B>built-in 
 engine</B></span>, or in an <span style="font-weight: bold;"><B>external database</B></span>. 
 </p>

<ul type="disc" class="whs2">
	
	<li class=kadov-p><p>The <span style="font-weight: bold;"><B>Built-in 
 Engine</B></span> requires no other component to run. The XML schema is stored 
 in memory within the driver. The SQL commands and functions available 
 on this driver are detailed in the <a href="sql_syntax.htm">SQL Syntax</a>.</p></li>
	
	<li class=kadov-p><p>The <span style="font-weight: bold;"><B>External 
 Database</B></span> may be any relational database management system. The 
 driver connects through JDBC to this engine, and uses it to store the 
 schema.<br>
	This enables:</p></li>
	
	<ul type="disc" class="whs2">
		
		<li class=kadov-p><p>Use of the processing and storage power of 
 the RDBMS engine</p></li>
		
		<li class=kadov-p><p>Use of the statements and functions of the 
 RDBMS</p></li>
		
		<li class=kadov-p><p>Persistence of schema storage</p></li>
	</ul>
</ul>

<h4>Multiple schemas</h4>

<p>It is possible, within the same JDBC connection to the OracleDI Driver 
 for XML, to handle multiple schemas and load multiple XML files simultaneously. 
 It is possible to CREATE, TRUNCATE, SET, LOAD FILE INTO schemas, and more. 
 When connecting to the JDBC driver, you connect to the schema specified 
 usually on the URL. It is possible to move the current schema to another 
 one using the SET SCHEMA command (See <a href="driver_commands.htm">Detailed 
 Driver Commands</a> for more information). </p>

<p>A specific schema called the <span class=ElementGUI>default schema</span> 
 exists and is used for storing temporary data. This default schema cannot 
 be associated with an XML file.</p>

<p>It is also possible to automatically create additional schemas with 
 different XML structures when creating the connection with the driver. 
 See <a HREF="driver_configuration.htm">Driver Configuration</a> for more 
 information.</p>

<h4>Accessing data in the schemas</h4>

<p>Data or data structures within the schemas are handled through standard 
 SQL Changes on data in the schema are written in the XML file upon synchronization.</p>

<p>It is possible to access tables from a schema different from the current 
 one by prefixing the table name with the schema name, followed by a point. 
 The other schema must be located on the same storage space - built-in 
 engine or external database - as than the current schema. <br>
Example: <span class=Code>select col1, schema2.table2.col2, table1.col3 
 from table1, schema2.table2</span>.<br>
This query returns data from <span class=Code>table1</span> in the current 
 schema, and from <span class=Code>table2</span> from <span class=Code>schema2.</span></p>

<h4>Case sensitivity</h4>

<p>A schema cannot be case-sensitive. All elements in the schema (tables 
 and columns) are in UPPERCASE. If the XML file element names contain lowercase 
 letters, they are converted to upper case. When the elements are synchronized 
 to the XML file, their names are created with their original case.</p>

<h4>Loading/Synchronizing</h4>

<p>A Schema is usually automatically created when connecting to a XML file, 
 and loaded with the data contained in the XML file. It is also possible 
 to force schema creation and data loading in the schema using <a href="driver_commands.htm">Driver 
 Specific Commands</a>. It is also possible to force a synchronization 
 process of the data by using the <a href="driver_commands.htm#SYNCHRONIZE">SYNCHRONIZE</a> 
 command.</p>

<p><a href="how_does_it_work.htm#TOP">Back to Top</a></p>

<h2><a name=LOCKING></a>Locking</h2>

<p>When accessing an XML file, the driver <span class=ElementGUI>locks</span> 
 it in order to prevent other instances of the driver to connect to the 
 file. The lock appears as a file called with the same name as the XML 
 file but with the <span class=Code>.lck</span> extension. </p>

<p>If the driver is incorrectly disconnected, a lock may remain on the 
 file. To remove it, delete the <span class=Code>.lck</span> file. It is 
 also possible to unlock an XML file with the UNLOCK FILE command.</p>

<p><a href="how_does_it_work.htm#TOP">Back to Top</a></p>

<h2><a name=LOCKING1></a>XML Schema (XSD) Support </h2>

<p>XSD is supported in OracleDI Driver for XML for describing XML file 
 structures. See <a HREF="xsd_support.htm">XML Schema Supported Features</a> 
 for more information.</p>

<p>In addition, OracleDI Driver for XML supports document validation against 
 XSD schemas specified within the XML file. This operation may be performed:</p>

<ul type="disc" class="whs2">
	
	<li class=kadov-p><p>from an OS command using the built-in validation 
 tool,</p></li>
	
	<li class=kadov-p><p>using the <span class=Code>ValidateXMLFile</span> 
 class in a Java program,</p></li>
	
	<li class=kadov-p><p>using the <span class=Code>VALIDATE</span> driver 
 specific command.</p></li>
</ul>

<p>See the <a href="driver_commands.htm#VALIDATE">VALIDATE</a> command 
 syntax for more information.</p>

<p><a href="how_does_it_work.htm#TOP">Back to Top</a> | <a HREF="../readme.htm">Back 
 to Readme</a></p>

</body>
</html>
