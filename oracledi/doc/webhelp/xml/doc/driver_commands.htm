<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>Detailed Driver Commands</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="common_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='common.css'>");}
//-->
</script>
<style>
<!--
code {  }
-->
</style><style type="text/css">
<!--
ul.whs1 { list-style:disc; }
p.whs2 { font-weight:normal; }
p.whs3 { margin-left:40px; color:#008080; }
p.whs4 { margin-left:40px; color:#008000; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='../wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("Oracle Data Integrator Driver for XML\nDetailed Driver Commands");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("../index.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h1>Detailed Driver Commands </h1>

<p>The following statements are <span style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><U>specific 
 and proprietary &nbsp;to 
 the OracleDI Driver for XML</U></span>, and allow to manage XML files and 
 schemas. They can be launched as standard SQL statements on the JDBC connection 
 to the XML driver.</p>

<p>To manipulate the data stored in the schemas, you may use standard SQL 
 syntax. This syntax is either the built-in engine's <a HREF="sql_syntax.htm">SQL 
 Syntax</a>, or the SQL Syntax of the <span class=ElementGUI>External Database</span> 
 engine you use.</p>

<h2>Conventions</h2>

<p>The following conventions are used within this document:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span class=Code>[ A ]</span> means A is optional&nbsp;</p></li>
	
	<li class=kadov-p><p><span class=Code>[ A | B ]</span> means A or B 
 but the parameter is optional.</p></li>
	
	<li class=kadov-p><p><span class=Code>{ B | C }</span> means B or C 
 must be used.</p></li>
	
	<li class=kadov-p><p><span class=Code>[A] [B]</span> means a set of 
 arguments that are not ordered.</p></li>
	
	<li class=kadov-p><p><span class=Code>(</span> and<span class=Code> 
 )</span> are the characters '(' and ')'.&nbsp;</p></li>
	
	<li class=kadov-p><p>keywords are in <span class=Code>UPPERCASE</span></p></li>
</ul>

<h2>Driver Specific Commands</h2>

<h3><a name=CREATEFILE>CREATE FILE</a></h3>

<p><span class=Code>CREATE [EMPTY] FILE &lt;file_name&gt; [FROM SCHEMA 
 &lt;schema_name&gt;] [ROOTTABLE &lt;table_name&gt;] [JAVA_ENCODING &lt;java_encoding&gt; 
 XML_ENCODING &lt;xml_encoding&gt;] [NO_CLOSING_TAGS] [NO_DEFAULT_NS]</span></p>

<p>Generate an XML file called <span class=Code>&lt;file_name&gt; </span>from 
 the default schema data, or from a specific schema.</p>

<p>If the <span class=Code>EMPTY</span> option is specified, an empty file 
 with the XML structure specified in the DTD or XSD is generated.</p>

<h4>Parameters</h4>

<p><span class=Code>FROM SCHEMA</span></p>

<p>Specify the schema in which data will be written in the XML file.</p>

<p><span class=Code>ROOTTABLE</span></p>

<p>Specify the root table of the schema. </p>

<p class=Remarque><span class=ElementGUI>Note</span>: This parameter is 
 deprecated, and should not be used.</p>

<p><span class=Code>JAVA_ENCODING</span></p>

<p>Encoding of the generated File.</p>

<p><span class=Code>XML_ENCODING</span></p>

<p>Encoding generated in the file's xml tag. Example of generated tag:<span 
 class=Code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;</span><span 
 class=Code
	style="font-weight: bold;"><B>ISO-8859-1</B></span><span class=Code>&quot;?&gt;</span></p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: Java and XML encoding 
 should always be specified together.</p>

<p><span class=Code>NO_CLOSING_TAG</span></p>

<p>If this parameter is specified, the driver generates the empty tags 
 with closing tag. By default, the driver generates an empty element as 
 &lt;element&gt;&lt;/element&gt;. with the <span class=Code>no_closing_tags</span> 
 parameter, it generates &lt;element/&gt;.</p>

<p><span class=Code>NO_DEFAULT_NS</span></p>

<p>If this parameter is specified, the driver generates the target file 
 without a default namespace entry.</p>

<h4>Remarks</h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>If the file name contains spaces, enclose it in 
 double quotes</p></li>
	
	<li class=kadov-p><p>The encoding values should be enclosed in double 
 quotes as they may contain special characters.</p></li>
</ul>

<h3><a name=CREATEFILE1>CREATE XMLFILE</a></h3>

<p><span class=Code>CREATE XMLFILE &lt;file_name&gt; [FROM SCHEMA &lt;schema_name&gt;] 
 [ROOTTABLE &lt;table_name&gt;] [JAVA_ENCODING &lt;java_encoding&gt; XML_ENCODING 
 &lt;xml_encoding&gt;] [NO_CLOSING_TAGS]</span></p>

<p>Generate an XML file called <span class=Code>&lt;file_name&gt; </span>from 
 the default schema data, or from a specific schema.</p>

<h4>Parameters</h4>

<p><span class=Code>FROM SCHEMA</span></p>

<p>Specify the schema in which data will be written in the XML file.</p>

<p><span class=Code>ROOTTABLE</span></p>

<p>Specify the root table of the schema.</p>

<p class=Remarque><span class=ElementGUI>Note</span>: This parameter is 
 deprecated, and should not be used.</p>

<p><span class=Code>JAVA_ENCODING</span></p>

<p>Encoding of the generated File.</p>

<p><span class=Code>XML_ENCODING</span></p>

<p>Encoding generated in the file's xml tag. Example of generated tag:<span 
 class=Code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;</span><span 
 class=Code
	style="font-weight: bold;"><B>ISO-8859-1</B></span><span class=Code>&quot;?&gt;.</span></p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: Java and XML encoding 
 should always be specified together.</p>

<p><span class=Code>NO_CLOSING_TAG</span></p>

<p>If this parameter is specified, the driver generates the empty tags 
 with closing tag. By default, the driver generates an empty element as 
 &lt;element&gt;&lt;/element&gt;. with the <span class=Code>no_closing_tags</span> 
 parameter, it generates &lt;element/&gt;.</p>

<p><span class=Code>NO_DEFAULT_NS</span></p>

<p>If this parameter is specified, the driver generates the target file 
 without a default namespace entry.</p>

<h4>Remarks</h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>If the file name contains spaces, enclose it in 
 double quotes</p></li>
	
	<li class=kadov-p><p>The encoding values should be enclosed in double 
 quotes as they may contain special characters.</p></li>
</ul>

<h3><a name=CREATEFOREIGNKEYS>CREATE FOREIGNKEYS</a></h3>

<p><span class=Code>CREATE FOREIGNKEYS </span></p>

<p>Create physically all the foreign keys joining the tables from the relational 
 schema in the database. This command is helpful to enforce integrity constraints 
 on the schema. </p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: When requested, 
 the driver always returns &quot;virtual&quot; foreign keys, corresponding 
 to the relational structure mapping. It does not return the real foreign 
 keys enforced at database level.</p>

<h4>Remarks</h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>After using CREATE FOREIGNKEYS, it is not possible 
 any longer to perform a LOAD FILE.</p></li>
</ul>

<h3><a name=CREATESCHEMA>CREATE SCHEMA</a></h3>

<p><span class=Code>CREATE SCHEMA &lt;schema_name&gt; [WITH DTD &lt;dtd/xsd_name&gt;] 
 [REPLACE] [ROOTTABLE &lt;table_name&gt;] [ROOTELT &lt;root element&gt;] 
 [READONLY] [JAVA_ENCODING &lt;java_encoding&gt; XML_ENCODING &lt;xml_encoding&gt;]</span></p>

<p>Create in <span class=Code>&lt;schema_name&gt; </span>an empty schema 
 or a schema with tables mapping the structure of the description file 
 specified as <span class=Code>&lt;dtd/xsd_name&gt;</span>.</p>

<h4>Parameters</h4>

<p><span class=Code>WITH DTD</span></p>

<p>Specify the description file (DTD or XSD) which structure will be created 
 in the schema.</p>

<p><span class=Code>REPLACE</span></p>

<p>Specify if an existing schema structure must be replaced with the new 
 one.</p>

<p><span class=Code>ROOTTABLE</span></p>

<p>Specify the root table of the schema.</p>

<p><span class=Code>ROOTELT</span></p>

<p>Element in the description file considered as the root of the XML file. 
 This element name is case sensitive.</p>

<p class=Remarque><span class=ElementGUI>Note</span>: This parameter is 
 deprecated, and should not be used.</p>

<p><span class=Code>READONLY</span></p>

<p>The schema loaded cannot have data inserted, deleted or updated.</p>

<p><span class=Code>JAVA_ENCODING</span></p>

<p>Encoding of the target XML file(s) generated from schema.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: Java and XML encoding 
 should always be specified together.</p>

<p><span class=Code>XML_ENCODING</span></p>

<p>Encoding generated in the target files' XML tag. Example of generated 
 tag:<span class=Code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;</span><span 
 class=Code
	style="font-weight: bold;"><B>ISO-8859-1</B></span><span class=Code>&quot;?&gt;.</span></p>

<h4>Remarks</h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>The XML file&nbsp;data is not loaded. This command 
 is similar to LOAD FILE but does not load the XML file data.</p></li>
	
	<li class=kadov-p><p>The schema is created in READONLY mode since no 
 XML file is associated with it.</p></li>
	
	<li class=kadov-p><p>The connection schema does not automatically switch 
 to the newly created schema.</p></li>
	
	<li class=kadov-p><p>If the file name contains spaces, enclose the 
 name id double quotes.</p></li>
	
	<li class=kadov-p><p>The encoding values should be enclosed in double 
 quotes as they may contain special characters.</p></li>
</ul>

<h3><a name=DROPFOREIGNKEYS>DROP FOREIGNKEYS</a></h3>

<p><span class=Code>DROP FOREIGNKEYS </span></p>

<p>Drop all the foreign keys on the tables of the relational schema in 
 the database. This command is helpful to drop all integrity constraints 
 on the schema.</p>

<h3><a name=DROPSCHEMA>DROP SCHEMA</a></h3>

<p><span class=Code>DROP SCHEMA [&lt;schema_name&gt;]</span></p>

<p>Drop an existing schema. If <span class=Code>&lt;schema_name&gt;</span> 
 is not specified, the current schema is dropped. It is not possible to 
 drop a schema if there are pending connections to this schema. Trying 
 to drop a schema with existing connections causes an exception.</p>

<h3><a name=LOADFILE>LOAD FILE</a> </h3>

<p><span class=Code>LOAD FILE &lt;file_name&gt; [WITH DTD &lt;dtd/xsd_name&gt; 
 | INSERT_ONLY] [ON SCHEMA &lt;schema_name&gt;] [REPLACE] [READONLY] [ROOTTABLE 
 &lt;table_name&gt;] [ROOTELT &lt;root element&gt;] [AUTO_UNLOCK] [DB_PROPS 
 &lt;external database properties&gt;]</span></p>

<p>Load the <span class=Code>&lt;file_name&gt;</span> XML file into the 
 current relational schema.</p>

<h4>Parameters</h4>

<p><span class=Code>WITH DTD</span></p>

<p>Specify the description file (DTD or XSD) which structure will be created 
 in the schema.</p>

<p><span class=Code>INSERT ONLY</span></p>

<p>Adds the data from the XML file in the schema if it already exists. 
 The new XML file should have valid description file for the existing schema.</p>

<p><span class=Code>ON SCHEMA</span></p>

<p>Force the file to be loaded in <span class=Code>&lt;schema_name&gt;</span>. 
 Note that the current schema is not set after the command automatically 
 to <span class=Code>&lt;schema_name&gt;.</span></p>

<p><span class=Code>REPLACE</span></p>

<p>Specify if an existing schema structure with the same name must be replaced 
 with the one that is being loaded.</p>

<p><span class=Code>READONLY</span></p>

<p>The schema loaded cannot have data inserted, deleted or updated.</p>

<p><span class=Code>ROOTTABLE</span></p>

<p>Specify the root table of the schema. This parameter is not necessary 
 if loading an XML file.</p>

<p><span class=Code>ROOTELT</span></p>

<p>Element in the description file considered as the root of the XML file. 
 This element name is case sensitive.</p>

<p class=Remarque><span class=ElementGUI>Note</span>: This parameter is 
 deprecated, and should not be used.</p>

<p><span class=Code>AUTO_UNLOCK</span></p>

<p>If the XML file is already locked by another driver instance, an exception 
 occurs unless the AUTO_UNLOCK is specified. This parameter unlocks automatically 
 the file if it is locked.</p>

<p><span class=Code>DB_PROPS</span></p>

<p>Loads the file in the external database identified by the properties 
 file called <span class=Code>&lt;external database properties&gt;.properties</span>.</p>

<h4>Remarks</h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>If the file name contains spaces, enclose the 
 name in double quotes.</p></li>
	
	<li class=kadov-p><p>When no schema is specified, the driver automatically 
 generates a schema name from the file name.</p></li>
	
	<li class=kadov-p><p>The connection schema does not automatically switch 
 to the loaded schema.</p></li>
	
	<li class=kadov-p><p>If the XML file is already open in another schema, 
 an exception occurs.</p></li>
</ul>

<h3><a name=SETSCHEMA>SET SCHEMA</a> </h3>

<p><span class=Code>SET SCHEMA &lt;schema_name&gt;</span> </p>

<p>Set the current schema to <span class=Code>&lt;schema_name&gt;</span>.</p>

<h4>Remarks</h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>If no <span class=Code>&lt;schema_name&gt;</span> 
 is specified, the schema is set to the default schema. </p></li>
</ul>

<h3><a name=SYNCHRONIZE>SYNCHRONIZE</a> </h3>

<p><span class=Code>SYNCHRONIZE [ALL | SCHEMA &lt;schema_name&gt;] [FROM 
 FILE/FROM DATABASE] [IGNORE&nbsp;CONFLICTS]</span></p>

<p>Synchronize data in the schema with the file data.</p>

<h4>Parameters</h4>

<p><span class=Code>ALL</span></p>

<p>Synchronizes all schemas</p>

<p><span class=Code>SCHEMA</span></p>

<p>Synchronizes only <span class=Code>&lt;schema_name&gt;</span></p>

<p><span class=Code>FROM FILE</span></p>

<p>Forces the data to be loaded from the file to the schema. Erases all 
 changes in the schema.</p>

<p><span class=Code>FROM DATABASE</span></p>

<p>Forces the data to be loaded from the schema to the file. Erases all 
 changes in the file.</p>

<p><span class=Code>IGNORE CONFLICTS</span></p>

<p>If FROM FILE/DATABASE are not specified, the driver automatically determines 
 where data have been modified (in the FILE or DATABASE) and updates the 
 unmodified data. If both the FILE and the DATABASE have been modified, 
 the driver issues a Conflict Error. if the IGNORE CONFLICTS parameter 
 is used, no error is issued, and if performing a SYNCHRONIZE ALL, the 
 following schemas will be synchronized.</p>

<p class=Remarque><span class=AlertTitre>Warning</span>: A schema is marked 
 updated only when a data modification (update, delete, insert, drop) is 
 executed in a connection to that schema. It is not marked as updated, 
 when the order is launched from a connection to another schema.&nbsp;</p>

<h3><a name=UNLOCKFILE>UNLOCK FILE</a></h3>

<p><span class=Code>UNLOCK FILE &lt;file_name&gt;</span></p>

<p>Unlocks &lt;file_name&gt; if it is locked by another instance of the 
 driver.</p>

<h3><a name=TRUNCATESCHEMA>TRUNCATE SCHEMA</a></h3>

<p><span class=Code>TRUNCATE SCHEMA [&lt;schema_name&gt;]</span></p>

<p>Clears all data from the current schema, or from <span class=Code>&lt;schema_name&gt;</span>.</p>

<h3><a name=VALIDATE>VALIDATE</a> </h3>

<p><span class=Code>VALIDATE [FILE &lt;file_name&gt;] [ERROR_ON_WARNING|</span><span 
 class=Code
	style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><U>IGNORE_ON_WARNING</U></span><span 
 class=Code>] [</span><span class=Code
							style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><U>ERROR_ON_ERROR</U></span><span 
 class=Code>|IGNORE_ON_ERROR] [</span><span class=Code
											style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><U>ERROR_ON_FATAL_ERROR</U></span><span 
 class=Code>|IGNORE_ON_FATAL_ERROR] [VERBOSE]</span></p>

<p>Validates the XML file <span class=Code>&lt;file_name&gt;</span> against 
 the XSD schemas specified within the file. This command returns an exception 
 if the file is not valid.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: The driver use 
 the XML parser specified in the java classpath to perform the validation. 
 Consequently, a parser supporting validation is required. Make sure to 
 have the Crimson parser (crimson.jar) and remove the Xerces parser (xerces.jar) 
 from the classpath.</p>

<h4>Parameters</h4>

<p><span class=Code>FILE &lt;file_name&gt;</span></p>

<p>Name of the XML file to validate.</p>

<p><span class=Code>ERROR_ON_WARNING|</span><span class=Code
													style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><U>IGNORE_ON_WARNING</U></span></p>

<p>Ignore or generate errors on XSD validation warnings, such as values 
 out of range. The default value is <span class=Code>IGNORE_ON_WARNING.</span></p>

<p><span class=Code
		style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><U>ERROR_ON_ERROR</U></span><span 
 class=Code>|IGNORE_ON_ERROR</span></p>

<p>Ignore or generate errors on XSD validation errors, such as non conform 
 attribute or element. The default value is <span class=Code>ERROR_ON_ERROR.</span></p>

<p><span class=Code
		style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><U>ERROR_ON_FATAL_ERROR</U></span><span 
 class=Code>|IGNORE_ON_FATAL_ERROR</span></p>

<p>Ignore or generate errors on XSD validation fatal errors, such as malformed 
 XML. The default value is <span class=Code>ERROR_ON_FATAL_ERROR.</span></p>

<p><span class=Code>VERBOSE</span></p>

<p>Displays on the Java console the detailed errors and number of the line 
 causing the error. Nothing is displayed by default on the console.</p>

<h4>Other validation methods</h4>

<p>It is also possible to validate an XML file using the built-in XSD validation 
 tool or the specific <span class=Code>ValidateXMLFile</span> Java class.</p>

<h5>XML validation tool</h5>

<p>This XSD validation tool can be called from the command line using the 
 following command:</p>

<p class="whs2"><span class=Code>java -classpath .;snpsxmlo.jar;xerces.jar 
 ValidateXMLFile &lt;XML File Name&gt;</span></p>

<p>This command line call is equivalent to a call to the <span class=Code>VALIDATE</span> 
 command with the default values. It returns an exception if the file is 
 not valid.</p>

<h5>XML validation Java class</h5>

<p>The XML driver includes a Java class which can be used in your programs 
 to validate XML files. The following a java sample explains how to use 
 this class:</p>

<p>&nbsp;</p>

<p class="whs3"><span class=Code
													style="color: #008080;"><font color=teal >// 
 XSD Validation sample</font></span></p>

<p class="whs3"><span class=Code
													style="color: #008080;"><font color=teal >// 
 Create an instance of the ValidateXMLFile class.</font></span></p>

<p class="whs3"><span class=Code
													style="color: #008080;"><font color=teal >// 
 The boolean parameters of the constructor correspond to the four parameters 
 of the VALIDATE driver command.</font></span></p>

<p class="whs4"><span class=Code
													style="font-weight: bold;"><B>ValidateXMLFile</B></span><span 
 class=Code> val = </span><span class=Code
								style="font-weight: bold;"><B>com.sunopsis.xsd.validation.ValidateXMLFile</B></span><span 
 class=Code>(</span><span class=Code
							style="color: #0000ff;"><font color=blue >true</font></span><span class=Code>, 
 </span><span class=Code
				style="color: #0000ff;"><font color=blue >true</font></span><span class=Code>, </span><span 
 class=Code
	style="color: #0000ff;"><font color=blue >true</font></span><span class=Code>, </span><span 
 class=Code
	style="color: #0000ff;"><font color=blue >true</font></span><span class=Code>);</span></p>

<p class="whs4">&nbsp;</p>

<p class="whs3"><span class=Code
													style="color: #008080;"><font color=teal >// 
 The following method checks an XML file, and returns an exception if it 
 is not valid.</font></span></p>

<p class="whs4"><span class=Code><font color=green >val.</font></span><span 
 class=Code
	style="font-weight: bold;"><B>validateXMLFile</B></span><span class=Code>(&quot;</span><span 
 class=Code
	style="color: #0000ff;"><font color=blue >to_validate.xml</font></span><span class=Code>&quot;);</span></p>

</body>
</html>
