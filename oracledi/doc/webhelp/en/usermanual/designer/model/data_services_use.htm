<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>Setting Up Data Services</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="../../../include/common_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='../../../include/common.css'>");}
//-->
</script>
<style type="text/css">
<!--
ol.whs1 { list-style:decimal; }
ul.whs2 { list-style:disc; }
p.whs3 { margin-left:40px; }
p.whs4 { margin-left:40px; color:#c0c0c0; }
p.whs5 { margin-left:80px; }
p.whs6 { margin-left:120px; }
p.whs7 { margin-left:120px; color:#c0c0c0; }
p.whs8 { font-style:normal; }
ul.whs9 { list-style:decimal; }
th.whs10 { x-cell-content-align:top; }
td.whs11 { x-cell-content-align:top; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="../../../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="../../../whutils.js"></script>
<script type="text/javascript" language="javascript" src="../../../whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='../../../wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("User's Guide\nDesigner\nModels\nSetting Up Data Services");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("../../../index.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h1>Setting Up Data Services</h1>

<p>Data Services are specialized Web Services that provide access to data 
 in datastores, and to captured changes in these datastores. These Web 
 Services are automatically generated by Oracle Data Integrator and deployed 
 to a Web Services container - normally a Java application server.</p>

<p>In the examples below, <a title="Apache Tomcat website"
							href="http://tomcat.apache.org/"
							target=_blank>Apache Tomcat 5.5</a> or <a title="OC4J Documentation"
	href="http://www.oracle.com/technology/tech/java/oc4j/1013/how_to/index.html">Oracle 
 Container for Java (OC4J)</a> are used as the application server, with 
 <a title="Apache Axis2 website"
	href="http://ws.apache.org/axis2/index.html"
	target=_blank>Apache Axis2</a> as the Web Services container. These 
 examples may need to be adapted if using other Web Services containers.</p>

<p>Setting up Data Services involves the following stages :</p>

<ol type="1" class="whs1">
	
	<li class=kadov-p><p><a href="#conteneur_configuration">Setting up 
 datastores</a> in a Web Services container.</p></li>
	
	<li class=kadov-p><p><a href="#topology_configuration">Configuring 
 the topology </a>to declare the Web Services container.</p></li>
	
	<li class=kadov-p><p><a href="#model_configuration">Setting up the 
 model</a>, to declare datastores and columns for Data Services.</p></li>
	
	<li class=kadov-p><p><a href="#data_service_generation">Generating, 
 deploying and testing Data Services</a></p></li>
</ol>

<h2><a name=conteneur_configuration></a>Setting up datasources</h2>

<p>Before getting started, you should already have configured your Web 
 Services container and the application server. Refer to the respective 
 documentation for these components for details.</p>

<p>The Data Services generated by Oracle Data Integrator do not contain 
 connection information for sources and targets. Instead, they make use 
 of datasources defined within the Web Services container or on the application 
 server. These datasources contain connection properties required to access 
 data, and must correspond to data servers already defined within the Oracle 
 Data Integrator topology.</p>

<p>In addition, all necessary drivers for the specified datasources must 
 be installed on the application server.</p>

<p class=HowTo>To set up a datasource:</p>

<ol type="1" class="whs1">
	
	<li class=kadov-p><p>Install the driver files (.jar or .zip) for your 
 datasource in the appropriate directory for your application server. Use 
 <span class=Code>/common/lib</span> for Tomcat. Use <span class=Code>ORACLE_HOME/j2ee/home/applib</span> 
 for OC4J.</p></li>
	
	<li class=kadov-p><p>Create the JDBC Datasource pointing to the data 
 server you want to access:</p></li>
	
	<ul type="disc" class="whs2">
		
		<li class=kadov-p><p>For Tomcat, Define the datasource and connection 
 properties for your data in the file <span class=Code>WEB-INF/context.xml</span> 
 on your Web Services container. Note the name of the resource (marked 
 in <span style="color: #008000;"><font color=green >green</font></span> below), as you will need 
 it later. Some connection properties can be found in the topology; these 
 are marked in <span style="color: #0000ff; font-weight: bold;"><font color=blue ><B>blue</B></font></span>. 
 <br>
		One example is given below.</p></li>
	</ul>
</ol>

<p class="whs3"><span class=Code>&lt;Context &gt; </span></p>

<p class="whs3"><span class=Code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Resource</span></p>

<p class="whs3"><span class=Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;</span><span 
 class=Code
	style="color: #008000;"><font color=green >jdbc/Oracle_SRV1/Oracle/dataServices</font></span><span 
 class=Code>&quot;</span></p>

<p class="whs3"><span class=Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type=&quot;javax.sql.DataSource&quot;</span></p>

<p class="whs3"><span class=Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;driverClassName=&quot;</span><span 
 class=Code
	style="color: #0000ff; font-weight: bold;"><font color=blue ><B>oracle.jdbc.OracleDriver</B></font></span><span 
 class=Code>&quot;</span></p>

<p class="whs3"><span class=Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url=&quot;</span><span 
 class=Code
	style="color: #0000ff; font-weight: bold;"><font color=blue ><B>jdbc:oracle:thin:@SRV1:1521:ORA10</B></font></span><span 
 class=Code>&quot;</span></p>

<p class="whs3"><span class=Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;username=&quot;</span><span 
 class=Code
	style="color: #0000ff; font-weight: bold;"><font color=blue ><B>ODI</B></font></span><span class=Code>&quot;</span></p>

<p class="whs3"><span class=Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;password=&quot;</span><span 
 class=Code
	style="color: #0000ff; font-weight: bold;"><font color=blue ><B>ODI</B></font></span><span class=Code>&quot;</span></p>

<p class="whs4"><span class=Code
													style="color: #c0c0c0;"><font color=silver >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxIdle=&quot;2&quot;</font></span></p>

<p class="whs4"><span class=Code
													style="color: #c0c0c0;"><font color=silver >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxWait=&quot;-1&quot;</font></span></p>

<p class="whs3"><span class=Code
									style="color: #c0c0c0;"><font color=silver >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxActive=&quot;4&quot;</font></span><span 
 class=Code>/&gt;</span><span class=Code
								style="margin-left: 40px;"> </span></p>

<p class="whs3"><span class=Code>&lt;/Context&gt;</span></p>

<ol start="3" type="1" class="whs1">
	
	<ul type="disc" class="whs2">
		
		<li class=kadov-p><p>For OC4J, you must define the datasource as 
 follows:</p></li>
		
		<ol type="1" class="whs1">
			
			<li class=kadov-p><p>Connect to OC4J administration interface.</p></li>
			
			<li class=kadov-p><p>In the <span class=ElementGUI>Administration</span> 
 tab, in <span class=ElementGUI>Services | JDBC Resources</span> click 
 <span class=ElementGUI>Go to task</span><span style="font-weight: bold;"><B>.</B></span></p></li>
			
			<li class=kadov-p><p>Click the <span style="font-weight: bold;"><B>Create 
 </B></span>button in the<span class=ElementGUI> Connection Pools</span> section<span 
 style="font-weight: bold;"><B>.</B></span></p></li>
			
			<li class=kadov-p><p>Select the Axis2 application, select <b>New 
 Connection Pool</b> , then <b>Continue.</b></p></li>
			
			<li class=kadov-p><p>Fill in the fields for the JDBC datasource 
 then click <span class=ElementGUI>Finish</span>.</p></li>
			
			<li class=kadov-p><p>Click the <span style="font-weight: bold;"><B>Create 
 </B></span>button in the<span class=ElementGUI> Data Sources</span> section<span 
 style="font-weight: bold;"><B>.</B></span></p></li>
			
			<li class=kadov-p><p>Select the Axis2 application, select <span 
 class=ElementGUI>Managed Datasource</span> , then <b>Continue.</b></p></li>
			
			<li class=kadov-p><p>Fill in the fields for the JDBC datasource 
 then click <span class=ElementGUI>Finish</span>.<b style="font-weight: normal;"><br>
			For more information on configuring datasources for OC4J, refer 
 to the application server <a title="Documentation OC4J"
								href="http://www.oracle.com/technology/tech/java/oc4j/1013/how_to/index.html"
								target=_blank>documentation</a>.</b></p></li>
		</ol>
	</ul>
	
	<li class=kadov-p><p>Make a reference to the datasource in your Web 
 Services container's <span class=Code>WEB-INF/web.xml</span> file. Note 
 that you must specify the name of the datasource in the <span class=Code>res-ref-name</span> 
 tag.<br>
	One example of referencing the datasources defined above is given below:</p></li>
</ol>

<p class="whs5"><span class=Code>...</span></p>

<p class="whs5"><span class=Code>&lt;resource-ref&gt;</span></p>

<p class="whs6"><span class=Code>&lt;description&gt;Data 
 Integrator Data Services on Oracle_SRV1&lt;/description&gt;</span></p>

<p class="whs6"><span class=Code>&lt;res-ref-name&gt;</span><span 
 class=Code
	style="color: #008000;"><font color=green >jdbc/Oracle_SRV1/Oracle/dataServices</font></span><span 
 class=Code>&lt;/res-ref-name&gt;</span></p>

<p class="whs7"><span class=Code
													style="color: #c0c0c0;"><font color=silver >&lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</font></span></p>

<p class="whs7"><span class=Code
													style="color: #c0c0c0;"><font color=silver >&lt;res-auth&gt;Container&lt;/res-auth&gt;</font></span></p>

<p class="whs5"><span class=Code>&lt;/resource-ref&gt;</span></p>

<p class="whs3">&nbsp;</p>

<ol start="4" type="1" class="whs1">
	
	<li class=kadov-p><p>Restart your Axis2 application to take the new 
 datasources into account.</p></li>
</ol>

<h2><a name=topology_configuration></a>Configuring the topology</h2>

<p>Once the Web Services container is ready, you must declare it as a data 
 server in the topology, in order to let Oracle Data Integrator deploy 
 Data Services on it.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span> : Be careful not 
 to confuse the Web Services containers and the servers containing deployed 
 data. While both are declared as data servers in Oracle Data Integrator, 
 the former do not contain any data, and only serve to host the published 
 Data Services.</p>

<p>Web Services containers declared in Oracle Data Integrator have one 
 of three modes of deploying Web Services:</p>

<ul type="disc" class="whs2">
	
	<li class=kadov-p><p>Copying files directly onto the server, if you 
 have file access to the server.</p></li>
	
	<li class=kadov-p><p>Uploading onto the server by FTP.</p></li>
	
	<li class=kadov-p><p>Uploading with the <span style="font-style: italic;"><I>Web 
 Service Upload</I></span> method supported on some servers, such as Axis2.</p></li>
</ul>

<p>The next steps in the configuration of the Web Services container depend 
 on the deployment mode you choose to use.</p>

<p><span class=ElementGUI>To configure the Web Services container:</span></p>

<ol type="1" class="whs1">
	
	<li class=kadov-p><p>In <span class=ElementGUI>Topology Manager</span>'s 
 <span class=ElementGUI>Physical Architecture</span> view, select the <span 
 class=ElementGUI>Axis2</span> technology. Right-click and select <span 
 class=ElementGUI>Insert Dataserver</span>. &nbsp;If 
 you are using a different Web Services container, then choose the appropriate 
 technology instead.</p></li>
	
	<li class=kadov-p
		class=kadov-p>Fill in the following fields on the Definition tab:</li>
</ol>

<ol>
	
	<ul>
		
		<li style="list-style: disc;"
			type=disc
			class=kadov-p><p><span class=ElementGUI>Name</span>: Name of 
 the dataserver as it will appear in Oracle Data Integrator.</p></li>
		
		<li style="list-style: disc;"
			type=disc
			class=kadov-p><p><span class=ElementGUI>Base URL for published 
 services</span>: http://&lt;Host&gt;:&lt;HTTP port&gt;/axis2/services</p></li>
		
		<li style="list-style: disc;"
			type=disc
			class=kadov-p><p>Select the option corresponding to the chosen 
 method of deployment:</p></li>
		
		<ul>
			
			<li style="list-style: disc;"
				type=disc
				class=kadov-p><p><span class=ElementGUI>File copy</span>: 
 Specify the directory in the application server which will receive Web 
 Services.</p></li>
			
			<li style="list-style: disc;"
				type=disc
				class=kadov-p><p class="whs8"><i style="font-style: italic;"><span 
 class=ElementGUI>Web Service Upload</span><span style="font-style: normal;">: 
 </span></i>&nbsp;Specify 
 the root URL for the Axis2 application, typically <span class=Code>http://&lt;Host&gt;:&lt;HTTP 
 port&gt;/axis2/axis2-admin/</span>, as well as the user name and password 
 of the Axis2 administrator.</p></li>
			
			<li style="list-style: disc;"
				type=disc
				class=kadov-p><p class="whs8"><span class=ElementGUI>FTP 
 Upload</span>: Specify the FTP URL of the deployment directory as well 
 as the user name and password of a user with rights to write in this directory.</p></li>
		</ul>
	</ul>
</ol>

<ol start=3>
	
	<li style="list-style: decimal; /*begin!kadov{{*/ font-style: normal; /*}}end!kadov*/ "
		type=1
		class=kadov-p><p class="whs8">Click <span class=ElementGUI>OK</span>.<br>
	A window will open to allow you to create a physical schema.</p></li>
	
	<li style="list-style: decimal; /*begin!kadov{{*/ font-style: normal; /*}}end!kadov*/ "
		type=1
		class=kadov-p><p class="whs8">Go to the <span class=ElementGUI>Context</span> 
 tab, and define one logical schema for each context in which you will 
 deploy the Data Services.</p></li>
	
	<li class=kadov-p><p>Click <span class=ElementGUI>OK</span>.</p></li>
</ol>

<p class=Remarque><span class=RemarqueTitre>Note</span> : You only need 
 to define one physical schema per Web Services container.</p>

<p>For further information about setting up the topology, refer to <a href>Creating 
 the Topology</a>.</p>

<h2><a name=model_configuration></a>Setting up the model</h2>

<p>To configure Data Services for a model, make sure that the datastores 
 which you wish to deploy are already correctly defined (such as by reverse-engineering) 
 and accessible. For further information, see <a href>Creating 
 and Reverse-engineering a Model</a>.</p>

<p>Make sure that you have imported the appropriate Service Knowledge Module 
 (SKM) into one of your projects. The SKM contains the code template from 
 which the Data Services will be generated. For further information on 
 importing KMs, see <a href>Importing 
 a KM</a>. </p>

<p>You may also wish to consult the section <a href="#data_service_how">Overview 
 of Generated Services</a> for further information about how the properties 
 below will affect the generated Data Services.</p>

<p class=HowTo>To set up a model to use Data Services:</p>

<ol type="1" class="whs1">
	
	<li class=kadov-p><p>Open the model and go to the <span class=ElementGUI>Services</span> 
 tab.</p></li>
	
	<li class=kadov-p><p>On the <span class=ElementGUI>Application Server</span> 
 tab, select the Web Services container that you set up earlier.</p></li>
	
	<li class=kadov-p><p>Set the <span class=ElementGUI>Namespace</span>, 
 which will be used in the generated WSDL.</p></li>
	
	<li class=kadov-p><p>Specify the <span class=ElementGUI>Package name</span>, 
 used to name the generated Java package that contains your Web Service. 
 Generally, this is of the form <span class=Code>com.&lt;company name&gt;.&lt;project 
 name&gt;</span></p></li>
	
	<li class=kadov-p><p>In the <span class=ElementGUI>Datasource name</span> 
 field, copy/paste the name of the datasource that you defined for the 
 server when setting up the datasources. This name should be prefixed by 
 <span class=Code
		style="font-weight: bold;"><B>java:/comp/env/</B></span>.</p></li>
	
	<li class=kadov-p><p>Define the <span class=ElementGUI>Data Service 
 Name</span>. Note that this name is only used for the Data Service operating 
 at the model level. You can also define a Data Service name for each datastore 
 - see below.</p></li>
	
	<li class=kadov-p><p>Select a service knowledge module (SKM) from the 
 list, and set its options. Refer to the description of the SKM for more 
 information. Note that only those SKMs imported into projects appear here.</p></li>
	
	<li class=kadov-p><p>Go to the <span class=ElementGUI>Deployed Datastores</span> 
 tab.</p></li>
	
	<li class=kadov-p><p>Select every datastore that you wish to expose 
 as a Web Service. For each one, specify a <span class=ElementGUI>Data 
 Service Name</span> and the name of the <span class=ElementGUI>Published 
 Entity</span>.</p></li>
	
	<li class=kadov-p><p>Click OK to save your changes.</p></li>
</ol>

<p>Although not required at first, you can also fine-tune the configuration 
 of your generated Data Services at the datastore and column level.</p>

<p class=HowTo>To configure options for Data Services at the datastore 
 level:</p>

<ol type="1" class="whs1">
	
	<li class=kadov-p><p>Open the datastore and select the <span class=ElementGUI>Services</span> 
 tab.</p></li>
	
	<li class=kadov-p><p>Check Deploy as Data Service if you want the datastore 
 to be deployed.</p></li>
	
	<li class=kadov-p><p>Enter the <span class=ElementGUI>Data Service 
 Name</span> and the name of the <span class=ElementGUI>Published Entity</span> 
 for the datastore.</p></li>
	
	<li class=kadov-p><p>Click <span class=ElementGUI>OK</span> to save 
 your changes.</p></li>
</ol>

<p class=HowTo>To configure Data Service options at the column level:</p>

<p>You can specify the operations that will be permitted for each column. 
 One important use of this is to lock a column against being written to 
 via Data Services.</p>

<ol type="1" class="whs1">
	
	<li class=kadov-p><p>Open the column and select the <span class=ElementGUI>Services</span> 
 tab.</p></li>
	
	<li class=kadov-p><p>Check the operations that you wish to allow: <span 
 class=ElementGUI>INSERT</span>, <span class=ElementGUI>UPDATE</span>, 
 <span class=ElementGUI>SELECT</span>.</p></li>
	
	<li class=kadov-p><p>Click <span class=ElementGUI>OK</span> to save 
 your changes.</p></li>
</ol>

<h2><a name=data_service_generation></a>Generating and Deploying Data Services</h2>

<p>Generating Data Services for a model also has the effect of generating 
 the Data Services for the individual datastores.</p>

<p class=HowTo>To generate Data Services for a datastore or model:</p>

<ol type="1" class="whs1">
	
	<li class=kadov-p><p>Select the model or datastore for which you wish 
 to generate the Data Services.</p></li>
	
	<li class=kadov-p><p>Right-click, and select <span class=ElementGUI>Generate 
 Service</span>.<br>
	The generation configuration window opens.</p></li>
	
	<li class=kadov-p><p>Specify the path to store the generated Data Service 
 in. Oracle Data Integrator places the generated source code and the compiled 
 Web Service here. This directory is a temporary location that can be deleted 
 after generation.</p></li>
	
	<li class=kadov-p><p>Specify the <span class=ElementGUI>Context</span>. 
 Note that the choice of context has three effects:</p></li>
</ol>

<ul type="1" class="whs9">
	
	<ul type="disc" class="whs2">
		
		<li class=kadov-p><p>Determining the JDBC/Java datatype bindings 
 at generation time.</p></li>
		
		<li class=kadov-p><p>Determining which physical schemas are used 
 to provide data.</p></li>
		
		<li class=kadov-p><p>Determining which physical Web Services container 
 is deployed to.</p></li>
	</ul>
</ul>

<ol start="5" type="1" class="whs1">
	
	<li class=kadov-p><p>Choose 1 or more <span class=ElementGUI>Generation 
 phases</span>. For normal deployment, all three phases should be selected. 
 However, it may be useful to only perform the generation phase when testing 
 new SKMs, for instance. See below for the meaning of these phases.</p></li>
</ol>

<p>It is also possible to use the <span class=ElementGUI>Generate and deploy...</span> 
 button on the <span class=ElementGUI>Services</span> tab in either the 
 <span class=ElementGUI>Datastore</span> or <span class=ElementGUI>Model</span> 
 window.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: Generating Data 
 Services for a model generates one Data Service for the model, and an 
 additional Data Service for each of the datastores which are enabled for 
 publishing as such.</p>

<table x-use-null-cells>
<col>
<col>

<tr>
<th valign="top" class="whs10">
<p class=TitreTableau>Phase</th>
<th valign="top" class="whs10">
<p class=TitreTableau>Description</th></tr>

<tr>
<td valign="top" class="whs11">
<p>Generation</td>
<td valign="top" class="whs11">
<ul type="disc" class="whs2">
	
	<li class=kadov-p><p>Deletes everything in the directory.</p></li>
	
	<li class=kadov-p><p>Generates .java files using SKM.</p></li>
</ul></td></tr>

<tr>
<td valign="top" class="whs11">
<p>Compilation</td>
<td valign="top" class="whs11">
<ul type="disc" class="whs2">
	
	<li class=kadov-p><p>Extracts Web Service framework.</p></li>
	
	<li class=kadov-p><p>Compiles .java files into .class files.</p></li>
</ul></td></tr>

<tr>
<td valign="top" class="whs11">
<p>Deployment</td>
<td valign="top" class="whs11">
<ul type="disc" class="whs2">
	
	<li class=kadov-p><p>Generates a Java package (.aar) from compiled 
 files.</p></li>
	
	<li class=kadov-p><p>Copies package to deployment target, using chosen 
 deployment method.</p></li>
</ul></td></tr>
</table>

<h2><a name=data_service_how></a>Overview of Generated Services</h2>

<h3>Model-level services</h3>

<p>Data Services are only generated at the model-level when the model is 
 enabled for consistent set CDC. The following services are generated:</p>

<ul type="disc" class="whs2">
	
	<li class=kadov-p><p><span class=Code>extendWindow</span> (no parameters): 
 Carries out an extend window operation.</p></li>
	
	<li class=kadov-p><p><span class=Code>lock</span> (SubscriberName): 
 Locks the consistent set for the named subscriber. To lock the consistent 
 set for several subscribers, call the service several times, using several 
 SnpsInvokeWebService steps for example.</p></li>
	
	<li class=kadov-p><p><span class=Code>unlock</span> (SubscriberName): 
 Unlocks the consistent set for the named subscriber.</p></li>
	
	<li class=kadov-p><p><span class=Code>purge</span> (no parameters): 
 Purges consumed changes.</p></li>
</ul>

<p>See <a href="journalizing.htm">Change Data Capture</a> for more information 
 on these operations.</p>

<h3>Datastore-level services</h3>

<p>The range of operations offered by each generated Data Service depends 
 on the SKM used to generate it. There are several common properties shared 
 by the SKMs currently supplied by Oracle Data Integrator. In almost every 
 case the name of the published entity forms part of the name of each operation. 
 In the following examples, the published entity &quot;Customer&quot; will 
 be used. </p>

<ul type="disc" class="whs2">
	
	<li class=kadov-p><p>Operations on a <span style="font-weight: bold;"><B>single</B></span> 
 entity. These operations allow a single record to be manipulated, by specifying 
 a value for its primary key. Other fields may have to be supplied to describe 
 the new row, if any. <br>
	Examples: <span class=Code>addcustomer</span>, <span class=Code>getcustomer</span>, 
 <span class=Code>deletecustomer</span>, <span class=Code>updatecustomer</span>.</p></li>
	
	<li class=kadov-p><p>Operations on a group of entities specified by 
 <span style="font-weight: bold;"><B>filter</B></span>. These operations involve 
 specifying values for one or several fields to define a filter, then optionally 
 supplying other values for the changes to made to those rows. In general, 
 a maximum number of rows to return can also be specified. <br>
	Examples: <span class=Code>getcustomerfilter</span>, <span class=Code>deletecustomerfilter</span>, 
 <span class=Code>updatecustomerfilter</span>.</p></li>
	
	<li class=kadov-p
		class=kadov-p>Operations on a <span style="font-weight: bold;"><B>list</B></span> 
 of entities. This list is constructed by supplying a several individual 
 entities, as described in the &quot;single entity&quot; case above. <br>
	Examples: <span class=Code>addcustomerlist</span><span>, </span><span 
 class=Code>deletecustomerlist</span><span>, </span><span class=Code>getcustomerlist</span><span>, 
 </span><span class=Code>updatecustomerlist</span><span>.</span></li>
</ul>

<h2>Testing Data Services</h2>

<p>The easiest way to test generated Data Services is to use the graphical 
 interface for the <a href="../../../ref_tools/snpsinvokewebservice.htm">SnpsInvokeWebService</a> 
 Oracle Data Integrator tool. See also <a href="../project/package/invoking_web_services.htm">Invoking 
 a Web Service</a> for more information.</p>

</body>
</html>
