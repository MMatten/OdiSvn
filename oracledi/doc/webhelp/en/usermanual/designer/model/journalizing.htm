<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>Change Data Capture</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="../../../include/common_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='../../../include/common.css'>");}
//-->
</script>
<style type="text/css">
<!--
ul.whs1 { list-style:disc; }
ol.whs2 { list-style:decimal; }
img_whs3 { border:none; width:16px; height:16px; float:none; border-style:none; }
p.whs4 { font-weight:bold; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="../../../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="../../../whutils.js"></script>
<script type="text/javascript" language="javascript" src="../../../whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='../../../wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("User's Guide\nDesigner\nModels\nChange Data Capture");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("../../../index.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h1>Changed Data Capture</h1>

<h2>Introduction</h2>

<p>Changed Data Capture (CDC) allows Oracle Data Integrator to track changes in 
 source data caused by other applications. When running integration interfaces, 
 Oracle Data Integrator can avoid processing unchanged data in the flow.</p>

<p>Reducing the source data flow to only changed data is useful in many 
 contexts, such as data synchronization and replication. It is essential 
 when setting up an event-oriented architecture for integration. In such 
 an architecture, applications make changes in the data (&quot;Customer 
 Deletion&quot;, &quot;New Purchase Order&quot;) during a business process. 
 These changes are captured by Oracle Data Integrator and transformed into events 
 that are propagated throughout the information system.</p>

<p>Changed Data Capture is performed by journalizing models. Journalizing 
 a model consists of setting up the infrastructure to capture the changes 
 (inserts, updates and deletes) made to the records of this model's datastores.</p>

<p>Oracle Data Integrator supports two journalizing modes: </p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Simple Journalizing</B></span> 
 tracks changes in individual datastores in a model.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Consistent Set 
 Journalizing</B></span> tracks changes to a group of the model's datastores, 
 taking into account the referential integrity between these datastores. 
 The group of datastores journalized in this mode is called a <span style="font-weight: bold;"><B>Consistent 
 Set</B></span>.</p></li>
</ul>

<h2>The Journalizing Components</h2>

<p>The journalizing components are:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Journals</B></span>: 
 Where changes are recorded. Journals only contain references to the changed 
 records along with the type of changes (insert/update, delete). </p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Capture processes</B></span>: 
 Journalizing captures the changes in the source datastores either by creating 
 triggers on the data tables, or by using database-specific programs to 
 retrieve log data from data server log files. See the documentation on 
 journalizing knowledge modules for more information on the capture processes 
 used.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Subscribers</B></span>: 
 CDC uses a publish/subscribe model. Subscribers are entities (applications, 
 integration processes, etc) that use the changes tracked on a datastore 
 or on a consistent set. They subscribe to a model's CDC to have the changes 
 tracked for them. Changes are captured only if there is at least one subscriber 
 to the changes. When all subscribers have consumed the captured changes, 
 these changes are discarded from the journals.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Journalizing 
 views:</B></span> Provide access to the changes and the changed data captured. 
 They are used by the user to view the changes captured, and by integration 
 processes to retrieve the changed data.</p></li>
</ul>

<p>These components are implemented in the journalizing infrastructure.</p>

<h2>Simple vs. Consistent Set Journalizing</h2>

<p><span style="font-weight: bold;"><B>Simple Journalizing</B></span> enables 
 you to journalize one or more datastores. Each journalized datastore is 
 treated separately when capturing the changes. </p>

<p>This approach has a limitation, illustrated in the following example: 
 Say you need to process changes in the ORDER and ORDER_LINE datastores 
 (with a referential integrity constraint based on the fact that an ORDER_LINE 
 record should have an associated ORDER record). If you have captured insertions 
 into ORDER_LINE, you have no guarantee that the associated new records 
 in ORDERS have also been captured. Processing ORDER_LINE records with 
 no associated ORDER records may cause referential constraint violations 
 in the integration process.</p>

<p><span style="font-weight: bold;"><B>Consistent Set Journalizing</B></span> 
 provides the guarantee that when you have an ORDER_LINE change captured, 
 the associated ORDER change has been also captured, and vice versa. Note 
 that consistent set journalizing guarantees the consistency of the captured 
 changes. The set of available changes for which consistency is guaranteed 
 is called the <span style="font-weight: bold;"><B>Consistency Window</B></span>. 
 Changes in this window should be processed in the correct sequence (ORDER 
 followed by ORDER_LINE) by designing and sequencing integration interfaces 
 into packages.</p>

<p>Although consistent set journalizing is more powerful, it is also more 
 difficult to set up. It should be used when referential integrity constraints 
 need to be ensured when capturing the data changes. For performance reasons, 
 consistent set journalizing is also recommended when a large number of 
 subscribers are required.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: It is not possible 
 to journalize a model (or datastores within a model) using both consistent 
 set and simple journalizing.</p>

<h2>Setting up Journalizing</h2>

<p>This is the basic process for setting up CDC on an Oracle Data Integrator data 
 model. Each of these steps is described in more detail below.</p>

<ol type="1" class="whs2">
	
	<li class=kadov-p><p>Set the CDC parameters</p></li>
	
	<li class=kadov-p><p>Add the datastores to the CDC</p></li>
	
	<li class=kadov-p><p>For consistent set journalizing, arrange the datastores 
 in order</p></li>
	
	<li class=kadov-p><p>Add subscribers</p></li>
	
	<li class=kadov-p><p>Start the journals</p></li>
</ol>

<p class=HowTo>To set the data model CDC parameters:</p>

<p>This includes &nbsp;selecting 
 or changing the journalizing mode and journalizing knowledge module used 
 for the model. If the model is already being journalized, it is recommended 
 that you stop journalizing with the existing configuration before modifying 
 the data model journalizing parameters.</p>

<ol type="1" class="whs2">
	
	<li class=kadov-p><p>Edit the data model you want to journalize, and 
 then select the <span class=ElementGUI>Journalizing</span> tab.</p></li>
	
	<li class=kadov-p><p>Select the journalizing mode you want to set up: 
 <span class=ElementGUI>Consistent Set</span> or <span class=ElementGUI>Simple</span>. 
 </p></li>
	
	<li class=kadov-p><p>Select the <span class=ElementGUI>Journalizing 
 KM</span> you want to use for this model. Only knowledge modules suitable 
 for the data model's technology and journalizing mode, and that have been 
 previously imported into at least one of your projects will appear in 
 the list.</p></li>
	
	<li class=kadov-p><p>Set the <span class=ElementGUI>Options</span> 
 for this KM. Refer to the knowledge module's description for more information 
 on the options.</p></li>
	
	<li class=kadov-p><p>Click <span class=ElementGUI>OK</span> to save 
 the changes.</p></li>
</ol>

<p class=HowTo>To add or remove datastores to or from the CDC:</p>

<p>You should now flag the datastores that you want to journalize. A change 
 in the datastore flag is taken into account the next time the journals 
 are (re)started. When flagging a model or a sub-model, all of the datastores 
 contained in the model or sub-model are flagged.</p>

<ol type="1" class="whs2">
	
	<li class=kadov-p><p>Select the datastore, the model or the sub-model 
 you want to add/remove to/from CDC.</p></li>
	
	<li class=kadov-p><p>Right-click then select <span class=ElementGUI>Changed 
 Data Capture</span> &gt; <span class=ElementGUI>Add to CDC</span> to add 
 the datastore, model or sub-model to CDC, or select <span class=ElementGUI>Changed 
 Data Capture</span> &gt; <span class=ElementGUI>Remove from CDC</span> 
 to remove it.</p></li>
	
	<li class=kadov-p><p>Refresh the tree view. The datastores added to 
 CDC should now have a marker icon. The<a href="#journalizing_icons"> journal 
 icon</a> represents a small clock. It should be yellow, indicating that 
 the journal infrastructure is not yet in place.</p></li>
</ol>

<p>It is possible to add datastores to the CDC after the journal creation 
 phase. In this case, the journals should be re-started.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: If a datastore 
 with journals running is removed from the CDC in simple mode, the journals 
 should be stopped for this individual datastore. If a datastore is removed 
 from CDC in Consistent Set mode, the journals should be restarted for 
 the model (Journalizing information is preserved for the other datastores).</p>

<p class=HowTo>To arrange the datastores in order (consistent set journalizing 
 only):</p>

<p>You only need to arrange the datastores in order when using consistent 
 set journalizing. You should arrange the datastores in the consistent 
 set into an order which preserves referential integrity when using their 
 changed data. For example, if an ORDER table has references imported from 
 an ORDER_LINE datastore (i.e. ORDER_LINE has a foreign key constraint 
 that references ORDER), and both are added to the CDC, the ORDER datastore 
 should come before ORDER_LINE. If the PRODUCT datastore has references 
 imported from both ORDER and ORDER_LINE (i.e. both ORDER and ORDER_LINE 
 have foreign key constraints to the ORDER table), its order should be 
 lower still.</p>

<ol type="1" class="whs2">
	
	<li class=kadov-p><p>Edit the data model you want to journalize, then 
 select the <span class=ElementGUI>Journalized Tables</span> tab. </p></li>
	
	<li class=kadov-p><p>If the datastores are not currently in any particular 
 order, click the <span class=ElementGUI>Reorganize</span> button. This 
 feature suggests an order for the journalized datastores based on the 
 data models' foreign keys. Note that this automatic reorganization is 
 not error-free, so you should review the suggested order afterwards.</p></li>
	
	<li class=kadov-p><p>Select a datastore from the list, then use the 
 <span class=ElementGUI>Up</span> and <span class=ElementGUI>Down</span> 
 buttons to move it within the list. You can also directly edit the <span 
 class=ElementGUI>Order</span> value for this datastore.</p></li>
	
	<li class=kadov-p><p>Repeat step 3 until the datastores are ordered 
 correctly, then click <span class=ElementGUI>OK</span> to save the changes.</p></li>
</ol>

<p>Changes to the order of datastores are taken into account the next time 
 the journals are (re)started.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: If existing scenarios 
 consume changes from this CDC set, you should regenerate them to take 
 into account the new organization of the CDC set.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: From this tab, 
 you can remove datastores from CDC using the <span class=ElementGUI>Remove 
 from CDC</span> button</p>

<p class=HowTo>To add or remove subscribers:</p>

<p>This adds or removes a list of entities that will use the captured changes.</p>

<ol type="1" class="whs2">
	
	<li class=kadov-p><p>Select the journalized data model if using Consistent 
 Set Journalizing or select a data model or individual datastore if using 
 Simple Journalizing.</p></li>
	
	<li class=kadov-p><p>Right-click, then select <span class=ElementGUI>Changed 
 Data Capture</span> &gt; <span class=ElementGUI>Subscriber</span> &gt; 
 <span class=ElementGUI>Subscribe</span>. A window appears which lets you 
 select your subscribers.</p></li>
	
	<li class=kadov-p><p>Type a subscriber name into the field, then click 
 the <span class=ElementGUI>Add Subscriber</span> button.</p></li>
	
	<li class=kadov-p><p>Repeat the operation for each subscriber you want 
 to add. Then click <span class=ElementGUI>OK</span>.</p></li>
</ol>

<p>A session to add the subscribers to the CDC is launched. You can track 
 this session from the Operator.</p>

<p>To remove a subscriber is very similar. Select the <span class=ElementGUI>Changed 
 Data Capture</span> &gt; <span class=ElementGUI>Subscriber</span> &gt; 
 <span class=ElementGUI>Unsubscribe</span> option instead.</p>

<p>You can also add subscribers after starting the journals. Subscribers 
 added after journal startup will only retrieve changes captured since 
 they were added to the subscribers list.</p>

<p class=HowTo>To start/stop the journals:</p>

<p>Starting the journals creates the CDC infrastructure if it does not 
 exist yet. It also validates the addition, removal and order changes for 
 journalized datastores.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: Stopping the journals 
 deletes the entire the journalizing infrastructure and all captured changes 
 are lost. Restarting a journal does not remove or alter any changed data 
 that has already been captured.</p>

<ol type="1" class="whs2">
	
	<li class=kadov-p><p>Select the data model or datastore you want to 
 journalize.</p></li>
	
	<li class=kadov-p><p>Right-click, then select <span class=ElementGUI>Changed 
 Data Capture</span> &gt; <span class=ElementGUI>Start Journal</span> if 
 you want to start the journals, or <span class=ElementGUI>Changed Data 
 Capture</span> &gt; <span class=ElementGUI>Drop Journal</span> if you 
 want to stop them.</p></li>
</ol>

<p>A session begins to start or drops the journals. You can track this 
 session from the Operator.</p>

<p>The journalizing infrastructure is implemented by the journalizing KM 
 at the physical level. Consequently, <span style="font-style: italic;"><I>Add 
 Subscribers</I></span> and <span style="font-style: italic;"><I>Start Journals</I></span> 
 operations should be performed in each context where journalizing is required 
 for the data model. It is possible to automate these operations using 
 Oracle Data Integrator packages. Automating these operations is recommended to 
 deploy a journalized infrastructure across different contexts. </p>

<p>Typical situation: the developer manually configures CDC in the Development 
 context. After this is working well, CDC is automatically deployed in 
 the Test context by using a package. Eventually the same package is used 
 to deploy CDC in the Production context.</p>

<p class=HowTo
	style="color: #000000;">To automate journalizing setup:</p>

<ol type="1" class="whs2">
	
	<li class=kadov-p><p>Create a new package in Designer</p></li>
	
	<li class=kadov-p><p>Drag and drop the model or datastore you want 
 to journalize. A new step appears.</p></li>
	
	<li class=kadov-p><p>Double-Click the step icon in the diagram. The 
 properties panel opens.</p></li>
	
	<li class=kadov-p><p>In the <span class=ElementGUI>Type</span> list, 
 select <span class=ElementGUI>Journalizing Model/Datastore</span>.</p></li>
	
	<li class=kadov-p><p>Check the <span class=ElementGUI>Start</span> 
 box to start the journals.</p></li>
	
	<li class=kadov-p><p>Check the <span class=ElementGUI>Add Subscribers</span> 
 box, then enter the list of subscribers into the <span class=ElementGUI>Subscribers</span> 
 group.</p></li>
	
	<li class=kadov-p><p>Click <span class=ElementGUI>OK</span> to save.</p></li>
	
	<li class=kadov-p><p>Generate a scenario for this package.</p></li>
</ol>

<p>When this scenario is executed in a context, it starts the journals 
 according to the model configuration and creates the specified subscribers 
 using this context.</p>

<p>It is possible to split subscriber and journal management into different 
 steps and packages. Deleting subscribers and stopping journals can be 
 automated in the same manner. See the <span style="font-style: italic;"><I>Packages</I></span> 
 section for more information.</p>

<h3>Journalizing Infrastructure Details</h3>

<p>When the journals are started, the journalizing infrastructure (if not 
 installed yet) is deployed or updated in the following locations:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>When the journalizing knowledge module creates 
 triggers, they are installed on the tables in the <span class=ElementGUI>Data 
 Schema</span> for the Oracle Data Integrator physical schema containing the journalized 
 tables. Journalizing trigger names are prefixed with the prefix defined 
 in the <span class=ElementGUI>Journalizing Elements Prefixes</span> for 
 the physical schema. The default value for this prefix is <span class=Code>T$</span>. 
 The Database-specific programs are installed separately (see the KM documentation 
 for more information).</p></li>
</ul>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>A CDC common infrastructure for the data server 
 is installed in the <span class=ElementGUI>Work Schema</span> for the 
 Oracle Data Integrator physical schema that is flagged as <span class=ElementGUI>Default</span> 
 for this data server. This common infrastructure contains information 
 about subscribers, consistent sets, etc for all the journalized schemas 
 of this data server. This common infrastructure consists of tables whose 
 names are prefixed with <span class=Code>SNP_CDC_</span>.</p></li>
	
	<li class=kadov-p><p>Journal tables and journalizing views are installed 
 in the <span class=ElementGUI>Work Schema</span> for the Oracle Data Integrator 
 physical schema containing the journalized tables. The journal table and 
 journalizing view names are prefixed with the prefixes defined in the 
 <span class=ElementGUI>Journalizing Elements Prefixes</span> for the physical 
 schema. The default value is <span class=Code>J$</span> for journal tables 
 and <span class=Code>JV$</span> for journalizing views</p></li>
</ul>

<p class=Remarque><span class=RemarqueTitre>Note</span>: All components 
 (except the triggers) of the journalizing infrastructure (like all Data 
 Integrator temporary objects, such as integration, error and loading tables) 
 are installed in the <span class=ElementGUI>Work Schema</span> for the 
 Oracle Data Integrator physical schemas of the data server. These work schemas 
 should be kept separate from the schema containing the application data 
 (Data Schema).</p>

<p class=Remarque><span class=AlertTitre>Important Note</span>: The journalizing 
 triggers are the only components for journalizing that must be installed, 
 when needed, in the same schema as the journalized data. Before creating 
 triggers on tables belonging to a third-party software package, please 
 check that this operation is not a violation of the software agreement 
 or maintenance contract. Also ensure that installing and running triggers 
 is technically feasible without interfering with the general behavior 
 of the software package.</p>

<h3><a name=journalizing_icons></a>Journalizing Status</h3>

<p>Datastores in models or interfaces have an icon marker indicating their 
 journalizing status in Designer's current context:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><img src="horloge_v.gif" x-maintain-ratio="TRUE" width="16px" height="16px" border="0" class="img_whs3"> <span style="font-weight: bold;"><B>OK</B></span> 
 - Journalizing is active for this datastore in the current context, and 
 the infrastructure is operational for this datastore.</p></li>
	
	<li class=kadov-p><p><img src="horloge_o.gif" x-maintain-ratio="TRUE" width="16px" height="16px" border="0" class="img_whs3"> <span style="font-weight: bold;"><B>No 
 Infrastructure</B></span> - Journalizing is marked as active in the model, 
 but no appropriate journalizing infrastructure was detected in the current 
 context. Journals should be started. This state may occur if the journalizing 
 mode implemented in the infrastructure does not match the one declared 
 for the model.</p></li>
	
	<li class=kadov-p><p><img src="horloge_g.gif" x-maintain-ratio="TRUE" width="16px" height="16px" border="0" class="img_whs3"> <span style="font-weight: bold;"><B>Remnants 
 -</B></span> Journalizing is marked as inactive in the model, but remnants 
 of the journalizing infrastructure such as the journalizing table have 
 been detected for this datastore in the context. This state may occur 
 if the journals were not stopped and the table has been removed from CDC.</p></li>
</ul>

<h2>Using Changed Data</h2>

<p>Once journalizing is started and changes are tracked for subscribers, 
 it is possible to view the changes captured.</p>

<p class=HowTo>To view the changed data:</p>

<ol type="1" class="whs2">
	
	<li class=kadov-p><p>Select the journalized datastore</p></li>
	
	<li class=kadov-p><p>Right-click, then select <span class=ElementGUI>Changed 
 Data Capture</span> &gt; <span class=ElementGUI>Journal Data</span>. </p></li>
</ol>

<p>A window containing the changed data appears.</p>

<p class=Remarque><span class=RemarqueTitre>Note</span>: This window selects 
 data using the journalizing view.</p>

<p>The changed data displays three extra columns for the changes details:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span class=Code>JRN_FLAG</span>: Flag indicating 
 the type of change. It takes the value <span class=Code>I</span> for an 
 inserted/updated record and <span class=Code>D</span> for a deleted record.</p></li>
	
	<li class=kadov-p><p><span class=Code>JRN_SUBSCRIBER</span>: Name of 
 the Subscriber.</p></li>
	
	<li class=kadov-p><p><span class=Code>JRN_DATE</span>: Timestamp of 
 the change.</p></li>
</ul>

<p>Journalized data is mostly used within integration processes. Changed 
 data can be used as the source of integration interfaces. The way it is 
 used depends on the journalizing mode.</p>

<h3>Using Changed Data: Simple Journalizing</h3>

<p>Using changed data from simple journalizing consists of designing interfaces 
 using journalized datastores as sources.</p>

<h4>Designing Interfaces</h4>

<h5>Journalizing Filter</h5>

<p>When a journalized datastore is inserted into an interface diagram, 
 a <span class=ElementGUI>Journalized Data Only</span> check box appears 
 in this datastore's property panel. </p>

<p>When this box is checked: </p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>the <span class=ElementGUI>journalizing columns</span> 
 (<span class=Code>JRN_FLAG</span>, <span class=Code>JRN_DATE</span> and 
 <span class=Code>JRN_SUBSCRIBER</span>) become available in the datastore. 
 </p></li>
	
	<li class=kadov-p><p>A <span style="font-weight: bold;"><B>journalizing 
 filter</B></span> is also automatically generated on this datastore. This 
 filter will reduce the amount of source data retrieved. It is always executed 
 on the source. You can customize this filter (for instance, to process 
 changes in a time range, or only a specific type of change).<br>
	A typical filter for retrieving all changes for a given subscriber 
 is: <span class=Code>JRN_SUBSCRIBER = '&lt;subscriber_name&gt;'</span>.</p></li>
</ul>

<p class=Remarque><span class=RemarqueTitre>Note</span>: In simple journalizing 
 mode all the changes taken into account by the interface (after the journalizing 
 filter is applied) are automatically considered consumed at the end of 
 the interface and removed from the journal. They cannot be used by a subsequent 
 interface.</p>

<h5>Knowledge Module Options</h5>

<p>When processing journalized data, the <span class=Code>SYNC_JRN_DELETE</span> 
 option of the integration knowledge module should be set carefully. It 
 invokes the deletion from the target datastore of the records marked as 
 deleted (D) in the journals and that are not excluded by the journalizing 
 filter. If this option is set to No, integration will only process inserts 
 and updates.</p>

<h3>Using Changed Data: Consistent Set Journalizing</h3>

<p>Using Changed data in Consistent journalizing is similar to simple journalizing 
 regarding interface design. &nbsp;It 
 requires extra steps before and after processing the changed data in the 
 interfaces, in order to enforce changes consistently within the set.</p>

<h4>Operations Before Using the Changed Data</h4>

<p>The following operations should be undertaken before using the changed 
 data when using consistent set journalizing:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Extend Window</B></span>: 
 The <span style="font-weight: bold;"><B>Consistency Window</B></span> is a range 
 of available changes in all the tables of the consistency set for which 
 the insert/update/delete are possible without violating referential integrity. 
 The extend window operation (re)computes this window to take into account 
 new changes captured since the latest Extend Window operation. This operation 
 is implemented using a package step with the <span class=ElementGUI>Journalizing 
 Model Type</span>. This operation can be scheduled separately from other 
 journalizing operations.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Lock Subscribers</B></span>: 
 Although the extend window is applied to the entire consistency set, subscribers 
 consume the changes separately. This operation performs a subscriber(s) 
 specific &quot;snapshot&quot; of the changes in the consistency window. 
 This snapshot includes all the changes within the consistency window that 
 have not been consumed yet by the subscriber(s). This operation is implemented 
 using a package step with the <span class=ElementGUI>Journalizing Model 
 Type</span>. It should be always performed before the first interface 
 using changes captured for the subscriber(s).</p></li>
</ul>

<h4>Designing Interfaces</h4>

<p>The changed data in consistent set journalizing are also processed using 
 interfaces sequenced into packages.</p>

<p>Designing interfaces when using consistent set journalizing is similar 
 to simple journalizing, except for the following differences:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p
		class=kadov-p>The changes taken into account by the interface (that 
 is filtered with <span class=Code>JRN_FLAG</span>, <span class=Code>JRN_DATE</span> 
 and <span class=Code>JRN_SUBSCRIBER</span>) are not automatically purged 
 at the end of the interface. They can be reused by subsequent interfaces. 
 The unlock subscriber and purge journal operations (see below) &nbsp;are 
 required to commit consumption of these changes, and remove useless entries 
 from the journal respectively.</li>
	
	<li class=kadov-p
		class=kadov-p>In consistent mode, the <span class=Code>JRN_DATE</span> 
 column should not be used in the journalizing filter. Using this timestamp 
 to filter the changes consumed does not entirely ensure consistency in 
 these changes.</li>
</ul>

<h4>Operations after Using the Changed Data</h4>

<p>After using the changed data, the following operations should be performed:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Unlock Subscribers</B></span>: 
 This operation commits the use of the changes that where locked during 
 the <span style="font-weight: bold;"><B>Lock Subscribers</B></span> operations 
 for the subscribers. It should be processed only after all the changes 
 for the subscribers have been processed. This operation is implemented 
 using a package step with the <span class=ElementGUI>Journalizing Model 
 Type</span>. It should be always performed after the last interface using 
 changes captured for the subscribers. If the changes need to be processed 
 again (for example, in case of an error), this operation should not be 
 performed.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Purge Journal</B></span>: 
 After all subscribers have consumed the changes they have subscribed to, 
 entries still remain in the journalizing tables and should be deleted. 
 This is performed by the Purge Journal operation. This operation is implemented 
 using a package step with the <span class=ElementGUI>Journalizing Model 
 Type</span>. This operation can be scheduled separately from the other 
 journalizing operations.</p></li>
</ul>

<p class=HowTo>To create an Extend Window, Lock/Unlock Subscriber or Purge 
 Journal step in a package:</p>

<ol type="1" class="whs2">
	
	<li class=kadov-p><p>Open the package where the operations will be 
 performed.</p></li>
	
	<li class=kadov-p><p>Drag and drop the model for which you want to 
 perform the operation.</p></li>
	
	<li class=kadov-p><p>In the <span class=ElementGUI>Type</span> list, 
 select <span class=ElementGUI>Journalizing Model</span>.</p></li>
	
	<li class=kadov-p><p>Check the option boxes corresponding to the operations 
 you want to perform.</p></li>
	
	<li class=kadov-p><p>Enter the list of subscribers into the <span class=ElementGUI>Subscribers</span> 
 group if performing lock/unlock subscribers operations.</p></li>
	
	<li class=kadov-p><p>Click <span class=ElementGUI>OK</span>.</p></li>
</ol>

<p class=Remarque><span class=RemarqueTitre>Note</span>: It is possible 
 to perform an Extend Window or Purge Journal on a datastore. This operation 
 is provided to process changes for tables that are in the same consistency 
 set at different frequencies. This option should be used carefully, as 
 consistency for the changes may be no longer maintained at the consistency 
 set level</p>

<h3>Journalizing Tools</h3>

<p>Oracle Data Integrator provides a set of tools that can be used in journalizing 
 to refresh information on the captured changes or trigger other processes:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>SnpsWaitForData</B></span> 
 waits for a number of rows in a table or a set of tables.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>SnpsWaitForLogData</B></span> 
 waits for a certain number of modifications to occur on a journalized 
 table or a list of journalized tables. This tool calls SnpsRefreshJournalCount 
 to perform the count of new changes captured.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>SnpsWaitForTable</B></span> 
 waits for a table to be created and populated with a pre-determined number 
 of rows.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>SnpsRetrieveJournalData</B></span> 
 retrieves the journalized events for a given table list or CDC set for 
 a specified journalizing subscriber. Calling this tool is required if 
 using Database-Specific Processes to load journalizing tables. This tool 
 needs to be used with specific knowledge modules. See the knowledge module 
 description for more information.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>SnpsRefreshJournalCount</B></span> 
 refreshes the number of rows to consume for a given table list or CDC 
 set for a specified journalizing subscriber.</p></li>
</ul>

<p>See the <span style="font-style: italic;"><I>Oracle Data Integrator Tools Reference</I></span> 
 for more information on these functions.</p>

<h3>Package Templates for Using Journalizing</h3>

<p>A number of templates may be used when designing packages to use journalized 
 data. Below are some typical templates.</p>

<h4>Template 1: One Simple Package (Consistent Set)</h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>Step 1: Extend Window + Lock Subscribers</p></li>
	
	<li class=kadov-p><p>Step 2 ... n-1: Interfaces using the journalized 
 data</p></li>
	
	<li class=kadov-p><p>Step n: Unlock Subscribers + Purge Journal</p></li>
</ul>

<p>This package is scheduled to process all changes every minutes. This 
 template is relevant if changes are made regularly in the journalized 
 tables.</p>

<h4>Template 2: One Simple Package (Simple Journalizing)</h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>Step 1 ... n: Interfaces using the journalized 
 data</p></li>
</ul>

<p>This package is scheduled to process all changes every minutes. This 
 template is relevant if changes are made regularly in the journalized 
 tables.</p>

<h4>Template 3: Using SnpsWaitForLogData (Consistent Set or Simple) </h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>Step 1: SnpsWaitForLogData. If no new log data 
 is detected after a specified interval, end the package.</p></li>
	
	<li class=kadov-p><p>Step 2: Execute a scenario equivalent to the template 
 1 or 2, using SnpsStartScen</p></li>
</ul>

<p>This package is scheduled regularly. Changed data will only be processed 
 if new changes have been detected. This avoids useless processing if changes 
 occur sporadically to the journalized tables (i.e. to avoid running interfaces 
 that would process no data).</p>

<h4>Template 4: Separate Processes (Consistent Set)</h4>

<p>This template dissociates the consistency window, &nbsp;the 
 purge, and the changes consumption (for two different subscribers) in 
 different packages.</p>

<p class="whs4">Package 1: Extend Window </p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>Step 1: SnpsWaitForLogData. If no new log data 
 is detected after a specified interval, end the package.</p></li>
	
	<li class=kadov-p><p>Step 2: Extend Window.</p></li>
</ul>

<p>This package is scheduled every minute. Extend Window may be resource 
 consuming. It is better to have this operation triggered only when new 
 data appears.</p>

<p class="whs4">Package 2: Purge Journal (at the end of week)</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>Step 1: Purge Journal</p></li>
</ul>

<p>This package is scheduled once every Friday. We will keep track of the 
 journals for the entire week.</p>

<p class="whs4">Package 3: Process the Changes for Subscriber 
 A</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>Step 1: Lock Subscriber A</p></li>
	
	<li class=kadov-p><p>Step 2 ... n-1: Interfaces using the journalized 
 data for subscriber A</p></li>
	
	<li class=kadov-p><p>Step n: Unlock Subscriber A</p></li>
</ul>

<p>This package is scheduled every minute. Such a package is used for instance 
 to generate events in a MOM.</p>

<p class="whs4">Package 4: Process the Changes for Subscriber 
 B</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>Step 1: Lock Subscriber B</p></li>
	
	<li class=kadov-p><p>Step 2 ... n-1: Interfaces using the journalized 
 data for subscriber B</p></li>
	
	<li class=kadov-p><p>Step n: Unlock Subscriber B</p></li>
</ul>

<p>This package is scheduled every day. Such a package is used for instance 
 to load a data warehouse during the night with the changed data.</p>

</body>
</html>
