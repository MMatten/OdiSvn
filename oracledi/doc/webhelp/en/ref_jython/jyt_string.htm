<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>Strings</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="../include/common_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='../include/common.css'>");}
//-->
</script>
<style type="text/css">
<!--
ul.whs1 { list-style:disc; }
p.whs2 { font-weight:bold; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='../wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("Jython Quick Reference\nThe Basics\nData Types\nStrings");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("../index.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h1>Strings</h1>

<p>The following sequences are defined as strings:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span class=Code>'Strings are enclosed in single 
 quotes'</span></p></li>
	
	<li class=kadov-p><p><span class=Code>&quot;Another string in quotes&quot;</span></p></li>
	
	<li class=kadov-p><p><span class=Code>'String enclosed by single quotes 
 with a &quot; (double quote) in it' &nbsp;</span></p></li>
	
	<li class=kadov-p><p><span class=Code>&quot;String enclosed in double 
 quotes with a ' in it&quot;</span></p></li>
	
	<li class=kadov-p><p><span class=Code>'''A string that contains carriage 
 returns and ' can be enclosed in tree single quotes''' &nbsp;</span></p></li>
	
	<li class=kadov-p><p><span class=Code>&quot;&quot;&quot; Triple quotes 
 can also be used&quot;&quot;&quot; &nbsp;</span></p></li>
	
	<li class=kadov-p><p><span class=Code>r' non interpreted strings (the 
 \ are kept). Useful for the windows paths!' &nbsp;</span></p></li>
	
	<li class=kadov-p><p><span class=Code>R&quot; non interpreted string&quot;</span></p></li>
</ul>

<p class=Remarque>Use \ at the end of the line to continue a string on 
 several lines</p>

<p class=Remarque>2 adjacent strings are concatenated (ex :<span class=Code> 
 'Oracle Data Integrator and' ' Python'</span> is equivalent to <span class=Code>'Data 
 Integrator and Python'.</span> </p>

<h2>Escape sequences</h2>

<p><span class=Code>\newline</span> &nbsp;: 
 Ignored (Escape newline) </p>

<p><span class=Code>\\ </span>&nbsp;: 
 Backslash (\) </p>

<p><span class=Code>\e</span>: : &nbsp;Escape 
 (ESC) </p>

<p><span class=Code>\v </span>&nbsp;: 
 Vertical Tabulation (VT) </p>

<p><span class=Code>\' </span>: &nbsp;Single 
 Quote (') </p>

<p><span class=Code>\f</span> : &nbsp;Form 
 Feed (FF) </p>

<p><span class=Code>\OOO</span> &nbsp;: 
 Character with Octal value OOO </p>

<p><span class=Code>\&quot;</span> : Double quote (&quot;) </p>

<p><span class=Code>\n</span> &nbsp;:Line 
 Feed (LF) </p>

<p><span class=Code>\a</span> &nbsp;: 
 Beep (BEL) </p>

<p><span class=Code>\r</span> &nbsp;: 
 Carriage Return (CR) </p>

<p><span class=Code>\xHH</span> &nbsp;: 
 Hexadecimal Character HH </p>

<p><span class=Code>\b</span> &nbsp;: 
 BackSpace (BS) </p>

<p><span class=Code>\t</span> &nbsp;: 
 Horizontal Tabulation (TAB) </p>

<p><span class=Code>\uHHHH</span>: Hexadecial Unicode Character HHHH</p>

<p><span class=Code>\AllCharacter: </span>&nbsp;left 
 as such</p>

<p>&nbsp;</p>

<h2>String formatting</h2>

<p>String formatting can be very useful. it is very close to the C function 
 sprintf() :</p>

<p>Examples :</p>

<p><span class=Code>&quot;My tailor is %s...&quot; % &quot;rich&quot;</span> 
 returns <span class=Code>&quot;My tailor is rich...&quot;</span></p>

<p><span class=Code>&quot;Tea %d %d %s&quot; % (4, 2, &quot;etc.&quot;)</span> 
 returns <span class=Code>&quot;Tea 4 2 etc.&quot;</span></p>

<p><span class=Code>&quot;%(itemNumber)d %(itemColor)s&quot; % {&quot;itemNumber&quot;:123, 
 &quot;itemColor&quot;:&quot;blue&quot;}</span> returns <span class=Code>&quot;123 
 blue&quot;</span></p>

<p>&nbsp;</p>

<p>% codes to format strings:</p>

<table x-use-null-cells>

<tr>
<th class=whs2
	style="x-cell-content-align: top;"
	valign=top>
<p>Code</th>
<th class=whs3
	style="x-cell-content-align: top;"
	valign=top>
<p class=TitreTableau
	style="text-align: center;"
	align=center>Description </th></tr>

<tr>
<td class=whs4>
<p class="whs2"><span class=Code><B>%s</B></span></td>
<td class=whs5>
<p>String or any object</td></tr>

<tr>
<td class=whs6>
<p class="whs2"><span class=Code><B>%r</B></span></td>
<td class=whs7>
<p>Equivalent to %s but uses repr()</td></tr>

<tr>
<td class=whs8>
<p class="whs2"><span class=Code><B>%c </B></span></td>
<td class=whs9>
<p>Character</td></tr>

<tr>
<td colspan=1
	rowspan=1
	class=whs10>
<p class="whs2"><span class=Code><B>%d </B></span></td>
<td colspan=1
	rowspan=1
	class=whs11>
<p>Decimal integer</td></tr>

<tr>
<td class=whs12>
<p class="whs2"><span class=Code><B>%i</B></span></td>
<td class=whs13>
<p>Integer</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p class="whs2"><span class=Code><B>%u</B></span></td>
<td colspan=1
	rowspan=1>
<p>Unsigned integer</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p class="whs2"><span class=Code><B>%o </B></span></td>
<td colspan=1
	rowspan=1>
<p>Octal integer</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p class="whs2"><span class=Code><B>%x, %X</B></span></td>
<td colspan=1
	rowspan=1>
<p>Hexadecimal integer</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p class="whs2"><span class=Code><B>%e, %E</B></span></td>
<td colspan=1
	rowspan=1>
<p>Float exponent</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p class="whs2"><span class=Code><B>%f, %F </B></span></td>
<td colspan=1
	rowspan=1>
<p>Float</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p class="whs2"><span class=Code><B>%g, %G </B></span></td>
<td colspan=1
	rowspan=1>
<p>%e or %f float</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p class="whs2"><span class=Code><B>%% </B></span></td>
<td colspan=1
	rowspan=1>
<p>'%' literal</td></tr>
</table>

<p>&nbsp;</p>

<h2>Most common methods for strings</h2>

<p>The following table summarizes the most common methods for strings. 
 For instance, if <span class=Code>s</span> is a string, <span class=Code>s.lower()</span> 
 returns s converted to lower cases. All operations on sequences are authorized.</p>

<table x-use-null-cells>

<tr>
<th class=whs2
	style="x-cell-content-align: top;"
	valign=top>
<p>Code</th>
<th class=whs3
	style="x-cell-content-align: top;"
	valign=top>
<p class=TitreTableau
	style="text-align: center;"
	align=center>Description </th></tr>

<tr>
<td class=whs4>
<p><span class=Code>s.capitalize()</span></td>
<td class=whs5>
<p>Returns a copy of s in upper cases</td></tr>

<tr>
<td class=whs6>
<p><span class=Code>s.center(width)</span></td>
<td class=whs7>
<p>Returns a copy of s centered on a string of <span class=Code>width</span> 
 characters</td></tr>

<tr>
<td class=whs8>
<p><span class=Code>s.count(sub[,start[,end]])</span></td>
<td class=whs9>
<p>Returns the number of occurrences of <span class=Code>sub</span> in 
 <span class=Code>s</span></td></tr>

<tr>
<td colspan=1
	rowspan=1
	class=whs10>
<p><span class=Code>s.encode([encoding[,errors]])</span></td>
<td colspan=1
	rowspan=1
	class=whs11>
<p>Returns the encoded version of s</td></tr>

<tr>
<td class=whs12>
<p><span class=Code>s.endswith(suffix[,start[,end]])</span></td>
<td class=whs13>
<p>Returns TRUE if s ends with a suffix</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.expandtabs([tabsize])</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a copy of s where all tabulations are replaced with tabsize 
 spaces</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.find(sub[,start[,end]])</span></td>
<td colspan=1
	rowspan=1>
<p>Returns the first index of s where sub was found</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.index(sub[,start[,end]])</span></td>
<td colspan=1
	rowspan=1>
<p>Same as 'find' but returns an error sub is not found</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.isalnum()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns TRUE if all characters of s are alpha numeric</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.isalpha()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns TRUE if all characters of s are alpha</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.isdigit()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns TRUE if all characters of s are numeric</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.islower()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns TRUE if s is in lower case.</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.isspace()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns TRUE if s only contains spaces</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.istitle()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns TRUE if each word in s starts with an upper case</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.isupper()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns TRUE if all characters in s are in upper case</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.join(seq)</span></td>
<td colspan=1
	rowspan=1>
<p>Returns the concatenation of strings of the sequence seq separated by 
 s</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.ljust(width)</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a left justified copy of s with a maximum length of width characters</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.lower()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a lower case copy of s</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.lstrip()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a copy of s, trimming all spaces on the left.</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.replace(old, new[, maxsplit])</span></td>
<td colspan=1
	rowspan=1>
<p>Replaces old with new in s</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.rfind(sub[,start[,end]])</span></td>
<td colspan=1
	rowspan=1>
<p>Returns the last index of s where sub was found</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.rindex(sub[,start[,end]])</span></td>
<td colspan=1
	rowspan=1>
<p>Same as rfind but returns an error if not found</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.rjust(width)</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a right-justified copy of s with a maximum length of width characters</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.rstrip()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a copy of s, trimming all spaces on the right</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.split([sep[,maxsplit]])</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a list of words from s, using sep as a separator</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.splitlines([keepends])</span></td>
<td colspan=1
	rowspan=1>
<p>Returns the list of lines from s</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.startswith(prefix[,start[,end]])</span></td>
<td colspan=1
	rowspan=1>
<p>Returns TRUE if s starts with prefix</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.strip()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a copy of s trimming all spaces on the left and right</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.swapcase()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a copy of s with uppercases converted to lowercases and vice 
 versa</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.title()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns a copy of s where all words start with an uppercase.</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.translate(table[,deletechars])</span></td>
<td colspan=1
	rowspan=1>
<p>Translates s according to table</td></tr>

<tr>
<td colspan=1
	rowspan=1>
<p><span class=Code>s.upper()</span></td>
<td colspan=1
	rowspan=1>
<p>Returns an uppercase copy of s</td></tr>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

</body>
</html>
