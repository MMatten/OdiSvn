<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html DIR=LTR>

<head>
<title>Productivity</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="../../include/common_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='../../include/common.css'>");}
//-->
</script>
<script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="../../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="../../whutils.js"></script>
<script type="text/javascript" language="javascript" src="../../whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='../../wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("User's Guide\nConcepts\nProductivity");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("../../index.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h1>Productivity</h1>

<p>Interfaces require a workload varying from a few days to several months. 
 In the past, some data migrations were rapidly implemented between files, 
 but today, with the multiplication of technologies (DBMS, MOM, LDAP, XML, 
 etc), creating an interface is an operation that sometimes takes much 
 longer than expected. Where is the progress? What are the elements that 
 generate this load? By what means can this be remedied? </p>

<h2>The evolution of RDBMS</h2>

<p>On RDBMSs, the main development concerns the management of erroneous 
 data. Relational databases refuse the input of any data that doesn't conform 
 to the application model. The mechanism put in place is the implicit check 
 of different types of integrity rules: datatype (date, currency, etc), 
 primary keys, alternate keys, foreign keys (link between tables), and 
 complex rules. In this context, it is difficult to consider only one part 
 of the model when constructing an interface. For example, every loading 
 of an entity &quot;Invoices&quot; requires the prior loading of the entities 
 &quot;Customers&quot;, &quot;Payment methods&quot; and other parameter 
 tables. Finally, it must be noted that this mechanism has an impact on 
 the organization of projects. In fact, construction and testing each interface 
 should take place according to the order of the data model's functional 
 dependencies. </p>

<p>Moreover, interfaces load more open systems like Data Warehouse, in 
 which the smallest data error generates grossly incorrect results. These 
 errors are difficult to detect by testing the target application, as the 
 data is regularly added to. In addition, the user constructs his information 
 requests himself with powerful access tools. This type of project requires 
 all input data to be systematically checked in relation to a semantic 
 model comprising all the data consistency rules. </p>

<p>The democratization of data access tools to people in the field makes 
 it necessary to load decision databases on an everyday basis. This higher 
 frequency level requires interfaces with faster execution and which don't 
 block on data errors. Programming this type of interface is much more 
 complex than a monthly cancel-and-replace-type loading without data quality 
 control. </p>

<h2>The evolution of technologies and needs</h2>

<p>Companies need to open up to the outside world and streamline the dialog 
 between their applications, in order to respond more rapidly to external 
 requests (customers, suppliers, etc). To cover these needs, the market 
 has provided companies with new technologies (MOM, XML, LDAP directories) 
 requiring new access methods and new skills.</p>

<p>In this context, interface construction becomes technically complex 
 and requires many different skills.</p>

<h2>The importance of the right tool</h2>

<p>Interfaces are driven by several types of rules (mapping, transformation, 
 aggregation, filter, etc) used repetitively; the same is true of their 
 programming and their mode of operation and error management. The absence 
 of integrated tools for supporting the design, programming, documentation 
 and maintenance of these rules leads to repetitive interventions on each 
 of them, and at all levels (design, documentation, programming, operation, 
 maintenance). A tool that stores the management rules of an interface, 
 and which is capable of interpreting them, reduces the documentation and 
 programming phases by more than 90%. Moreover, it removes the supplementary 
 load induced by most of the interface characteristics. </p>

<p>With a tool, rule maintenance is a very isolated operation, usually 
 requiring only one person's intervention. Thus, an interface written to 
 do cancel-and-replace (deletion, then re-creation of the target on each 
 execution) must be totally rewritten if a higher logging level is to be 
 added in the target database (for example, 5 years on the target database 
 and 18 months on the source). With a tool that stores these rules, all 
 that needs to be done is to modify the type of interface without changing 
 the transformation rules (mapping, calculations, filters, aggregation, 
 etc). </p>

</body>
</html>
