<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>Developing Open Tools</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="../include/common_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='../include/common.css'>");}
//-->
</script>
<style>
<!--
div.JavaCodebox { letter-spacing:-0.5pt; font-family:"Courier New" , monospace; font-size:x-large; float:none; margin-left:20px; }
-->
</style><style type="text/css">
<!--
th.whs1 { x-cell-content-align:top; }
td.whs2 { x-cell-content-align:top; }
ol.whs3 { list-style:decimal; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='../wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("Oracle Data Integrator Tools Reference\nDeveloping Open Tools");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("../index.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h1>Developing Open Tools</h1>

<h2>Overview</h2>

<p>An Open Tool is a Java package that contains a compiled Java class that 
 implements the interface <span class=Code>oracle.odi.sdk.opentools.IOpenTool</span>. 
 For a complete description of all the classes and methods, see the <a href target="_blank">Open Tools SDK documentation</a> (JavaDoc).</p>

<p>An Open Tool package should usually also contain two icons, which are 
 used to represent the Open Tool in the Oracle Data Integrator graphical 
 interface.</p>

<h2>Classes</h2>

<table x-use-null-cells>

<tr>
<th valign="top" class="whs1">
<p class=TitreTableau>Class or Interface</th>
<th valign="top" class="whs1">
<p class=TitreTableau>Description</th></tr>

<tr>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau><span class=Code>IOpenTool</span></td>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau>Interface that every Open Tool must implement.</td></tr>

<tr>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau><span class=Code>OpenToolAbstract </span></td>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau>Abstraction of interface with some helper methods. 
 Preferably extend this class rather than implementing the interface directly.</td></tr>

<tr>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau><span class=Code>IOpenToolParameter</span></td>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau>Interface that parameters used by Open Tools must 
 implement. In most cases, <span class=Code>OpenToolParameter</span> should 
 be used rather than implementing this interface.</td></tr>

<tr>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau><span class=Code>OpenToolParameter</span></td>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau>Complete implementation of <span class=Code>IOpenToolParameter</span>. 
 Each <span class=Code>OpenToolParameter</span> holds one parameter.</td></tr>

<tr>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau><span class=Code>OpenToolsExecutionException</span></td>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau>Exception class that should be thrown if necessary 
 by Open Tool methods.</td></tr>

<tr>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau><span class=Code>SimpleOpenToolExample</span></td>
<td colspan="1" rowspan="1" valign="top" class="whs2">
<p class=TexteTableau>A simple example of an Open Tool, that can be used 
 as a starting point.</td></tr>
</table>

<h2>Developing a new Open Tool</h2>

<p>The following explanation covers the development of a basic Open Tool, 
 SimpleMessageBox. The source code for this class is available in the <span 
 class=Code>demo/plugins/src</span> directory.</p>

<ol type="1" class="whs3">
	
	<li class=kadov-p><p>Define the syntax. In this example, the Open Tool 
 is called as follows:<span class=Code><br>
	SimpleMessageBox &quot;-TEXT=&lt;text message&gt;&quot; &quot;-TITLE=&lt;window 
 title&gt;&quot;</span></p></li>
	
	<li class=kadov-p><p>Create 16x16 and 32x32 icons (usually in .gif 
 format)</p></li>
	
	<li class=kadov-p><p>Create and implement the class. See below.</p></li>
	
	<li class=kadov-p><p>Compile the class and create a package with the 
 two icon files.</p></li>
	
	<li class=kadov-p><p>Install the Open Tool as described in <a href="using_opentools.htm">Using 
 Open Tools</a>.</p></li>
</ol>

<h3>Implementing the class</h3>

<h4>Declaration</h4>

<h5>Naming the package</h5>

You should put the class in a package named appropriately. The package 
 name is used to identify the Open Tool when installing it. 

<div class=JavaCodeBox>
<p class=JavaCode>package com.myCompany.OpenTools;</p>
</div>

<h5>Declaring the class</h5>

<p>There are two basic approaches to developing an Open Tool:</p>

<ul>
	
	<li style="list-style: disc;"
		type=disc
		class=kadov-p><p>Extending an existing class which you want to 
 convert into an Open Tool. In this case, you should simply implement the 
 interface <span class=Code>IOpenTool</span> directly on the existing class.</p></li>
	
	<li style="list-style: disc;"
		type=disc
		class=kadov-p><p>Developing a new class. In this case, it is easiest 
 to extend the abstract class <span class=Code>OpenToolAbstract</span>. 
 This also contains additional helper methods for working with parameters.</p></li>
</ul>

<p>&nbsp;</p>

<div class=JavaCodeBox>
<p class=JavaCode>public class SimpleMessageBox extends OpenToolAbstract 
 {</p>
</div>

<h4>Packages</h4>

<p>Almost every Open Tool will need to import the following Open Tool SDK 
 packages.</p>

<div class=JavaCodeBox>
<p class=JavaCode>import oracle.odi.sdk.opentools.IOpenTool; /* All Open 
 Tool classes need these three classes &nbsp;*/</p>

<p class=JavaCode>import oracle.odi.sdk.opentools.IOpenToolParameter;</p>

<p class=JavaCode>import oracle.odi.sdk.opentools.OpenToolExecutionException;</p>

<p class=JavaCode>import oracle.odi.sdk.opentools.OpenToolAbstract; /* 
 The abstract class we extend for the Open Tool */</p>

<p class=JavaCode>import oracle.odi.sdk.opentools.OpenToolParameter; /* 
 The class we use for parameters */</p>
</div>

In this particular example, we also need a package to create the message 
 box: 

<div class=JavaCodeBox>
<p class=JavaCode>import javax.swing.JOptionPane; /* Needed for the message 
 box used in this example */</p>
</div>

<h4>Parameters</h4>

<p>Add a property to store the <span class=Code>OpenToolParameter</span> 
 objects. This is used both to define them for the syntax, and to retrieve 
 the values of the parameters from the eventual user. &nbsp;It 
 is easiest to define the parameters of the Open Tool with a static array 
 as follows. This array should be private, as it will be accessed via an 
 accessor function.</p>

<div class=JavaCodeBox>
<p class=JavaCode>private static final IOpenToolParameter[] mParameters 
 = new IOpenToolParameter[]</p>

<p class=JavaCode>{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;new 
 OpenToolParameter(&quot;-TEXT&quot;, &quot;Message text&quot;, &quot;Text 
 to show in the messagebox (Mandatory).&quot;, true),</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;new 
 OpenToolParameter(&quot;-TITLE&quot;, &quot;Messagebox title&quot;, &quot;Title 
 of the messagebox.&quot;, false)</p>

<p class=JavaCode>}; &nbsp;</p>
</div>

<p>The four parameters passed to the <span class=Code>OpenToolParameter()</span> 
 constructor are as follows:</p>

<ol type="1" class="whs3">
	
	<li class=kadov-p><p>The code of the parameter, including the initial 
 hyphen. It is critical that this code corresponds to the syntax returned 
 by <span class=Code>getSyntax()</span>.</p></li>
	
	<li class=kadov-p><p>The user-friendly name, which is used if the user 
 is using the graphical interface to set parameters.</p></li>
	
	<li class=kadov-p><p>A descriptive help text.</p></li>
	
	<li class=kadov-p><p>Whether the parameter is mandatory or not. This 
 is an indication to the user.</p></li>
</ol>

<p class=Remarque><span class=RemarqueTitre>Note:</span> Oracle Data Integrator 
 does not enforce the mandatory flag on parameters. Your class must be 
 able to handle any combination of parameters being provided.</p>

<p>You must implement the accessor function <span class=Code>getParameters()</span> 
 to retrieve them:</p>

<div class=JavaCodeBox>
<p class=JavaCode>public IOpenToolParameter[] getParameters()</p>

<p class=JavaCode>{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;return 
 mParameters;</p>

<p class=JavaCode>}</p>
</div>

<h4>Informational functions</h4>

<p>Implement functions to return information about your Open Tool: <span 
 class=Code>getDescription()</span>, <span class=Code>getVersion()</span>, 
 <span class=Code>getProvider()</span> </p>

<div class=JavaCodeBox>
<p class=JavaCode>public String getDescription() { &nbsp;&nbsp;&nbsp;&nbsp;return 
 &quot;This Open Tool displays a message box when executed.&quot;; } </p>

<p class=JavaCode>public String getVersion() { &nbsp;&nbsp;&nbsp;&nbsp;return 
 &quot;v1.0&quot;; }</p>

<p class=JavaCode>public String getProvider() { &nbsp;&nbsp;&nbsp;&nbsp;return 
 &quot;My Company, Inc.&quot;; }</p>
</div>

<p>The <span class=Code>getSyntax()</span> function determines the name 
 of the Open Tool as it appears in the Oracle Data Integrator graphical 
 interface, and also the initial values of the parameter. Make sure the 
 names of the parameters here match the names of the parameters returned 
 by g<span class=Code>etParameters()</span>.</p>

<div class=JavaCodeBox>
<p class=JavaCode>public String getSyntax()</p>

<p class=JavaCode>{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;return 
 &quot;SimpleMessageBox \&quot;-TEXT=&lt;text message&gt;\&quot; &nbsp;\&quot;-TITLE=&lt;window 
 title&gt;\&quot;&quot;;</p>

<p class=JavaCode>}</p>
</div>

<p>The <span class=Code>getIcon()</span> method should then return paths 
 to two appropriately sized images. It should look something like this:</p>

<div class=JavaCodeBox>
<p class=JavaCode>public String getIcon(int pIconType)</p>

<p class=JavaCode>{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;switch 
 (pIconType)</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 
 IOpenTool.SMALL_ICON: </p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
 &quot;/com/myCompany/OpenTools/images/SimpleMessageBox_16.gif&quot;;</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 
 IOpenTool.BIG_ICON: </p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
 &quot;/com/myCompany/OpenTools/images/SimpleMessageBox_32.gif&quot;;</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
 &quot;&quot;;</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p class=JavaCode>}</p>
</div>

<h4>Execution</h4>

<p>Finally, of course is the <span class=Code>execute()</span> method which 
 actually carries out the functionality provided by the Open Tool. In this 
 case, a message box is shown. If extending the <span class=Code>OpenToolAbstract</span> 
 class, use the <span class=Code>getParameterValue()</span> method to easily 
 retrieve the values of parameters as they are set at run time.</p>

<p class=Remarque><span class=RemarqueTitre>Note:</span> You must catch 
 all executions and only raise a <span class=Code>OpenToolExecutionException</span>.</p>

<div class=JavaCodeBox>
<p class=JavaCode>public void execute() throws OpenToolExecutionException</p>

<p class=JavaCode>{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;try</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;if 
 (getParameterValue(&quot;-TITLE&quot;) == null || getParameterValue(&quot;-TITLE&quot;).equals(&quot;&quot;)) 
 /* title was not filled in by user */</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JOptionPane.showMessageDialog(null, 
 (String) getParameterValue(&quot;-TEXT&quot;), (String) &quot;Message&quot;, 
 JOptionPane.INFORMATION_MESSAGE);</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
 else </p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JOptionPane.showMessageDialog(null, 
 (String) getParameterValue(&quot;-TEXT&quot;), </p>

<p class=JavaCode
	style="margin-left: 120px;">(String) getParameterValue(&quot;-TITLE&quot;), 
 JOptionPane.INFORMATION_MESSAGE);</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;/* 
 Traps any exception and throw them as OpenToolExecutionException */</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;catch 
 (IllegalArgumentException e)</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;{</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw 
 new OpenToolExecutionException(e);</p>

<p class=JavaCode>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p class=JavaCode>}</p>
</div>

<h2>Open Tools at Run Time</h2>

<p>In general, your Open Tool class is instanciated only very briefly. 
 It is used in the following ways:</p>

<h3>Installation</h3>

When the user chooses to install an Open Tool, Oracle Data Integrator instanciates 
 the class and calls the methods &nbsp;<span 
 class=Code>getDescription()</span>, <span 
 class=Code>getProvider(), getIcon()</span> and <span class=Code>getVersion() 
 </span>to retrieve information about the class. 

<h3>Use in a package</h3>

When the Open Tool is used in a package, the class will be instanciated 
 briefly to call the methods <span class=Code>getDescription()</span>, 
 <span class=Code>getProvider()</span>, <span class=Code>getIcon()</span> 
 and <span class=Code>getVersion()</span>. Additionally, <span class=Code>getSyntax()</span> 
 will be called to retrieve the code name of the Open Tool and its default 
 arguments. The method g<span class=Code>etParameters()</span> is called 
 to display the list of arguments to the user. 

<h3>Execution</h3>

Each time the Open Tool is executed in a package or procedure, the class 
 is instanciated again - it has no persistence after its execution. The 
 <span class=Code>execute()</span> method is called exactly once. 

<h4>See also:</h4>

<p><a href="using_opentools.htm">Using Open Tools</a></p>

<p><a href target="_blank">Open Tools SDK documentation</a> (JavaDoc)</p>

</body>
</html>
