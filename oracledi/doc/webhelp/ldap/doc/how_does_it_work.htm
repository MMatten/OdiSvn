<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<!-- saved from url=(0026)http://www.macromedia.com/ -->
<html>

<head>
<title>How does it work?</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="common_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='common.css'>");}
//-->
</script>
<style type="text/css">
<!--
ul.whs1 { list-style:disc; }
img_whs2 { border:none; width:534px; height:283px; float:none; border-style:none; }
img_whs3 { border:none; width:628px; height:274px; float:none; border-style:none; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='../wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("Oracle Data Integrator Driver for LDAP\nHow does it work?");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("../index.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h1><a name=TOP></a>How does it work?</h1>

<p>The driver is able to map a <span style="font-weight: bold;"><B>Relational 
 Structure</B></span> (that is a set of tables, columns, keys and constraints) 
 from the LDAP tree contents. This process is called <span style="font-weight: bold;"><B>LDAP 
 to Relational Mapping. &nbsp;</B></span>The user is able to manipulate the 
 LDAP data through this relational structure using standard <span style="font-weight: bold;"><B>SQL</B></span> 
 statements. Any changes are directly impacted by the driver in the LDAP 
 data.</p>

<h2><a name=LDAP_TO_SQL></a>LDAP to Relational Mapping</h2>

<p>The LDAP Tree to Relational Mapping is a complex but automated process 
 that is used to generate a relational structure. As LDAP servers do not 
 provide metadata information in a standard way, this mapping is performed 
 using data introspection from the LDAP tree. Therefore, automatic mapping 
 is carried out on the <span style="font-weight: bold;"><B>contents</B></span> 
 of the LDAP tree used as a source for &nbsp;this 
 process.</p>

<h4>Principles</h4>

<p>The OracleDI Driver for LDAP maps LDAP elements to a relational schema 
 in the following way:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>Each <span style="font-weight: bold;"><B>LDAP Class</B></span> 
 or combination of classes is mapped to a relational <span style="font-weight: bold;"><B>Table</B></span>. 
 Each <span style="font-weight: bold;"><B>entry </B></span>from the LDAP tree 
 is mapped to a <span style="font-weight: bold;"><B>record</B></span> in the relational 
 model table.</p></li>
	
	<li class=kadov-p><p>Each <span style="font-weight: bold;"><B>A</B></span><span 
 style="font-weight: bold;"><B>ttribute</B></span> of the class instances is mapped 
 to a <span style="font-weight: bold;"><B>Column</B></span>.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Hierarchical 
 relationships</B></span> between entries are mapped using <span style="font-weight: bold;"><B>Foreign 
 Keys</B></span>. A table representing a hierarchical level is created with 
 a primary key called <span class=Code>&lt;tablename&gt;PK</span>. Relational 
 model records reference their parent tables through a <span class=Code>&lt;parent_level_tablename&gt;FK 
 </span>column. The root of the LDAP tree structure is mapped to a table 
 called <span class=Code>ROOT</span> containing a <span class=Code>ROOTPK</span> 
 column in a unique record.</p></li>
</ul>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Attributes with 
 multiple values </B></span>for an entry (for example, a PERSON entry with 
 several EMAIL attributes) are mapped as sub-tables called <span class=Code>&lt;parent_tablename&gt;&lt;attribute_name&gt;</span>. 
 Each Sub-table contains a <span class=Code>&lt;parent_tablename&gt;FK</span> 
 column linking it to the parent table.</p></li>
</ul>

<p>&nbsp;</p>

<p>Example: The LDAP tree below contains <span class=Code>OrganizationalUnit</span> 
 entries linking to <span class=Code>Person</span> instances. In this case, 
 certain <span class=Code>Person</span> entries have multiple email addresses.</p>

<p><img src="ldap_tree.jpg" x-maintain-ratio="TRUE" width="534px" height="283px" border="0" class="img_whs2"></p>

<p>This LDAP tree will be mapped into the following relational structure:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>The <span class=Code>ROOT</span> table represents 
 the root of the hierarchy and contains one <span class=Code>ROOTPK </span>column.</p></li>
	
	<li class=kadov-p><p>The <span class=Code>ORGANIZATIONALUNIT</span> 
 table represents different <span class=Code>organizationalUnit</span> 
 instances of the tree. It contains the <span class=Code>ORGANIZATIONALUNITPK</span> 
 primary key column and the attributes of the <span class=Code>organizationalUnit</span> 
 instances (<span class=Code>cn</span>, <span class=Code>telephoneNumber</span>, 
 etc.). It is linked to the <span class=Code>ROOT</span> table by the <span 
 class=Code>ROOTFK</span> foreign key column.</p></li>
	
	<li class=kadov-p><p>The<span class=Code> PERSON</span> table represents 
 the instances of the <span class=Code>person </span>class. It contains 
 the <span class=Code>PERSONPK</span> primary key column and the <span 
 class=Code>ORGANIZATIONALUNITFK</span> linking it to the <span class=Code>ORGANIZATIONALUNIT</span> 
 table and the attributes of PERSON instances, (telephoneNumber, description, 
 cn).</p></li>
	
	<li class=kadov-p><p>The Email attribute appears a <span class=Code>PERSON</span>_EMAIL 
 table containing the <span class=Code>EMAIL</span> column and a <span 
 class=Code>PERSONFK</span> linking a list of email attributes to a PERSON 
 record.</p></li>
</ul>

<p>See the resulting mapping below:</p>

<p><img src="sql_map.jpg" x-maintain-ratio="TRUE" width="628px" height="274px" border="0" class="img_whs3"></p>

<p>&nbsp;</p>

<h4>Grouping Factor</h4>

<p>In LDAP directories, class entries are often specified by inheriting 
 attributes from multiple class definitions. In the relational mapping 
 procedure, the OracleDI Driver for LDAP translates this fact by combining 
 each combination of classes in an LDAP entry to generate a new table.</p>

<p>Example: Some entries of the <span class=Code>Person</span> class may 
 also be instances of either of the <span class=Code>Manager</span> or 
 <span class=Code>BoardMember</span> classes (or both). In this case, the 
 mapping procedure would generate a <span class=Code>PERSON</span> table 
 (for the instances of &nbsp;<span class=Code>Person</span>) but also <span 
 class=Code>MANAGER_PERSON,</span> <span class=Code>BOARDMEMBER_PERSON</span>, 
 <span class=Code>BOARDMEMBER_MANAGER_PERSON</span> etc, tables depending 
 on the combination of classes existing in the LDAP tree.</p>

<p>In order to avoid unnecessary multiplication of generated tables, it 
 is possible parameterize this behavior. The <span style="font-weight: bold;"><B>Grouping 
 Factor</B></span> parameter allows this by defining the number of divergent 
 classes below which the instances remain grouped together in the same 
 table. This resulting table contains flag columns named as following, 
 <span class=Code>IS_&lt;classname&gt;</span>, whose values determine the 
 class subset to which the instance belongs. For example, if <span class=Code>IS_&lt;classname&gt;</span> 
 is set to 1, then the instance represented by the record belongs to <span 
 class=Code>&lt;classname&gt;.</span></p>

<p>The behavior described above corresponds to a Grouping Factor equal 
 to zero. With a grouping factor equal to one, instances with only one 
 divergent class remain in the same table.</p>

<p>Example (continued): In our case, with a Grouping Factor greater than 
 or equal to 2, all &nbsp;company 
 person instances (including <span class=Code>Person</span>, <span class=Code>Manager</span> 
 and <span class=Code>BoardMember</span> class instances) are grouped in 
 the <span class=Code>PERSON</span> table. The <span class=Code>IS_MANAGER</span> 
 and <span class=Code>IS_BOARDMEMBER</span> columns enable to determine 
 the records belonging also to the <span class=Code>Manager</span> and/or 
 <span class=Code>BoardMember</span> classes.</p>

<h4>Specific Issues</h4>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Table name length 
 limits and collisions</B></span>: In certain cases, name-length restrictions 
 may result in possible object &nbsp;&quot;name collisions&quot;. The OracleDI 
 Driver for LDAP avoids such situations by automatically generating 3 digit 
 suffixes to the object name.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Key column</B></span>: 
 It is possible to create an additional <span class=Code>SNPSLDAPKEY</span> 
 column&nbsp;containing the Relative Distinguished Name as identifier of 
 the current record (original LDAP class instance) by setting the <span 
 class=Code>key_column</span> URL parameter to true. This column must be 
 loaded if performing DML commands which update LDAP tree contents. Note 
 that this column is created only in tables which originate from LDAP instances. 
 Tables which correspond to multiple valued instance <span style="font-weight: bold;"><B>attributes</B></span><span> 
 will </span><span style="font-weight: bold;"><B>not</B></span><span> be created 
 with these columns.</span> </p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Case sensitivity</B></span>: 
 This is set by the <span class=Code>case_sens</span> URL parameter that 
 makes the RDBMS and LDAP servers to enforce case-sensitivity.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>Special characters</B></span>: 
 It is possible in LDAP to have non alphanumeric characters into attribute 
 or class names. These characters are converted to underscores (&quot;_&quot;) 
 during the mapping. Exception: If non alphanumeric, the first character 
 is converted to &quot;x&quot;.</p></li>
</ul>

<p>&nbsp;</p>

<p><a href="how_does_it_work.htm#TOP">Back to Top</a></p>

<h2><a name=MANAGING_LDAP_MODELS></a>Managing LDAP Models</h2>

<p>With the OracleDI Driver for LDAP it is possible to make reference to 
 generic LDAP trees to assist in the creation of the associated relational 
 model when performing the LDAP to Relational mapping procedure. This is 
 carried out with the <span class=Code>lm_props</span> or <span class=Code>lm</span> 
 parameter of the driver URL. This parameter specifies a .<span style="font-style: italic;"><I>properties</I></span> 
 file containing connection data to a generic LDAP tree whose hierarchical 
 structure rigorously reflects that of the operational LDAP tree but without 
 the accompanying data volume. </p>

<p>This technique reveals certain advantages in the recuperation of LDAP 
 trees and their translation into relational models:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>For example, &nbsp;in 
 the storing of a generic LDAP tree structure. This technique allows the 
 LDAP directory administrator to retain a generic and stable view of the 
 LDAP tree for later use.</p></li>
	
	<li class=kadov-p><p>To optimize reverse-engineering operations. This 
 is particularly important for large operational LDAP directories. In this 
 case, the LDAP to Relational mapping operation will only require a generic 
 LDAP tree skeleton containing a few instances of entries. This will result 
 in reduced processing time and resources for &nbsp;running 
 the procedure. </p></li>
</ul>

<p>The use of this technique, however, imposes a certain number of constraints 
 in the design of the precise structure of the generic LDAP tree:</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>All</B></span> optional 
 LDAP instance attributes <span style="font-weight: bold;"><B>must</B></span> 
 be instanciated in the generic LDAP entries. Even if these attributes 
 are absent in the operational LDAP directory entries, they must be declared 
 in the generic LDAP tree if they are to be used at a later time.</p></li>
	
	<li class=kadov-p><p>Any <span style="font-weight: bold;"><B>multiple 
 valued</B></span> attributes which exist in the operational LDAP directory 
 must be instanciated <span style="font-weight: bold;"><B>as such</B></span> in 
 the generic LDAP tree. For example, if any <span class=Code>Person</span> 
 instance in the operational LDAP directory possesses two <span class=Code>telephoneNumber 
 </span>attributes, then the generic <span class=Code>Person</span> class 
 <span style="font-weight: bold;"><B>must</B></span> instanciate at least two 
 <span class=Code>telephoneNumber </span>attributes in the generic LDAP 
 tree structure.</p></li>
</ul>

<p class=Remarque><span class=ElementGUI>&nbsp;</span><span 
 class=AlertTitre>Note</span>: These issues 
 have a direct impact on the generated relational structure by forcing 
 the creation of additional tables and columns to map multiple attribute 
 fields and must be taken into consideration at design time of the generic 
 LDAP tree structure.</p>

<p><a href="how_does_it_work.htm#TOP">Back to Top</a></p>

<h2><a name=MANAGING_SCHEMA></a>Managing Relational Models</h2>

<h4>Relational Model Storage</h4>

<p>The relational structure resulting from the LDAP to Relational mapping 
 may be managed by <span style="font-weight: bold;"><B>Virtual Mapping</B></span> 
 or stored in an <span style="font-weight: bold;"><B>External Database</B></span>. 
 </p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>The <span style="font-weight: bold;"><B>Virtual Mapping 
 </B></span>requires no other component. The relational structure is transparently 
 mapped by the driver to the LDAP tree structure. SQL commands and functions 
 available for the driver are listed in the <a href="sql_syntax.htm">SQL 
 Syntax</a>.</p></li>
</ul>

<p class=Remarque><span class=RemarqueTitre>Note</span>: The virtual mapping 
 may require a large amount of memory for large LDAP tree structures. </p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>The <span style="font-weight: bold;"><B>External 
 Database</B></span> may be any relational database management system. The 
 driver connects through JDBC to this engine and uses it to store the relational 
 model.<br>
	This enables the leverage of:</p></li>
	
	<ul type="disc" class="whs1">
		
		<li class=kadov-p><p>processing and storage features of the chosen 
 RDBMS engine</p></li>
		
		<li class=kadov-p><p>standard and proprietary SQL statements, procedures, 
 functions etc of the chosen RDBMS</p></li>
		
		<li class=kadov-p><p>flexible persistence management of model persistence.</p></li>
	</ul>
</ul>

<h4>Accessing data in the relational structure</h4>

<p>DML operations on tables in the relational model are executed with standard 
 SQL statements. </p>

<p>Modifications to data in the model are handled in ways which depend 
 on the precise configuration of the OracleDI Driver for LDAP :</p>

<ul type="disc" class="whs1">
	
	<li class=kadov-p><p>In the case where the <span style="font-weight: bold;"><B>Virtual 
 Mapping</B></span> is used, all insert, update and delete requests are automatically 
 propagated to the original LDAP server in an &quot;autocommit&quot; mode. 
 No explicit &quot;commit&quot; or &quot;rollback&quot; statements will 
 have any impact on the OracleDI Driver for LDAP.</p></li>
	
	<li class=kadov-p><p>In the case where the <span style="font-weight: bold;"><B>External 
 Database</B></span> is used to store the relational structure, all types of 
 DML statements may be used with the driver. However, it is important to 
 know that no modifications will be propagated to the original LDAP server.</p></li>
</ul>

<p>&nbsp;</p>

<p><a href="how_does_it_work.htm#TOP">Back to Top</a></p>

</body>
</html>
