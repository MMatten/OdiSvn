<?xml version="1.0" encoding="UTF-8"?>
<glossarydata>
	<entry name="alias bundle" value="To set up table aliases, if the URL &quot;alias_bundle&quot; parameter is set, its value specifies a file consisting of records which will be made up of &lt;original table name &gt; = &lt;desiredalias name&gt; values."/>
	<entry name="Connecting to an LDAP Server" value="The Sunopsis LDAP Driver may use a .properties file to store parameter informationfor the connection to the LDAP server. This file will be used at connection timewhen the ldap_props (lp )parameter is set in the LDAP driver URL"/>
	<entry name="db_props bundle" value="External .properties file containing connection data to an external database."/>
	<entry name="Driver file name" value="The file storing the driver is called snpsldapo.jar."/>
	<entry name="Driver Name" value="com.sunopsis.ldap.jdbc.driver.SnpsLdapDriver"/>
	<entry name="External database" value="Sunopsis LDAP Driver may store the relational model mapping of the LDAP tree in an external RDBMS engine. The SQL statements and features available are those of the database."/>
	<entry name="Generic LDAP Models" value="With the Sunopsis LDAP (JDBC Edition) driver it is possible to make reference to generic LDAP trees to assist in the creation of the associated relational model when performing the LDAP to SQL mapping procedure. This is carried out with the lm_props or lm parameter of the driver URL."/>
	<entry name="Grouping Factor" value="In LDAP directories, class entries are often specified by inheriting attributes from multiple class definitions. In the relational mapping procedure, the Sunopsis LDAP Driver translates this fact by combining each combination of classes declared in an LDAP entry to generate a new relational table. In order to avoid unnecessary multiplication of generated tables, it is possible parameterize this behavior by using the the Grouping Factor parameter which allows the specification of the number of divergent classes below which the entries remain grouped together in the same table."/>
	<entry name="ldap bundle" value="An external .properties file containing connection data to the target LDAP directory to be mapped to a SQL model."/>
	<entry name="LDAP Directory" value="Information describing the various users, applications, files, printers, and otherresources accessible from a network is often collected into a special database calledan LDAP directory."/>
	<entry name="LDAP to Relational mapping" value="The driver is able to map a Relational Structure (that is a set of tables, columns, keys and constraints) from the LDAP tree contents. This process is called LDAP to Relational Mapping. Â The user is able to manipulate the LDAP data through this relational structure using standard SQL statements. Any changes are directly impacted by the driver in the LDAP data."/>
	<entry name="Licence Key" value="The licence key file is called jdbclkey.xml. It is placed in the same directory as the driver file."/>
	<entry name="lm_props bundle" value="An external .properties file containing connection parameters to a directory and a specific generic LDAP tree which will be used as a template to perform LDAP to Relational mapping."/>
	<entry name="Overriding URL  Properties" value="The Sunopsis LDAP Driver URL may specify parameters indicating the use of .propertiesfiles. These files contain specific parameters necessary for connection to the variousdatabases concerned. These values, however, may be overridden by indicating prefixedvalues directly in the call to the URL itself."/>
	<entry name="Sunopsis LDAP Driver (JDBC Edition)" value="The Sunopsis LDAP Driver (JDBC Edition) is the world's first type-4 (all Java) JDBCdriver for LDAP directories. Unlike other middleware products which transfer databetween an LDAP directory and other directory-enabled applications and databases,Sunopsis LDAP Driver treats the directory as a JDBC data source."/>
	<entry name="Table aliases" value="The Sunopsis LDAP Driver allows a certain flexibility in the definition of  the Sunopsis model table names by the use of table aliases. This is particularly useful when the algorithm used to navigate the LDAP tree generates long composite names from the LDAP class hierarchy. To avoid issues related to RDBMS-specific name-length constraints, the Sunopsis LDAP Driver can set up and use aliases."/>
	<entry name="Transaction levels" value="Due to the fact that LDAP directories do not implement transaction management, the Sunopsis LDAP (JDBC) driver functions exclusively in an implicit &quot;autocommit&quot; mode."/>
	<entry name="URL Syntax" value="jdbc:snps:ldap?&lt;parameter=value&gt;[&amp;...]"/>
	<entry name="Virtual Mapping" value="Mapping method of the LDAP tree structure on a relational structure using no other component. The SQL statements and features available with virtual mapping are those provided by the driver."/>
</glossarydata>
